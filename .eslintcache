[{"/home/miha/Documents/projects/js/nexomia-client/src/index.tsx":"1","/home/miha/Documents/projects/js/nexomia-client/src/views/App.tsx":"2","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Sidebar.tsx":"3","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Content.tsx":"4","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/SidebarHeader.tsx":"5","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/ContentHeader.tsx":"6","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Guilds.tsx":"7","/home/miha/Documents/projects/js/nexomia-client/src/components/guilds/UserMenu.tsx":"8","/home/miha/Documents/projects/js/nexomia-client/src/components/guilds/PanelButton.tsx":"9","/home/miha/Documents/projects/js/nexomia-client/src/views/Login.tsx":"10","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/Layer.tsx":"11","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/Modal.tsx":"12","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/ModalHeader.tsx":"13","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/InputField.tsx":"14","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/FilledButton.tsx":"15","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/StyledText.tsx":"16","/home/miha/Documents/projects/js/nexomia-client/src/views/Register.tsx":"17","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/LoadingPlaceholder.tsx":"18","/home/miha/Documents/projects/js/nexomia-client/src/components/animations/Dots.tsx":"19","/home/miha/Documents/projects/js/nexomia-client/src/i18n/config.ts":"20","/home/miha/Documents/projects/js/nexomia-client/src/services/api/auth/auth.service.ts":"21","/home/miha/Documents/projects/js/nexomia-client/src/services/api/common.ts":"22","/home/miha/Documents/projects/js/nexomia-client/src/config.ts":"23","/home/miha/Documents/projects/js/nexomia-client/src/services/api/users/users.service.ts":"24","/home/miha/Documents/projects/js/nexomia-client/src/services/api/guilds/guilds.service.ts":"25","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Modals.tsx":"26","/home/miha/Documents/projects/js/nexomia-client/src/components/modals/ServerCreationModal.tsx":"27","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/BigPageButton.tsx":"28","/home/miha/Documents/projects/js/nexomia-client/src/components/css/PanelIconCss.tsx":"29","/home/miha/Documents/projects/js/nexomia-client/src/components/css/LayerBackgroundShadeCss.tsx":"30","/home/miha/Documents/projects/js/nexomia-client/src/components/css/InactiveLayerCss.tsx":"31","/home/miha/Documents/projects/js/nexomia-client/src/components/sidebar/Tab.tsx":"32","/home/miha/Documents/projects/js/nexomia-client/src/components/css/StyledIconCss.tsx":"33","/home/miha/Documents/projects/js/nexomia-client/src/store/UserStore.tsx":"34","/home/miha/Documents/projects/js/nexomia-client/src/store/AuthStore.tsx":"35","/home/miha/Documents/projects/js/nexomia-client/src/store/GuildStore.tsx":"36","/home/miha/Documents/projects/js/nexomia-client/src/store/ModalStore.tsx":"37","/home/miha/Documents/projects/js/nexomia-client/src/store/ChannelStore.tsx":"38","/home/miha/Documents/projects/js/nexomia-client/src/services/api/channels/channels.service.ts":"39","/home/miha/Documents/projects/js/nexomia-client/src/components/chat/ChatView.tsx":"40","/home/miha/Documents/projects/js/nexomia-client/src/components/chat/ChatInput.tsx":"41","/home/miha/Documents/projects/js/nexomia-client/src/components/chat/MessageView.tsx":"42","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/CenteredContainer.tsx":"43","/home/miha/Documents/projects/js/nexomia-client/src/services/api/messages/messages.service.ts":"44","/home/miha/Documents/projects/js/nexomia-client/src/store/MessageStore.tsx":"45","/home/miha/Documents/projects/js/nexomia-client/src/store/MessageCacheStore.tsx":"46","/home/miha/Documents/projects/js/nexomia-client/src/store/GuildCacheStore.tsx":"47","/home/miha/Documents/projects/js/nexomia-client/src/store/ChannelCacheStore.tsx":"48","/home/miha/Documents/projects/js/nexomia-client/src/store/UserCacheStore.tsx":"49","/home/miha/Documents/projects/js/nexomia-client/src/components/chat/MessageRenderer.tsx":"50","/home/miha/Documents/projects/js/nexomia-client/src/components/profile/ProfileView.tsx":"51","/home/miha/Documents/projects/js/nexomia-client/src/utils/isTabGuild.ts":"52","/home/miha/Documents/projects/js/nexomia-client/src/store/MemberCacheStore.tsx":"53","/home/miha/Documents/projects/js/nexomia-client/src/components/contextmenus/ContextMenu.tsx":"54","/home/miha/Documents/projects/js/nexomia-client/src/store/ContextMenuStore.tsx":"55","/home/miha/Documents/projects/js/nexomia-client/src/components/contextmenus/ContextTab.tsx":"56","/home/miha/Documents/projects/js/nexomia-client/src/components/settings/SettingsView.tsx":"57","/home/miha/Documents/projects/js/nexomia-client/src/components/settings/guild/RolesView.tsx":"58","/home/miha/Documents/projects/js/nexomia-client/src/services/api/roles/roles.service.ts":"59","/home/miha/Documents/projects/js/nexomia-client/src/store/RolesCacheStore.tsx":"60","/home/miha/Documents/projects/js/nexomia-client/src/components/settings/ui/Role.tsx":"61","/home/miha/Documents/projects/js/nexomia-client/src/components/settings/ui/Permission.tsx":"62","/home/miha/Documents/projects/js/nexomia-client/src/components/settings/ui/PermissionEditor.tsx":"63","/home/miha/Documents/projects/js/nexomia-client/src/store/models/ComputedPermissions.ts":"64","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/MemberSidebar.tsx":"65","/home/miha/Documents/projects/js/nexomia-client/src/utils/PermissionCalculator.ts":"66","/home/miha/Documents/projects/js/nexomia-client/src/components/sidebar/Member.tsx":"67","/home/miha/Documents/projects/js/nexomia-client/src/utils/getMemberColor.ts":"68","/home/miha/Documents/projects/js/nexomia-client/src/services/socket/SocketManager.ts":"69","/home/miha/Documents/projects/js/nexomia-client/src/services/socket/events/Messages.ts":"70","/home/miha/Documents/projects/js/nexomia-client/src/services/socket/events/Users.ts":"71","/home/miha/Documents/projects/js/nexomia-client/src/services/socket/events/Roles.ts":"72","/home/miha/Documents/projects/js/nexomia-client/src/utils/getUrlEncodedString.ts":"73"},{"size":745,"mtime":1627597352775,"results":"74","hashOfConfig":"75"},{"size":3758,"mtime":1627993854313,"results":"76","hashOfConfig":"75"},{"size":7017,"mtime":1628107835043,"results":"77","hashOfConfig":"75"},{"size":1612,"mtime":1627683670922,"results":"78","hashOfConfig":"75"},{"size":163,"mtime":1627018358125,"results":"79","hashOfConfig":"75"},{"size":2103,"mtime":1627680736184,"results":"80","hashOfConfig":"75"},{"size":3285,"mtime":1627986299331,"results":"81","hashOfConfig":"75"},{"size":2386,"mtime":1627683881976,"results":"82","hashOfConfig":"75"},{"size":448,"mtime":1627680724782,"results":"83","hashOfConfig":"75"},{"size":3243,"mtime":1627596811177,"results":"84","hashOfConfig":"75"},{"size":276,"mtime":1627682556678,"results":"85","hashOfConfig":"75"},{"size":308,"mtime":1627028022731,"results":"86","hashOfConfig":"75"},{"size":277,"mtime":1626934198646,"results":"87","hashOfConfig":"75"},{"size":769,"mtime":1627227991041,"results":"88","hashOfConfig":"75"},{"size":462,"mtime":1627227809580,"results":"89","hashOfConfig":"75"},{"size":252,"mtime":1627214753219,"results":"90","hashOfConfig":"75"},{"size":3947,"mtime":1627925367669,"results":"91","hashOfConfig":"75"},{"size":1570,"mtime":1627909372419,"results":"92","hashOfConfig":"75"},{"size":616,"mtime":1626934226635,"results":"93","hashOfConfig":"75"},{"size":334,"mtime":1626959070191,"results":"94","hashOfConfig":"75"},{"size":688,"mtime":1626955086129,"results":"95","hashOfConfig":"75"},{"size":1366,"mtime":1629024075137,"results":"96","hashOfConfig":"75"},{"size":146,"mtime":1627989350183,"results":"97","hashOfConfig":"75"},{"size":349,"mtime":1627295837712,"results":"98","hashOfConfig":"75"},{"size":1058,"mtime":1627295901306,"results":"99","hashOfConfig":"75"},{"size":391,"mtime":1627389460267,"results":"100","hashOfConfig":"75"},{"size":4590,"mtime":1627929076649,"results":"101","hashOfConfig":"75"},{"size":467,"mtime":1627027430873,"results":"102","hashOfConfig":"75"},{"size":131,"mtime":1627022154493,"results":"103","hashOfConfig":"75"},{"size":83,"mtime":1627028155787,"results":"104","hashOfConfig":"75"},{"size":134,"mtime":1627028396713,"results":"105","hashOfConfig":"75"},{"size":1522,"mtime":1627911597681,"results":"106","hashOfConfig":"75"},{"size":84,"mtime":1627022005885,"results":"107","hashOfConfig":"75"},{"size":619,"mtime":1627209298039,"results":"108","hashOfConfig":"75"},{"size":717,"mtime":1627209298039,"results":"109","hashOfConfig":"75"},{"size":382,"mtime":1627297490390,"results":"110","hashOfConfig":"75"},{"size":379,"mtime":1627389470459,"results":"111","hashOfConfig":"75"},{"size":495,"mtime":1627925177037,"results":"112","hashOfConfig":"75"},{"size":380,"mtime":1627216994941,"results":"113","hashOfConfig":"75"},{"size":3800,"mtime":1629115183020,"results":"114","hashOfConfig":"75"},{"size":2945,"mtime":1627924083173,"results":"115","hashOfConfig":"75"},{"size":2432,"mtime":1627924144179,"results":"116","hashOfConfig":"75"},{"size":160,"mtime":1627243655376,"results":"117","hashOfConfig":"75"},{"size":685,"mtime":1629024016163,"results":"118","hashOfConfig":"75"},{"size":1346,"mtime":1629115043490,"results":"119","hashOfConfig":"75"},{"size":606,"mtime":1627925229167,"results":"120","hashOfConfig":"75"},{"size":1229,"mtime":1627937675503,"results":"121","hashOfConfig":"75"},{"size":606,"mtime":1627925163147,"results":"122","hashOfConfig":"75"},{"size":915,"mtime":1628018628776,"results":"123","hashOfConfig":"75"},{"size":3057,"mtime":1627924090285,"results":"124","hashOfConfig":"75"},{"size":3446,"mtime":1628021931468,"results":"125","hashOfConfig":"75"},{"size":74,"mtime":1627645846682,"results":"126","hashOfConfig":"75"},{"size":627,"mtime":1627925222947,"results":"127","hashOfConfig":"75"},{"size":1661,"mtime":1628115214134,"results":"128","hashOfConfig":"75"},{"size":507,"mtime":1627655773684,"results":"129","hashOfConfig":"75"},{"size":1117,"mtime":1627655670692,"results":"130","hashOfConfig":"75"},{"size":650,"mtime":1627924259523,"results":"131","hashOfConfig":"75"},{"size":8702,"mtime":1628110164998,"results":"132","hashOfConfig":"75"},{"size":653,"mtime":1627925183751,"results":"133","hashOfConfig":"75"},{"size":906,"mtime":1628106616785,"results":"134","hashOfConfig":"75"},{"size":1654,"mtime":1628091171609,"results":"135","hashOfConfig":"75"},{"size":2354,"mtime":1627924832529,"results":"136","hashOfConfig":"75"},{"size":10621,"mtime":1628014546598,"results":"137","hashOfConfig":"75"},{"size":608,"mtime":1627680572534,"results":"138","hashOfConfig":"75"},{"size":3506,"mtime":1628076645570,"results":"139","hashOfConfig":"75"},{"size":1605,"mtime":1629053607183,"results":"140","hashOfConfig":"75"},{"size":2089,"mtime":1628018034724,"results":"141","hashOfConfig":"75"},{"size":471,"mtime":1627923131099,"results":"142","hashOfConfig":"75"},{"size":1628,"mtime":1628106948571,"results":"143","hashOfConfig":"75"},{"size":563,"mtime":1627995531713,"results":"144","hashOfConfig":"75"},{"size":443,"mtime":1628018757040,"results":"145","hashOfConfig":"75"},{"size":618,"mtime":1628107829625,"results":"146","hashOfConfig":"75"},{"size":375,"mtime":1629023952157,"results":"147","hashOfConfig":"75"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},"9q8v7z",{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"150"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"150"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"150"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"150"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"150"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"150"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},"/home/miha/Documents/projects/js/nexomia-client/src/index.tsx",[],["301","302"],"/home/miha/Documents/projects/js/nexomia-client/src/views/App.tsx",["303"],"import {\n  Switch,\n  Route,\n  useHistory\n} from 'react-router-dom';\n\nimport { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { useStore } from 'effector-react';\nimport $AuthStore, { setToken } from '../store/AuthStore';\nimport { setUser } from '../store/UserStore';\nimport { setGuilds } from '../store/GuildStore';\nimport { cacheGuilds } from '../store/GuildCacheStore';\nimport { setContextMenu } from '../store/ContextMenuStore';\n\nimport UsersService from '../services/api/users/users.service';\nimport GuildsService from '../services/api/guilds/guilds.service';\nimport CommonRequestManager from '../services/api/common';\n\nimport SocketManager from '../services/socket/SocketManager';\n\nimport '../i18n/config';\n\nimport '../styles/App.css';\n\nimport Guilds from '../components/layout/Guilds';\nimport Sidebar from '../components/layout/Sidebar';\nimport MemberSidebar from '../components/layout/MemberSidebar';\nimport Content from '../components/layout/Content';\nimport LoadingPlaceholder from '../components/ui/LoadingPlaceholder';\nimport Modals from '../components/layout/Modals';\n\nimport preloaders from '../i18n/preloaders.json';\nimport Guild from '../store/models/Guild';\nimport ContextMenu from '../components/contextmenus/ContextMenu';\n\nfunction App() {\n  const { t } = useTranslation(['states']);\n\n  const { token } = useStore($AuthStore);\n\n  const history = useHistory();\n\n  const [loaded, setLoaded] = useState(false);\n\n  const [loaderTitleAuthor, setLoaderTitleAuthor] = useState(0);\n  const [loaderTitleId, setLoaderTitleId] = useState(0);\n\n  useEffect(() => {\n    const authorId = getRandomInt(preloaders.authors.length)\n    setLoaderTitleAuthor(authorId);\n    setLoaderTitleId(preloaders.authors[authorId].prefix + getRandomInt(preloaders.authors[authorId].count));\n\n    preloadUserInfo();\n  }, []);\n\n  return (\n    <div className=\"App dark-theme\" onClick={ closeContextMenu } onContextMenu={ (event: any) => event.preventDefault() }>\n      <LoadingPlaceholder\n        title={ t(`states:loading.${loaderTitleId.toString()}`) }\n        subtext={ `@${preloaders.authors[loaderTitleAuthor].name}` }\n        active={ !loaded }\n        solid={ true }\n      />\n      <ContextMenu />\n      <Switch>\n        <Route path={`/channels/:guildId/:channelId`}>\n          <Modals />\n          <Guilds />\n          <Sidebar />\n          <Content />\n          <MemberSidebar />\n        </Route>\n\n        <Route path={`/channels/:guildId`}>\n          <Modals />\n          <Guilds />\n          <Sidebar />\n          <Content />\n        </Route>\n\n        <Route path={`/:path/:guildId/:channelId`}>\n          <Modals />\n          <Guilds />\n          <Sidebar />\n          <Content />\n        </Route>\n\n        <Route path={`/:path/:guildId`}>\n          <Modals />\n          <Guilds />\n          <Sidebar />\n          <Content />\n        </Route>\n\n        <Route path={`/:path`}>\n          <Modals />\n          <Guilds />\n          <Sidebar />\n          <Content />\n        </Route>\n      </Switch>\n    </div>\n  );\n\n  async function preloadUserInfo() {\n    CommonRequestManager.setToken(token);\n    SocketManager.setToken(token);\n    const userInfo = await UsersService.getUser('@me');\n    if (!userInfo) {\n      setToken('');\n      history.push('/login');\n      return;\n    }\n\n    const guilds = await GuildsService.getUserGuilds();\n\n    setUser(userInfo);\n    setGuilds(guilds.map((guild: Guild) => guild.id));\n    cacheGuilds(guilds);\n\n    SocketManager.init();\n\n    SocketManager.onLoad = () => setLoaded(true);\n  }\n\n  function closeContextMenu() {\n    setContextMenu({ visible: false });\n  }\n}\n\nfunction getRandomInt(max: number): number {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nexport default App;\n\n","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Sidebar.tsx",["304","305"],"import { styled } from 'linaria/react';\nimport { css } from 'linaria';\nimport { Fragment, useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\n\nimport { useStore } from 'effector-react';\nimport $GuildCacheStore, { setGuildRoles, setGuildMembers } from '../../store/GuildCacheStore';\nimport $ChannelStore, { setGuildChannels } from '../../store/ChannelStore';\nimport $ChannelCacheStore, { cacheChannels } from '../../store/ChannelCacheStore';\nimport { cacheUsers } from '../../store/UserCacheStore';\nimport { cacheMembers } from '../../store/MemberCacheStore';\nimport { cacheRoles } from '../../store/RolesCacheStore';\nimport PermissionCalculator from '../../utils/PermissionCalculator';\nimport { ComputedPermissions } from '../../store/models/ComputedPermissions';\n\nimport { BiHash } from 'react-icons/bi';\nimport {\n  RiMessage3Fill,\n  RiUserFill\n} from 'react-icons/ri';\n\nimport SidebarHeader from './SidebarHeader';\n\nimport Channel from '../../store/models/Channel';\nimport StyledText from '../ui/StyledText';\nimport CenteredContainer from './CenteredContainer';\nimport ChannelsService from '../../services/api/channels/channels.service';\nimport Dots from '../animations/Dots';\nimport isTabGuild from '../../utils/isTabGuild';\nimport GuildsService from '../../services/api/guilds/guilds.service';\nimport RolesService from '../../services/api/roles/roles.service';\nimport Role from '../../store/models/Role';\nimport Tab from '../sidebar/Tab';\nimport $UserStore from '../../store/UserStore';\n\n\nconst SidebarContainer = styled.div`\n  display: flex;\n  width: 240px;\n  flex-shrink: 0;\n  flex-direction: column;\n  align-self: stretch;\n  background: var(--background-secondary-alt)\n`\n\nconst Content = styled.div`\n  display: flex;\n  align-self: center;\n  color: var(--text-primary);\n  font-weight: 900;\n  font-size: 18px;\n  padding: 0 16px;\n  user-select: none;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n`\n\ninterface RouteParams {\n  path: string,\n  guildId: string,\n  channelId: string\n}\n\ninterface SidebarProps {\n  type?: string\n}\n\ninterface GuildChannels {\n  [key: string]: string[]\n}\n\ninterface ChannelsCache {\n  [key: string]: Channel\n}\n\nfunction Sidebar({ type = 'channels' }: SidebarProps) {\n  const { path, guildId, channelId } = useParams<RouteParams>();\n\n  const guilds = useStore($GuildCacheStore);\n  const channels = useStore<GuildChannels>($ChannelStore);\n  const channelsCache = useStore<ChannelsCache>($ChannelCacheStore);\n  const user = useStore($UserStore);\n\n  const history = useHistory();\n\n  const [loading, setLoading] = useState(false);\n\n  const [guildChannels, setGuildChannelsValue] = useState<string[]>([]);\n\n  useEffect(() => {\n    setLoading(false);\n    if (type === 'channels') {\n      if (!isTabGuild(guildId)) return;\n      const newGuildChannels = channels[guildId] || [];\n      setGuildChannelsValue(newGuildChannels);\n      \n      if (!newGuildChannels.length && (!path || path === 'guildsettings')) {\n        loadChannels();\n      }\n    }\n  }, [guildId]);\n\n  return (\n    <SidebarContainer>\n      { !path && guildId === '@me' && type === 'channels' && (\n        <SidebarHeader>\n          <Content>Direct Messages</Content>\n        </SidebarHeader>\n      ) }\n\n      { (path === 'discover' || path === 'profiles') && type === 'channels' && (\n        <Fragment>\n          <SidebarHeader>\n            <Content>Discover</Content>\n          </SidebarHeader>\n          <Tab\n            Icon={ RiUserFill }\n            title={ 'People' }\n            tabId={ 'people' }\n            active={ path === 'profiles' }\n            onClick={ () => { history.push(`/discover/people`) } }\n          />\n        </Fragment>\n      ) }\n\n      { path === 'home' && type === 'channels' && (\n        <Fragment>\n          <SidebarHeader>\n            <Content>Home</Content>\n          </SidebarHeader>\n          <Tab\n            Icon={ RiMessage3Fill }\n            title={ 'Feed' }\n            tabId={ 'feed' }\n            onClick={ () => { history.push(`/home/feed`) } }\n          />\n          <Tab\n            Icon={ RiUserFill }\n            title={ 'Friends' }\n            tabId={ 'friends' }\n            onClick={ () => { history.push(`/home/friends`) } }\n          />\n        </Fragment>\n      ) }\n\n      { path === 'guildsettings' && type === 'channels' && (\n        <Fragment>\n          <SidebarHeader>\n            <Content>Server Settings</Content>\n          </SidebarHeader>\n          <Tab\n            title={ 'General' }\n            tabId={ 'general' }\n            onClick={ () => { history.push(`/guildsettings/${guildId}/general`) } }\n          />\n          <Tab\n            title={ 'Roles' }\n            tabId={ 'roles' }\n            onClick={ () => { history.push(`/guildsettings/${guildId}/roles`) } }\n          />\n        </Fragment>\n      ) }\n\n      { !path && isTabGuild(guildId) && type === 'channels' && (\n        <Fragment>\n          <SidebarHeader>\n            <Content>{ guilds[guildId]?.name }</Content>\n          </SidebarHeader>\n        </Fragment>\n      ) }\n\n      { !path && isTabGuild(guildId) && type === 'channels' && (guildChannels && guildChannels.length && channelsCache[guildChannels[0]] ? (\n        guildChannels.map((channel: string) => (\n          (PermissionCalculator.getUserPermissions(guildId, channel, user.id) & ComputedPermissions.VIEW_CHANNEL) && (\n            <Tab\n              Icon={ BiHash }\n              title={ channelsCache[channel]?.name || '' }\n              tabId={ channelsCache[channel]?.id }\n              key={ channelsCache[channel]?.id }\n              onClick={ () => { history.push(`/channels/${guildId}/${channel}`) } }\n            />\n          )\n        ))\n      ) : loading ? (\n        <CenteredContainer>\n          <Dots />\n        </CenteredContainer>\n      ) : (\n        <StyledText className={ css`text-align: center` }>No channels</StyledText>\n      )) }\n    </SidebarContainer>\n  );\n\n  async function loadChannels() {\n    setLoading(true);\n    const response = await ChannelsService.getGuildChannels(guildId);\n    if (!response) return history.push('/home');\n    const membersResponse = await GuildsService.getGuildMembers(guildId || '');\n    const rolesResponse = await RolesService.getGuildRoles(guildId || '');\n\n    cacheUsers([...membersResponse].map((member: any) => member.user));\n    setGuildMembers({ guild: guildId, members: [...membersResponse].map((member: any) => member.id) });\n    cacheMembers([...membersResponse].map((member: any) => {\n      delete member.user;\n      return { ...member, guild: guildId };\n    }));\n    cacheRoles(rolesResponse);\n    setGuildRoles({ guild: guildId, roles: rolesResponse.sort((a: Role, b: Role) => (a.position || 0) - (b.position || 0)).map((role: Role) => role.id) });\n    cacheChannels(response);\n    setGuildChannels({ guild: guildId, channels: response.map((channel: Channel) => channel.id) });\n    setGuildChannelsValue(response.map((channel: Channel) => channel.id));\n    setLoading(false);\n  }\n}\n\nexport default Sidebar;\n","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Content.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/layout/SidebarHeader.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/layout/ContentHeader.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Guilds.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/guilds/UserMenu.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/guilds/PanelButton.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/views/Login.tsx",["306"],"import { css } from 'linaria';\n\nimport { useState, useRef, useEffect } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\n\nimport { useTranslation } from 'react-i18next';\n\nimport { useStore } from 'effector-react';\nimport $AuthStore, { setToken, setRefreshToken } from '../store/AuthStore';\n\nimport AuthService from '../services/api/auth/auth.service';\n\nimport '../styles/App.css';\n\nimport Layer from '../components/ui/Layer';\nimport Modal from '../components/ui/Modal';\nimport ModalHeader from '../components/ui/ModalHeader';\nimport InputField from '../components/ui/InputField';\nimport FilledButton from '../components/ui/FilledButton';\nimport StyledText from '../components/ui/StyledText';\nimport LoadingPlaceholder from '../components/ui/LoadingPlaceholder';\n\nconst modalCss = css`\n  width: 440px;\n`\n\nconst negativeColorCss = css`\n  color: var(--text-negative);\n`\n\nfunction Login() {\n  const { token } = useStore($AuthStore);\n  const history = useHistory();\n\n  useEffect(() => {\n    console.log(token)\n    if (token && token !== '') {\n      history.push('/home');\n    }\n  }, []);\n\n  const { t } = useTranslation(['reg']);\n\n  const [loginLoading, setLoginLoading] = useState(false);\n  const [emailError, setEmailError] = useState(false);\n  const [passwordError, setPasswordError] = useState(false);\n  const [loginError, setLoginError] = useState(false);\n\n  const emailInput = useRef<HTMLInputElement>(null);\n  const passwordInput = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    console.log(emailInput);\n  }, []);\n\n  return (\n    <div className=\"Login dark-theme\">\n      <Layer>\n        <Modal className={ modalCss }>\n          <LoadingPlaceholder title={ t('reg:logging_in') } active={ loginLoading } />\n          <ModalHeader>{ t('reg:log_in') }<br /><StyledText>{ t('reg:welcomer_log_in') }</StyledText></ModalHeader>\n          <InputField placeholder=\"Email\" ref={ emailInput } />\n          { (emailError && <StyledText className={ negativeColorCss }>{ t('reg:errors.required_field') }</StyledText>) }\n          <InputField placeholder={ t('reg:fields.password') } type=\"password\" hidden={ true } ref={ passwordInput } />\n          { (passwordError && <StyledText className={ negativeColorCss }>{ t('reg:errors.required_field') }</StyledText>) }\n          { (loginError && <StyledText className={ negativeColorCss }>{ t('reg:errors.invalid_credentials') }</StyledText>) }\n          <StyledText>{ t('reg:no_account') } <Link to=\"/register\">{ t('reg:register') }</Link></StyledText>\n          <FilledButton onClick={ login }>{ t('reg:continue') }</FilledButton>\n        </Modal>\n      </Layer>\n    </div>\n  );\n\n  async function login() {\n    setLoginError(false);\n    setEmailError(!emailInput.current?.value);\n    setPasswordError(!passwordInput.current?.value);\n\n    if (!emailInput.current?.value || !passwordInput.current?.value) return;\n\n    setLoginLoading(true);\n\n    const response = await AuthService.login(emailInput.current?.value, passwordInput.current?.value);\n\n    setLoginLoading(false);\n\n    if (!response) {\n      setLoginError(true);\n      return;\n    }\n\n    setToken(response.access_token);\n    setRefreshToken(response.refresh_token);\n\n    history.push('/home');\n  }\n}\n\nexport default Login;\n","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/Layer.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/ui/Modal.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/ui/ModalHeader.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/ui/InputField.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/ui/FilledButton.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/ui/StyledText.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/views/Register.tsx",["307"],"import { css } from 'linaria';\n\nimport { useState, Fragment, useRef, useEffect } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\n\nimport { useTranslation } from 'react-i18next';\n\nimport { useStore } from 'effector-react';\nimport $AuthStore from '../store/AuthStore';\n\nimport AuthService from '../services/api/auth/auth.service';\n\nimport '../styles/App.css';\n\nimport Layer from '../components/ui/Layer';\nimport Modal from '../components/ui/Modal';\nimport ModalHeader from '../components/ui/ModalHeader';\nimport InputField from '../components/ui/InputField';\nimport FilledButton from '../components/ui/FilledButton';\nimport StyledText from '../components/ui/StyledText';\nimport LoadingPlaceholder from '../components/ui/LoadingPlaceholder';\n\nconst modalCss = css`\n  width: 440px\n`\n\nconst negativeColorCss = css`\n  color: var(--text-negative);\n`\n\nfunction Register() {\n  const { token } = useStore($AuthStore);\n  const history = useHistory();\n\n  useEffect(() => {\n    if (token) {\n      history.push('/channels/@me');\n    }\n  }, []);\n\n  const { t } = useTranslation(['reg']);\n\n  const [registerLoading, setRegisterLoading] = useState(false);\n  const [registerState, setRegisterState] = useState(0);\n  const [placeholderText] = useState(0);\n  const [emailError, setEmailError] = useState(false);\n  const [usernameError, setUsernameError] = useState(false);\n  const [passwordError, setPasswordError] = useState(false);\n\n  const emailInput = useRef<HTMLInputElement>(null);\n  const usernameInput = useRef<HTMLInputElement>(null);\n  const passwordInput = useRef<HTMLInputElement>(null);\n\n  return (\n    <div className=\"Login dark-theme\">\n      <Layer>\n        <Modal className={ modalCss }>\n          <LoadingPlaceholder title={ (placeholderText === 0 && 'Creating your account...') || 'Almost there...' } active={ registerLoading } />\n\n          { registerState === 0 && (\n            <Fragment>\n              <ModalHeader>{ t('reg:register') }<br /><StyledText>{ t('reg:welcomer_register') }</StyledText></ModalHeader>\n              <InputField placeholder=\"Email\" ref={ emailInput } />\n              { (emailError && <StyledText className={ negativeColorCss }>{ t('reg:errors.required_field') }</StyledText>) }\n              <InputField placeholder={ t('reg:fields.username') } ref={ usernameInput } />\n              { (usernameError && <StyledText className={ negativeColorCss }>{ t('reg:errors.required_field') }</StyledText>) }\n              <InputField placeholder={ t('reg:fields.password') } type=\"password\" ref={ passwordInput } hidden={ true } />\n              { (passwordError && <StyledText className={ negativeColorCss }>{ t('reg:errors.required_field') }</StyledText>) }\n              <StyledText>{ t('reg:has_account') } <Link to=\"/login\">{ t('reg:log_in') }</Link></StyledText>\n              <FilledButton onClick={ register }>{ t('reg:continue') }</FilledButton>\n            </Fragment>\n          ) }\n\n          { registerState === 1 && (\n            <Fragment>\n              <ModalHeader>{ t('reg:account_created') }<br /><StyledText>{ t('reg:account_log_in') }</StyledText></ModalHeader>\n              <FilledButton onClick={ login }>{ t('reg:continue') }</FilledButton>\n            </Fragment>\n          ) }\n        </Modal>\n      </Layer>\n    </div>\n  );\n\n  async function register() {\n    setEmailError(!emailInput.current?.value);\n    setUsernameError(!usernameInput.current?.value);\n    setPasswordError(!passwordInput.current?.value);\n\n    if (!emailInput.current?.value || !usernameInput.current?.value || !passwordInput.current?.value) return;\n\n    setRegisterLoading(true);\n\n    const response = await AuthService.register(\n      emailInput.current?.value,\n      usernameInput.current?.value,\n      passwordInput.current?.value\n    );\n\n    if (!response) return;\n\n    setRegisterLoading(false);\n    setRegisterState(1);\n  }\n\n  function login() {\n    history.push('/login');\n  }\n}\n\nexport default Register;\n","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/LoadingPlaceholder.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/animations/Dots.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/i18n/config.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/services/api/auth/auth.service.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/services/api/common.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/config.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/services/api/users/users.service.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/services/api/guilds/guilds.service.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Modals.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/modals/ServerCreationModal.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/ui/BigPageButton.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/css/PanelIconCss.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/css/LayerBackgroundShadeCss.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/css/InactiveLayerCss.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/sidebar/Tab.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/css/StyledIconCss.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/UserStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/AuthStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/GuildStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/ModalStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/ChannelStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/services/api/channels/channels.service.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/chat/ChatView.tsx",["308","309","310","311","312","313"],"/home/miha/Documents/projects/js/nexomia-client/src/components/chat/ChatInput.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/chat/MessageView.tsx",["314"],"import { Fragment, useEffect, useState } from 'react';\nimport { css } from 'linaria';\nimport Dots from '../animations/Dots';\nimport CenteredContainer from '../layout/CenteredContainer';\nimport MessageRenderer from './MessageRenderer';\n\nimport { useStore } from 'effector-react';\nimport $MessageStore, { setChannelMessages } from '../../store/MessageStore';\nimport $ChannelCacheStore from '../../store/ChannelCacheStore';\nimport $MessageCacheStore, { cacheMessages } from '../../store/MessageCacheStore';\nimport MessagesService from '../../services/api/messages/messages.service';\nimport Message from '../../store/models/Message';\n\ninterface MessageViewProps {\n  channel: string,\n  onMessagesLoaded: any\n}\n\nfunction MessageView({ channel, onMessagesLoaded }: MessageViewProps) {\n  const [loading, setLoading] = useState(false);\n  const MessageStore = useStore($MessageStore);\n  const MessageCacheStore = useStore($MessageCacheStore);\n  const CachedChannels = useStore($ChannelCacheStore);\n\n  let prevMessage = '';\n\n  useEffect(() => {\n    if (!MessageStore[channel] || !MessageStore[channel].length) setLoading(true);\n    if ((!MessageStore[channel] || !MessageStore[channel].length) && CachedChannels[channel]) {\n      loadMessages();\n      return;\n    }\n  }, [channel, CachedChannels]);\n\n  return (\n    <Fragment>\n      { loading ? (\n        <CenteredContainer className={ css`margin-bottom: 64px` }>\n          <Dots />\n        </CenteredContainer>\n      ) : (\n        (\n          MessageStore[channel] && (MessageStore[channel].length && MessageStore[channel].length !== 0) && (\n            MessageStore[channel].map((message) => {\n              const rendered =  (\n                <MessageRenderer\n                  id={ message }\n                  key={ message }\n                  grouped={ MessageCacheStore[prevMessage]?.author === MessageCacheStore[message]?.author }\n                  channel={ channel }\n                />\n              );\n\n              prevMessage = message;\n              return rendered;\n            })\n          )\n        ) || ''\n      ) }\n    </Fragment>\n  )\n\n  async function loadMessages() {\n    const response = await MessagesService.getChannelMessages(channel);\n    if (!response) return;\n    cacheMessages(response);\n    setChannelMessages({ channel, messages: response.map((message: Message) => message.id) });\n    setLoading(false);\n    onMessagesLoaded();\n  }\n}\n\nexport default MessageView;\n","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/CenteredContainer.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/services/api/messages/messages.service.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/MessageStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/MessageCacheStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/GuildCacheStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/ChannelCacheStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/UserCacheStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/chat/MessageRenderer.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/profile/ProfileView.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/utils/isTabGuild.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/MemberCacheStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/contextmenus/ContextMenu.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/ContextMenuStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/contextmenus/ContextTab.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/settings/SettingsView.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/settings/guild/RolesView.tsx",["315","316","317"],"import classNames from 'classnames';\nimport { useStore } from 'effector-react';\nimport { css } from 'linaria';\nimport { styled } from 'linaria/react';\nimport { ChangeEvent, Fragment, useEffect, useState } from 'react';\nimport { RiArrowLeftLine, RiArrowRightSLine } from 'react-icons/ri';\nimport { useParams } from 'react-router-dom';\nimport { List, arrayMove } from 'react-movable';\nimport RolesService from '../../../services/api/roles/roles.service';\nimport $GuildCacheStore, { setGuildRoles } from '../../../store/GuildCacheStore';\nimport PermissionOverwrites from '../../../store/models/PermissionOverwrites';\nimport $RoleCacheStore, { cacheRoles, updateRole } from '../../../store/RolesCacheStore';\nimport StyledIconCss from '../../css/StyledIconCss';\nimport InputField from '../../ui/InputField';\nimport LoadingPlaceholder from '../../ui/LoadingPlaceholder';\nimport StyledText from '../../ui/StyledText';\nimport PermissionEditor from '../ui/PermissionEditor';\nimport Role from '../ui/Role';\nimport PermissionCalculator from '../../../utils/PermissionCalculator';\nimport { ComputedPermissions } from '../../../store/models/ComputedPermissions';\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  padding: 14px;\n  cursor: pointer;\n  border-radius: 4px;\n  flex-grow: 1;\n  flex-direction: row;\n  margin: 16px 0;\n\n  &:hover {\n    background: var(--background-light);\n  }\n`\n\nconst IconCss = css`\n  width: 20px;\n  height: 20px;\n  margin-right: 14px;\n`\n\nconst ColorDot = styled.div`\n  width: 16px;\n  height: 16px;\n  border-radius: 50%;\n  margin-right: 16px;\n`\n\nconst Container = styled.div`\n  padding: 16px;\n  border-radius: 4px;\n  background: var(--background-secondary-alt);\n  margin-bottom: 4px;\n  display: flex;\n  flex-grow: 1;\n  flex-direction: row;\n  align-items: center;\n\n  &:hover {\n    cursor: pointer;\n    background: var(--background-secondary);\n  }\n`\n\nconst Splitter = styled.div`\n  flex-grow: 1;\n`\n\nconst DefaultIconCss = css`\n  padding: 2px 4px;\n  border-radius: 2px;\n  background: var(--accent);\n  margin: 0;\n  font-size: 14px;\n`\n\nconst RoleIconCss = css`\n  width: 20px;\n  height: 20px;\n  margin-left: 16px;\n`\n\ninterface RouteParams {\n  guildId: string\n}\n\nfunction RolesView() {\n  const { guildId } = useParams<RouteParams>();\n  const GuildsCache = useStore($GuildCacheStore);\n  const RolesCache = useStore($RoleCacheStore);\n\n  const [roleList, setRoleList] = useState<string[]>([]);\n  \n  useEffect(() => {\n    setRoleList([ ...(GuildsCache[guildId]?.roles || []) ]);\n    setCanMove(\n      !!(\n        PermissionCalculator.getUserPermissions(guildId, '', '')\n        & (ComputedPermissions.MANAGE_ROLES | ComputedPermissions.ADMINISTRATOR)\n      )\n    );\n  }, []);\n\n  useEffect(() => {\n    setRoleList([ ...(GuildsCache[guildId]?.roles || []) ]);\n  }, [GuildsCache]);\n\n  const [canMove, setCanMove] = useState(false);\n\n  const [roleSelected, setRoleSelected] = useState('');\n  const [editedPermissions, setEditedPermissions] = useState<PermissionOverwrites>({ allow: 0, deny: 0 });\n  const [permissionsWasEdited, setPermissionsWasEdited] = useState(false);\n  const [saveLoading, setSaveLoading] = useState(false);\n\n  const [roleName, setRoleName] = useState('');\n  const [roleColor, setRoleColor] = useState('');\n\n  return (\n    <Fragment>\n      <LoadingPlaceholder title=\"Saving Changes...\" active={ saveLoading } />\n      { !roleSelected ? (\n        <Fragment>\n          <StyledText className={ css`text-align: center; margin: 32px 0` }>\n            Roles help you organize your server and configure permissions for your members.\n            <br />Role permissions are calculated from lowest (default) to highest role.\n          </StyledText>\n          { \n            <List\n              lockVertically\n              values={ roleList }\n              onChange={ \n                ({ oldIndex, newIndex }) => {\n                  const updatedRoleList = arrayMove(roleList, oldIndex, newIndex);\n                  updateRolePosition(newIndex, updatedRoleList);\n                  setRoleList(updatedRoleList);\n                }\n              }\n              renderList={ ({ children, props }) => <div { ...props }>{ children }</div> }\n              renderItem={ ({ value, props }) =>\n                <Container { ...props } onClick={ () => selectRole(value) }>\n                  <ColorDot\n                    style={{ background: RolesCache[value].color || 'var(--text-primary)' }}\n                  >\n                    <div data-movable-handle style={{ \n                      width: canMove && !RolesCache[value].default ? '100%' : '0px',\n                      height: canMove && !RolesCache[value].default ? '100%' : '0px',\n                      cursor: 'grab'\n                    }} />\n                  </ColorDot>\n                  <StyledText className={ css`margin: 0; font-weight: 900` }>{ RolesCache[value].name }</StyledText>\n                  <Splitter />\n                  { RolesCache[value].default && (<StyledText className={ DefaultIconCss }>DEFAULT</StyledText>) }\n                  <RiArrowRightSLine className={ classNames({ [StyledIconCss]: true, [RoleIconCss]: true }) } />\n                </Container>\n              }\n            />\n          }\n        </Fragment>\n      ) : (\n        <Fragment>\n          <ButtonContainer onClick={ () => goBack() }>\n            <RiArrowLeftLine className={ classNames({ [IconCss]: true, [StyledIconCss]: true }) } />\n            <StyledText className={ css`margin: 0; font-weight: 900` }>\n              { !permissionsWasEdited ? 'Back' : 'Save & Go Back' }\n            </StyledText>\n          </ButtonContainer>\n          <Role\n            name={ roleName }\n            color={ roleColor || 'var(--background-light)' }\n            defaultRole={ RolesCache[roleSelected].default === true }\n            active={ true }\n          />\n          <StyledText className={ css`text-align: center; margin: 48px 0 24px 0; font-size: 22px; font-weight: 900` }>\n            Appearance\n          </StyledText>\n          <StyledText className={ css`text-align: left; margin: 4px; font-size: 14px; font-weight: 900` }>\n            Role Name\n          </StyledText>\n          <InputField\n            className={ css`margin-top: 2px; margin-bottom: 16px` }\n            defaultValue={ RolesCache[roleSelected].name }\n            onChange={ (event: ChangeEvent<HTMLInputElement>) => { setRoleName(event.target.value); setPermissionsWasEdited(true) } }\n          />\n          <StyledText className={ css`text-align: left; margin: 4px; font-size: 14px; font-weight: 900` }>\n            Role Color\n          </StyledText>\n          <InputField\n            className={ css`margin-top: 2px; margin-bottom: 16px` }\n            defaultValue={ RolesCache[roleSelected].color }\n            onChange={ (event: ChangeEvent<HTMLInputElement>) => { setRoleColor(event.target.value); setPermissionsWasEdited(true) } }\n          />\n          <StyledText className={ css`text-align: center; margin: 48px 0 24px 0; font-size: 22px; font-weight: 900` }>\n            Permissions\n          </StyledText>\n          <StyledText className={ css`text-align: center; margin: 0 0 24px 0` }>\n            Configure permissions carefully, forcing a lot of permissions to \"allowed\" state is a bad practice, though you are not restricted from doing this. Higher roles will inherit all permissions from this role and apply their overwrites to them.\n          </StyledText>\n          \n          <PermissionEditor\n            initialPermissions={ RolesCache[roleSelected].permissions }\n            inherit={ !RolesCache[roleSelected].default }\n            onChange={ permissionsEdited }\n          />\n        </Fragment>\n      ) }\n    </Fragment>\n  )\n\n  function permissionsEdited(permissions: PermissionOverwrites) {\n    setEditedPermissions(permissions);\n    setPermissionsWasEdited(true);\n  }\n\n  function selectRole(role: string) {\n    setRoleName(RolesCache[role].name);\n    setRoleColor(RolesCache[role].color || '');\n    setRoleSelected(role);\n  }\n\n  async function goBack() {\n    if (permissionsWasEdited) {\n      setSaveLoading(true);\n\n      const response = await RolesService.patchRole(guildId, roleSelected, {\n        name: roleName,\n        color: roleColor,\n        permissions: editedPermissions\n      });\n\n      if (response) {\n        updateRole({ role: roleSelected, patch: response });\n      }\n\n      setSaveLoading(false);\n    }\n\n    setPermissionsWasEdited(false);\n    setRoleSelected('');\n  }\n\n  async function updateRolePosition(index: number, updatedRoleList: string[]) {\n    setGuildRoles({ guild: guildId, roles: updatedRoleList });\n    await RolesService.patchRole(guildId, updatedRoleList[index], { position: index + 1 });\n  }\n}\n\nexport default RolesView;\n","/home/miha/Documents/projects/js/nexomia-client/src/services/api/roles/roles.service.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/RolesCacheStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/settings/ui/Role.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/settings/ui/Permission.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/settings/ui/PermissionEditor.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/models/ComputedPermissions.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/layout/MemberSidebar.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/utils/PermissionCalculator.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/sidebar/Member.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/utils/getMemberColor.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/services/socket/SocketManager.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/services/socket/events/Messages.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/services/socket/events/Users.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/services/socket/events/Roles.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/utils/getUrlEncodedString.ts",[],{"ruleId":"318","replacedBy":"319"},{"ruleId":"320","replacedBy":"321"},{"ruleId":"322","severity":1,"message":"323","line":56,"column":6,"nodeType":"324","endLine":56,"endColumn":8,"suggestions":"325"},{"ruleId":"326","severity":1,"message":"327","line":78,"column":26,"nodeType":"328","messageId":"329","endLine":78,"endColumn":35},{"ruleId":"322","severity":1,"message":"330","line":102,"column":6,"nodeType":"324","endLine":102,"endColumn":15,"suggestions":"331"},{"ruleId":"322","severity":1,"message":"332","line":40,"column":6,"nodeType":"324","endLine":40,"endColumn":8,"suggestions":"333"},{"ruleId":"322","severity":1,"message":"332","line":39,"column":6,"nodeType":"324","endLine":39,"endColumn":8,"suggestions":"334"},{"ruleId":"326","severity":1,"message":"335","line":62,"column":10,"nodeType":"328","messageId":"329","endLine":62,"endColumn":19},{"ruleId":"326","severity":1,"message":"336","line":63,"column":10,"nodeType":"328","messageId":"329","endLine":63,"endColumn":16},{"ruleId":"326","severity":1,"message":"337","line":63,"column":18,"nodeType":"328","messageId":"329","endLine":63,"endColumn":27},{"ruleId":"322","severity":1,"message":"338","line":67,"column":6,"nodeType":"324","endLine":67,"endColumn":13,"suggestions":"339"},{"ruleId":"322","severity":1,"message":"340","line":75,"column":6,"nodeType":"324","endLine":75,"endColumn":34,"suggestions":"341"},{"ruleId":"322","severity":1,"message":"342","line":75,"column":16,"nodeType":"343","endLine":75,"endColumn":33},{"ruleId":"322","severity":1,"message":"344","line":33,"column":6,"nodeType":"324","endLine":33,"endColumn":31,"suggestions":"345"},{"ruleId":"326","severity":1,"message":"346","line":12,"column":27,"nodeType":"328","messageId":"329","endLine":12,"endColumn":37},{"ruleId":"322","severity":1,"message":"347","line":102,"column":6,"nodeType":"324","endLine":102,"endColumn":8,"suggestions":"348"},{"ruleId":"322","severity":1,"message":"349","line":106,"column":6,"nodeType":"324","endLine":106,"endColumn":19,"suggestions":"350"},"no-native-reassign",["351"],"no-negated-in-lhs",["352"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'preloadUserInfo'. Either include it or remove the dependency array.","ArrayExpression",["353"],"@typescript-eslint/no-unused-vars","'channelId' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'channels', 'loadChannels', 'path', and 'type'. Either include them or remove the dependency array.",["354"],"React Hook useEffect has missing dependencies: 'history' and 'token'. Either include them or remove the dependency array.",["355"],["356"],"'oldHeight' is assigned a value but never used.","'oldTop' is assigned a value but never used.","'setOldTop' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getSendPermission'. Either include it or remove the dependency array.",["357"],"React Hook useEffect has missing dependencies: 'loading' and 'scrollView'. Either include them or remove the dependency array.",["358"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","MemberExpression","React Hook useEffect has missing dependencies: 'MessageStore' and 'loadMessages'. Either include them or remove the dependency array.",["359"],"'cacheRoles' is defined but never used.","React Hook useEffect has missing dependencies: 'GuildsCache' and 'guildId'. Either include them or remove the dependency array.",["360"],"React Hook useEffect has a missing dependency: 'guildId'. Either include it or remove the dependency array.",["361"],"no-global-assign","no-unsafe-negation",{"desc":"362","fix":"363"},{"desc":"364","fix":"365"},{"desc":"366","fix":"367"},{"desc":"366","fix":"368"},{"desc":"369","fix":"370"},{"desc":"371","fix":"372"},{"desc":"373","fix":"374"},{"desc":"375","fix":"376"},{"desc":"375","fix":"377"},"Update the dependencies array to be: [preloadUserInfo]",{"range":"378","text":"379"},"Update the dependencies array to be: [channels, guildId, loadChannels, path, type]",{"range":"380","text":"381"},"Update the dependencies array to be: [history, token]",{"range":"382","text":"383"},{"range":"384","text":"383"},"Update the dependencies array to be: [Roles, getSendPermission]",{"range":"385","text":"386"},"Update the dependencies array to be: [channel, loading, scrollView]",{"range":"387","text":"388"},"Update the dependencies array to be: [channel, CachedChannels, MessageStore, loadMessages]",{"range":"389","text":"390"},"Update the dependencies array to be: [GuildsCache, guildId]",{"range":"391","text":"392"},{"range":"393","text":"392"},[1850,1852],"[preloadUserInfo]",[3039,3048],"[channels, guildId, loadChannels, path, type]",[1095,1097],"[history, token]",[1045,1047],[1957,1964],"[Roles, getSendPermission]",[2076,2104],"[channel, loading, scrollView]",[1260,1285],"[channel, CachedChannels, MessageStore, loadMessages]",[2678,2680],"[GuildsCache, guildId]",[2770,2783]]