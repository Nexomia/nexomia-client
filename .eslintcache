[{"/home/miha/Documents/projects/js/nexomia-client/src/index.tsx":"1","/home/miha/Documents/projects/js/nexomia-client/src/views/App.tsx":"2","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Sidebar.tsx":"3","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Content.tsx":"4","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/SidebarHeader.tsx":"5","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/ContentHeader.tsx":"6","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Guilds.tsx":"7","/home/miha/Documents/projects/js/nexomia-client/src/components/guilds/UserMenu.tsx":"8","/home/miha/Documents/projects/js/nexomia-client/src/components/guilds/PanelButton.tsx":"9","/home/miha/Documents/projects/js/nexomia-client/src/views/Login.tsx":"10","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/Layer.tsx":"11","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/Modal.tsx":"12","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/ModalHeader.tsx":"13","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/InputField.tsx":"14","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/FilledButton.tsx":"15","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/StyledText.tsx":"16","/home/miha/Documents/projects/js/nexomia-client/src/views/Register.tsx":"17","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/LoadingPlaceholder.tsx":"18","/home/miha/Documents/projects/js/nexomia-client/src/components/animations/Dots.tsx":"19","/home/miha/Documents/projects/js/nexomia-client/src/i18n/config.ts":"20","/home/miha/Documents/projects/js/nexomia-client/src/services/api/auth/auth.service.ts":"21","/home/miha/Documents/projects/js/nexomia-client/src/services/api/common.ts":"22","/home/miha/Documents/projects/js/nexomia-client/src/config.ts":"23","/home/miha/Documents/projects/js/nexomia-client/src/services/api/users/users.service.ts":"24","/home/miha/Documents/projects/js/nexomia-client/src/services/api/guilds/guilds.service.ts":"25","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Modals.tsx":"26","/home/miha/Documents/projects/js/nexomia-client/src/components/modals/ServerCreationModal.tsx":"27","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/BigPageButton.tsx":"28","/home/miha/Documents/projects/js/nexomia-client/src/components/css/PanelIconCss.tsx":"29","/home/miha/Documents/projects/js/nexomia-client/src/components/css/LayerBackgroundShadeCss.tsx":"30","/home/miha/Documents/projects/js/nexomia-client/src/components/css/InactiveLayerCss.tsx":"31","/home/miha/Documents/projects/js/nexomia-client/src/components/sidebar/Tab.tsx":"32","/home/miha/Documents/projects/js/nexomia-client/src/components/css/StyledIconCss.tsx":"33","/home/miha/Documents/projects/js/nexomia-client/src/store/UserStore.tsx":"34","/home/miha/Documents/projects/js/nexomia-client/src/store/AuthStore.tsx":"35","/home/miha/Documents/projects/js/nexomia-client/src/store/GuildStore.tsx":"36","/home/miha/Documents/projects/js/nexomia-client/src/store/ModalStore.tsx":"37","/home/miha/Documents/projects/js/nexomia-client/src/store/ChannelStore.tsx":"38","/home/miha/Documents/projects/js/nexomia-client/src/services/api/channels/channels.service.ts":"39","/home/miha/Documents/projects/js/nexomia-client/src/components/chat/ChatView.tsx":"40","/home/miha/Documents/projects/js/nexomia-client/src/components/chat/ChatInput.tsx":"41","/home/miha/Documents/projects/js/nexomia-client/src/components/chat/MessageView.tsx":"42","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/CenteredContainer.tsx":"43","/home/miha/Documents/projects/js/nexomia-client/src/services/api/messages/messages.service.ts":"44","/home/miha/Documents/projects/js/nexomia-client/src/store/MessageStore.tsx":"45","/home/miha/Documents/projects/js/nexomia-client/src/store/MessageCacheStore.tsx":"46","/home/miha/Documents/projects/js/nexomia-client/src/store/GuildCacheStore.tsx":"47","/home/miha/Documents/projects/js/nexomia-client/src/store/ChannelCacheStore.tsx":"48","/home/miha/Documents/projects/js/nexomia-client/src/store/UserCacheStore.tsx":"49","/home/miha/Documents/projects/js/nexomia-client/src/components/chat/MessageRenderer.tsx":"50","/home/miha/Documents/projects/js/nexomia-client/src/components/profile/ProfileView.tsx":"51","/home/miha/Documents/projects/js/nexomia-client/src/utils/isTabGuild.ts":"52","/home/miha/Documents/projects/js/nexomia-client/src/store/MemberCacheStore.tsx":"53","/home/miha/Documents/projects/js/nexomia-client/src/components/contextmenus/ContextMenu.tsx":"54","/home/miha/Documents/projects/js/nexomia-client/src/store/ContextMenuStore.tsx":"55","/home/miha/Documents/projects/js/nexomia-client/src/components/contextmenus/ContextTab.tsx":"56","/home/miha/Documents/projects/js/nexomia-client/src/components/settings/SettingsView.tsx":"57","/home/miha/Documents/projects/js/nexomia-client/src/components/settings/guild/RolesView.tsx":"58","/home/miha/Documents/projects/js/nexomia-client/src/services/api/roles/roles.service.ts":"59","/home/miha/Documents/projects/js/nexomia-client/src/store/RolesCacheStore.tsx":"60","/home/miha/Documents/projects/js/nexomia-client/src/components/settings/ui/Role.tsx":"61","/home/miha/Documents/projects/js/nexomia-client/src/components/settings/ui/Permission.tsx":"62","/home/miha/Documents/projects/js/nexomia-client/src/components/settings/ui/PermissionEditor.tsx":"63","/home/miha/Documents/projects/js/nexomia-client/src/store/models/ComputedPermissions.ts":"64","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/MemberSidebar.tsx":"65","/home/miha/Documents/projects/js/nexomia-client/src/utils/PermissionCalculator.ts":"66","/home/miha/Documents/projects/js/nexomia-client/src/components/sidebar/Member.tsx":"67","/home/miha/Documents/projects/js/nexomia-client/src/utils/getMemberColor.ts":"68","/home/miha/Documents/projects/js/nexomia-client/src/services/socket/SocketManager.ts":"69","/home/miha/Documents/projects/js/nexomia-client/src/services/socket/events/Messages.ts":"70","/home/miha/Documents/projects/js/nexomia-client/src/services/socket/events/Users.ts":"71","/home/miha/Documents/projects/js/nexomia-client/src/services/socket/events/Roles.ts":"72","/home/miha/Documents/projects/js/nexomia-client/src/utils/getUrlEncodedString.ts":"73","/home/miha/Documents/projects/js/nexomia-client/src/utils/getIconString.ts":"74","/home/miha/Documents/projects/js/nexomia-client/src/components/settings/guild/GeneralView.tsx":"75","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/DropdownInput.tsx":"76","/home/miha/Documents/projects/js/nexomia-client/src/components/modals/ChannelCreationModal.tsx":"77","/home/miha/Documents/projects/js/nexomia-client/src/services/socket/events/Channels.ts":"78","/home/miha/Documents/projects/js/nexomia-client/src/components/chat/InputButton.tsx":"79","/home/miha/Documents/projects/js/nexomia-client/src/components/chat/PinnedMessagesView.tsx":"80","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/PopoutHeader.tsx":"81"},{"size":745,"mtime":1627597352775,"results":"82","hashOfConfig":"83"},{"size":3936,"mtime":1629741039446,"results":"84","hashOfConfig":"83"},{"size":8884,"mtime":1629458319757,"results":"85","hashOfConfig":"83"},{"size":1859,"mtime":1629327163377,"results":"86","hashOfConfig":"83"},{"size":163,"mtime":1627018358125,"results":"87","hashOfConfig":"83"},{"size":2972,"mtime":1629750580072,"results":"88","hashOfConfig":"83"},{"size":2928,"mtime":1629457556165,"results":"89","hashOfConfig":"83"},{"size":2827,"mtime":1629124778477,"results":"90","hashOfConfig":"83"},{"size":448,"mtime":1627680724782,"results":"91","hashOfConfig":"83"},{"size":3217,"mtime":1629405132935,"results":"92","hashOfConfig":"83"},{"size":276,"mtime":1627682556678,"results":"93","hashOfConfig":"83"},{"size":308,"mtime":1627028022731,"results":"94","hashOfConfig":"83"},{"size":277,"mtime":1629751531616,"results":"95","hashOfConfig":"83"},{"size":769,"mtime":1627227991041,"results":"96","hashOfConfig":"83"},{"size":462,"mtime":1627227809580,"results":"97","hashOfConfig":"83"},{"size":252,"mtime":1627214753219,"results":"98","hashOfConfig":"83"},{"size":3909,"mtime":1629405626599,"results":"99","hashOfConfig":"83"},{"size":1570,"mtime":1627909372419,"results":"100","hashOfConfig":"83"},{"size":616,"mtime":1626934226635,"results":"101","hashOfConfig":"83"},{"size":986,"mtime":1629412439127,"results":"102","hashOfConfig":"83"},{"size":688,"mtime":1626955086129,"results":"103","hashOfConfig":"83"},{"size":1366,"mtime":1629024075137,"results":"104","hashOfConfig":"83"},{"size":146,"mtime":1627989350183,"results":"105","hashOfConfig":"83"},{"size":349,"mtime":1627295837712,"results":"106","hashOfConfig":"83"},{"size":1792,"mtime":1629294736912,"results":"107","hashOfConfig":"83"},{"size":523,"mtime":1629293443828,"results":"108","hashOfConfig":"83"},{"size":4813,"mtime":1629409441167,"results":"109","hashOfConfig":"83"},{"size":467,"mtime":1627027430873,"results":"110","hashOfConfig":"83"},{"size":131,"mtime":1627022154493,"results":"111","hashOfConfig":"83"},{"size":83,"mtime":1627028155787,"results":"112","hashOfConfig":"83"},{"size":134,"mtime":1627028396713,"results":"113","hashOfConfig":"83"},{"size":1522,"mtime":1627911597681,"results":"114","hashOfConfig":"83"},{"size":84,"mtime":1627022005885,"results":"115","hashOfConfig":"83"},{"size":619,"mtime":1627209298039,"results":"116","hashOfConfig":"83"},{"size":717,"mtime":1627209298039,"results":"117","hashOfConfig":"83"},{"size":382,"mtime":1627297490390,"results":"118","hashOfConfig":"83"},{"size":432,"mtime":1629293477676,"results":"119","hashOfConfig":"83"},{"size":495,"mtime":1627925177037,"results":"120","hashOfConfig":"83"},{"size":380,"mtime":1627216994941,"results":"121","hashOfConfig":"83"},{"size":3800,"mtime":1629302818354,"results":"122","hashOfConfig":"83"},{"size":2729,"mtime":1629409529273,"results":"123","hashOfConfig":"83"},{"size":3143,"mtime":1629750810424,"results":"124","hashOfConfig":"83"},{"size":160,"mtime":1627243655376,"results":"125","hashOfConfig":"83"},{"size":1466,"mtime":1629750134104,"results":"126","hashOfConfig":"83"},{"size":1701,"mtime":1629303102526,"results":"127","hashOfConfig":"83"},{"size":789,"mtime":1629301890372,"results":"128","hashOfConfig":"83"},{"size":1229,"mtime":1627937675503,"results":"129","hashOfConfig":"83"},{"size":606,"mtime":1627925163147,"results":"130","hashOfConfig":"83"},{"size":915,"mtime":1628018628776,"results":"131","hashOfConfig":"83"},{"size":4982,"mtime":1629409527109,"results":"132","hashOfConfig":"83"},{"size":4046,"mtime":1629409387919,"results":"133","hashOfConfig":"83"},{"size":74,"mtime":1627645846682,"results":"134","hashOfConfig":"83"},{"size":627,"mtime":1627925222947,"results":"135","hashOfConfig":"83"},{"size":3775,"mtime":1629409519717,"results":"136","hashOfConfig":"83"},{"size":507,"mtime":1627655773684,"results":"137","hashOfConfig":"83"},{"size":1117,"mtime":1627655670692,"results":"138","hashOfConfig":"83"},{"size":775,"mtime":1629130963831,"results":"139","hashOfConfig":"83"},{"size":8610,"mtime":1629409302391,"results":"140","hashOfConfig":"83"},{"size":653,"mtime":1627925183751,"results":"141","hashOfConfig":"83"},{"size":906,"mtime":1628106616785,"results":"142","hashOfConfig":"83"},{"size":1776,"mtime":1629409319435,"results":"143","hashOfConfig":"83"},{"size":2354,"mtime":1627924832529,"results":"144","hashOfConfig":"83"},{"size":11467,"mtime":1629409205011,"results":"145","hashOfConfig":"83"},{"size":638,"mtime":1629293832306,"results":"146","hashOfConfig":"83"},{"size":3666,"mtime":1629414418271,"results":"147","hashOfConfig":"83"},{"size":1605,"mtime":1629293906328,"results":"148","hashOfConfig":"83"},{"size":2712,"mtime":1629117671000,"results":"149","hashOfConfig":"83"},{"size":473,"mtime":1629295098936,"results":"150","hashOfConfig":"83"},{"size":1882,"mtime":1629302067652,"results":"151","hashOfConfig":"83"},{"size":921,"mtime":1629303123808,"results":"152","hashOfConfig":"83"},{"size":443,"mtime":1628018757040,"results":"153","hashOfConfig":"83"},{"size":618,"mtime":1628107829625,"results":"154","hashOfConfig":"83"},{"size":375,"mtime":1629023952157,"results":"155","hashOfConfig":"83"},{"size":247,"mtime":1629115897864,"results":"156","hashOfConfig":"83"},{"size":3927,"mtime":1629409296651,"results":"157","hashOfConfig":"83"},{"size":2542,"mtime":1629237608718,"results":"158","hashOfConfig":"83"},{"size":2696,"mtime":1629409435587,"results":"159","hashOfConfig":"83"},{"size":686,"mtime":1629295364584,"results":"160","hashOfConfig":"83"},{"size":384,"mtime":1629316139817,"results":"161","hashOfConfig":"83"},{"size":1206,"mtime":1629751544776,"results":"162","hashOfConfig":"83"},{"size":214,"mtime":1629751537507,"results":"163","hashOfConfig":"83"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},"9q8v7z",{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"166"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"166"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"166"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"166"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"166"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286","usedDeprecatedRules":"166"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"166"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/miha/Documents/projects/js/nexomia-client/src/index.tsx",[],["334","335"],"/home/miha/Documents/projects/js/nexomia-client/src/views/App.tsx",["336"],"import {\n  Switch,\n  Route,\n  useHistory\n} from 'react-router-dom';\n\nimport { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { useStore } from 'effector-react';\nimport $AuthStore, { setToken } from '../store/AuthStore';\nimport $UserStore, { setUser } from '../store/UserStore';\nimport { setGuilds } from '../store/GuildStore';\nimport { cacheGuilds } from '../store/GuildCacheStore';\nimport { setContextMenu } from '../store/ContextMenuStore';\n\nimport UsersService from '../services/api/users/users.service';\nimport GuildsService from '../services/api/guilds/guilds.service';\nimport CommonRequestManager from '../services/api/common';\n\nimport SocketManager from '../services/socket/SocketManager';\n\nimport '../i18n/config';\n\nimport '../styles/App.css';\n\nimport Guilds from '../components/layout/Guilds';\nimport Sidebar from '../components/layout/Sidebar';\nimport MemberSidebar from '../components/layout/MemberSidebar';\nimport Content from '../components/layout/Content';\nimport LoadingPlaceholder from '../components/ui/LoadingPlaceholder';\nimport Modals from '../components/layout/Modals';\n\nimport preloaders from '../i18n/preloaders.json';\nimport Guild from '../store/models/Guild';\nimport ContextMenu from '../components/contextmenus/ContextMenu';\n\nfunction App() {\n  const { t } = useTranslation(['states']);\n\n  const { token } = useStore($AuthStore);\n  const User = useStore($UserStore);\n\n  const history = useHistory();\n\n  const [loaded, setLoaded] = useState(false);\n\n  const [loaderTitleAuthor, setLoaderTitleAuthor] = useState(0);\n  const [loaderTitleId, setLoaderTitleId] = useState(0);\n\n  useEffect(() => {\n    const authorId = getRandomInt(preloaders.authors.length)\n    setLoaderTitleAuthor(authorId);\n    setLoaderTitleId(preloaders.authors[authorId].prefix + getRandomInt(preloaders.authors[authorId].count));\n\n    preloadUserInfo();\n  }, []);\n\n  return (\n    <div className=\"App dark-theme\" onClick={ closeContextMenu } onContextMenu={ (event: any) => event.preventDefault() }>\n      <LoadingPlaceholder\n        title={ t(`states:loading.${loaderTitleId.toString()}`) }\n        subtext={ `@${preloaders.authors[loaderTitleAuthor].name}` }\n        active={ !loaded }\n        solid={ true }\n      />\n      <ContextMenu />\n      <Switch>\n        <Route path={`/channels/:guildId/:channelId`}>\n          <Modals />\n          <Guilds />\n          <Sidebar />\n          <Content />\n          <MemberSidebar />\n        </Route>\n\n        <Route path={`/channels/:guildId`}>\n          <Modals />\n          <Guilds />\n          <Sidebar />\n          <Content />\n        </Route>\n\n        <Route path={`/:path/:guildId/:channelId`}>\n          <Modals />\n          <Guilds />\n          <Sidebar />\n          <Content />\n        </Route>\n\n        <Route path={`/:path/:guildId`}>\n          <Modals />\n          <Guilds />\n          <Sidebar />\n          <Content />\n        </Route>\n\n        <Route path={`/:path`}>\n          <Modals />\n          <Guilds />\n          <Sidebar />\n          <Content />\n        </Route>\n\n        { User ? (\n          <Route path='/'>\n            { () => history.push('/home') }\n          </Route>\n        ) : null }\n      </Switch>\n    </div>\n  );\n\n  async function preloadUserInfo() {\n    CommonRequestManager.setToken(token);\n    SocketManager.setToken(token);\n    const userInfo = await UsersService.getUser('@me');\n    if (!userInfo) {\n      setToken('');\n      history.push('/login');\n      return;\n    }\n\n    const guilds = await GuildsService.getUserGuilds();\n\n    setUser(userInfo);\n    setGuilds(guilds.map((guild: Guild) => guild.id));\n    cacheGuilds(guilds);\n\n    SocketManager.init();\n\n    SocketManager.onLoad = () => setLoaded(true);\n  }\n\n  function closeContextMenu() {\n    setContextMenu({ visible: false });\n  }\n}\n\nfunction getRandomInt(max: number): number {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nexport default App;\n\n","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Sidebar.tsx",["337","338"],"import { styled } from 'linaria/react';\nimport { css } from 'linaria';\nimport { Fragment, useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\n\nimport { useStore } from 'effector-react';\nimport $GuildCacheStore, { setGuildRoles, setGuildMembers, cacheGuilds } from '../../store/GuildCacheStore';\nimport $ChannelStore, { setGuildChannels } from '../../store/ChannelStore';\nimport $ChannelCacheStore, { cacheChannels } from '../../store/ChannelCacheStore';\nimport { cacheUsers } from '../../store/UserCacheStore';\nimport { cacheMembers } from '../../store/MemberCacheStore';\nimport { cacheRoles } from '../../store/RolesCacheStore';\nimport PermissionCalculator from '../../utils/PermissionCalculator';\nimport { ComputedPermissions } from '../../store/models/ComputedPermissions';\n\nimport { BiHash } from 'react-icons/bi';\nimport {\n  RiAddFill,\n  RiMessage3Fill,\n  RiUserFill\n} from 'react-icons/ri';\n\nimport SidebarHeader from './SidebarHeader';\n\nimport Channel from '../../store/models/Channel';\nimport StyledText from '../ui/StyledText';\nimport CenteredContainer from './CenteredContainer';\nimport ChannelsService from '../../services/api/channels/channels.service';\nimport Dots from '../animations/Dots';\nimport isTabGuild from '../../utils/isTabGuild';\nimport GuildsService from '../../services/api/guilds/guilds.service';\nimport RolesService from '../../services/api/roles/roles.service';\nimport Role from '../../store/models/Role';\nimport Tab from '../sidebar/Tab';\nimport $UserStore from '../../store/UserStore';\nimport { setModalState } from '../../store/ModalStore';\nimport { useTranslation } from 'react-i18next';\n\n\nconst SidebarContainer = styled.div`\n  display: flex;\n  width: 240px;\n  flex-shrink: 0;\n  flex-direction: column;\n  align-self: stretch;\n  background: var(--background-secondary-alt)\n`\n\nconst Content = styled.div`\n  display: flex;\n  align-self: center;\n  color: var(--text-primary);\n  font-weight: 900;\n  font-size: 18px;\n  padding: 0 16px;\n  user-select: none;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n`\n\ninterface RouteParams {\n  path: string,\n  guildId: string,\n  channelId: string\n}\n\ninterface SidebarProps {\n  type?: string\n}\n\ninterface GuildChannels {\n  [key: string]: string[]\n}\n\ninterface ChannelsCache {\n  [key: string]: Channel\n}\n\nfunction Sidebar({ type = 'channels' }: SidebarProps) {\n  const { path, guildId, channelId } = useParams<RouteParams>();\n\n  const guilds = useStore($GuildCacheStore);\n  const channels = useStore<GuildChannels>($ChannelStore);\n  const channelsCache = useStore<ChannelsCache>($ChannelCacheStore);\n  const user = useStore($UserStore);\n\n  const { t } = useTranslation(['settings', 'chat']);\n\n  const history = useHistory();\n\n  const [loading, setLoading] = useState(false);\n\n  const [guildChannels, setGuildChannelsValue] = useState<string[]>([]);\n\n  useEffect(() => {\n    setLoading(false);\n    if (type === 'channels') {\n      if (!isTabGuild(guildId)) return;\n      const newGuildChannels = channels[guildId] || [];\n      setGuildChannelsValue(newGuildChannels);\n      \n      if (!newGuildChannels.length && (!path || path === 'guildsettings')) {\n        loadChannels();\n      } else if (!path && !channelId) {\n        history.push(`/channels/${guildId}/${newGuildChannels[newGuildChannels.indexOf(guilds[guildId]?.default_channel || '')] || newGuildChannels[0]}`);\n      }\n    }\n  }, [guildId, path]);\n\n  useEffect(() => {\n    const newGuildChannels = channels[guildId] || [];\n    setGuildChannelsValue(newGuildChannels);\n  }, [channels]);\n\n  return (\n    <SidebarContainer>\n      { !path && guildId === '@me' && type === 'channels' && (\n        <SidebarHeader>\n          <Content>{ t('tabs.direct_messages') }</Content>\n        </SidebarHeader>\n      ) }\n\n      { (path === 'discover' || path === 'profiles') && type === 'channels' && (\n        <Fragment>\n          <SidebarHeader>\n            <Content>{ t('tabs.discover') }</Content>\n          </SidebarHeader>\n          <Tab\n            Icon={ RiUserFill }\n            title={ t('tabs.people') }\n            tabId={ 'people' }\n            active={ path === 'profiles' }\n            onClick={ () => { history.push(`/discover/people`) } }\n          />\n        </Fragment>\n      ) }\n\n      { path === 'home' && type === 'channels' && (\n        <Fragment>\n          <SidebarHeader>\n            <Content>{ t('tabs.home') }</Content>\n          </SidebarHeader>\n          <Tab\n            Icon={ RiMessage3Fill }\n            title={ t('tabs.feed') }\n            tabId={ 'feed' }\n            onClick={ () => { history.push(`/home/feed`) } }\n          />\n          <Tab\n            Icon={ RiUserFill }\n            title={ t('tabs.friends') }\n            tabId={ 'friends' }\n            onClick={ () => { history.push(`/home/friends`) } }\n          />\n        </Fragment>\n      ) }\n\n      { path === 'guildsettings' && type === 'channels' && (\n        <Fragment>\n          <SidebarHeader>\n            <Content>{ t('tabs.server_settings') }</Content>\n          </SidebarHeader>\n          <Tab\n            title={ t('tabs.general') }\n            tabId={ 'general' }\n            onClick={ () => { history.push(`/guildsettings/${guildId}/general`) } }\n          />\n          <Tab\n            title={ t('tabs.roles') }\n            tabId={ 'roles' }\n            onClick={ () => { history.push(`/guildsettings/${guildId}/roles`) } }\n          />\n        </Fragment>\n      ) }\n\n      { !path && isTabGuild(guildId) && type === 'channels' && (\n        <Fragment>\n          <SidebarHeader>\n            <Content>{ guilds[guildId]?.name }</Content>\n          </SidebarHeader>\n        </Fragment>\n      ) }\n\n      { !path && isTabGuild(guildId) && type === 'channels' && (guildChannels && guildChannels.length && channelsCache[guildChannels[0]] ? (\n        [\n          ...(guildChannels.map((channel: string) => (\n            (PermissionCalculator.getUserPermissions(guildId, channel, user.id) & ComputedPermissions.VIEW_CHANNEL) && (\n              <Tab\n                Icon={ BiHash }\n                title={ channelsCache[channel]?.name || '' }\n                tabId={ channelsCache[channel]?.id }\n                key={ channelsCache[channel]?.id }\n                onClick={ () => { history.push(`/channels/${guildId}/${channel}`) } }\n              />\n            )\n          ))),\n          (\n            (PermissionCalculator.getUserPermissions(guildId, '', user.id) & ComputedPermissions.MANAGE_CHANNELS) ?\n            <Tab\n              Icon={ RiAddFill }\n              title={ t('chat:channel_new') }\n              tabId={ 'new' }\n              onClick={ () => { setModalState({ channelCreation: true }) } }\n            /> : null\n          )\n        ]\n      ) : loading ? (\n        <CenteredContainer>\n          <Dots />\n        </CenteredContainer>\n      ) : (\n        <Fragment>\n          <StyledText className={ css`text-align: center; margin-bottom: 16px` }>No channels</StyledText>\n          {\n            (PermissionCalculator.getUserPermissions(guildId, '', user.id) & ComputedPermissions.MANAGE_CHANNELS) ?\n            <Tab\n              Icon={ RiAddFill }\n              title={ t('chat:channel_new') }\n              tabId={ 'new' }\n              onClick={ () => { setModalState({ channelCreation: true }) } }\n            /> : null\n          }\n        </Fragment>\n      )) }\n    </SidebarContainer>\n  );\n\n  async function loadChannels() {\n    setLoading(true);\n    const response = await ChannelsService.getGuildChannels(guildId);\n    if (!response) return history.push('/home');\n    const guildResponse = await GuildsService.getFullGuild(guildId || '');\n    const membersResponse = await GuildsService.getGuildMembers(guildId || '');\n    const rolesResponse = await RolesService.getGuildRoles(guildId || '');\n\n    cacheGuilds([guildResponse]);\n    cacheUsers([...membersResponse].map((member: any) => member.user));\n    setGuildMembers({ guild: guildId, members: [...membersResponse].map((member: any) => member.id) });\n    cacheMembers([...membersResponse].map((member: any) => {\n      delete member.user;\n      return { ...member, guild: guildId };\n    }));\n    cacheRoles(rolesResponse);\n    setGuildRoles({ guild: guildId, roles: rolesResponse.sort((a: Role, b: Role) => (a.position || 0) - (b.position || 0)).map((role: Role) => role.id) });\n    cacheChannels(response);\n    setGuildChannels({ guild: guildId, channels: response.map((channel: Channel) => channel.id) });\n    setGuildChannelsValue(response.map((channel: Channel) => channel.id));\n    setLoading(false);\n\n    if (response.length) {\n      const defaultChannel = response[response.findIndex((channel: Channel) => guildResponse?.default_channel === channel.id)]?.id || response[0].id;\n      if (defaultChannel && !channelId) {\n        history.push(`/channels/${guildId}/${defaultChannel}`);\n      }\n    }\n  }\n}\n\nexport default Sidebar;\n","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Content.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/layout/SidebarHeader.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/layout/ContentHeader.tsx",["339"],"/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Guilds.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/guilds/UserMenu.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/guilds/PanelButton.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/views/Login.tsx",["340"],"import { css } from 'linaria';\n\nimport { useState, useRef, useEffect } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\n\nimport { useTranslation } from 'react-i18next';\n\nimport { useStore } from 'effector-react';\nimport $AuthStore, { setToken, setRefreshToken } from '../store/AuthStore';\n\nimport AuthService from '../services/api/auth/auth.service';\n\nimport '../styles/App.css';\n\nimport Layer from '../components/ui/Layer';\nimport Modal from '../components/ui/Modal';\nimport ModalHeader from '../components/ui/ModalHeader';\nimport InputField from '../components/ui/InputField';\nimport FilledButton from '../components/ui/FilledButton';\nimport StyledText from '../components/ui/StyledText';\nimport LoadingPlaceholder from '../components/ui/LoadingPlaceholder';\n\nconst modalCss = css`\n  width: 440px;\n`\n\nconst negativeColorCss = css`\n  color: var(--text-negative);\n`\n\nfunction Login() {\n  const { token } = useStore($AuthStore);\n  const history = useHistory();\n\n  useEffect(() => {\n    console.log(token)\n    if (token && token !== '') {\n      history.push('/home');\n    }\n  }, []);\n\n  const { t } = useTranslation(['reg']);\n\n  const [loginLoading, setLoginLoading] = useState(false);\n  const [emailError, setEmailError] = useState(false);\n  const [passwordError, setPasswordError] = useState(false);\n  const [loginError, setLoginError] = useState(false);\n\n  const emailInput = useRef<HTMLInputElement>(null);\n  const passwordInput = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    console.log(emailInput);\n  }, []);\n\n  return (\n    <div className=\"Login dark-theme\">\n      <Layer>\n        <Modal className={ modalCss }>\n          <LoadingPlaceholder title={ t('logging_in') } active={ loginLoading } />\n          <ModalHeader>{ t('log_in') }<br /><StyledText>{ t('welcomer_log_in') }</StyledText></ModalHeader>\n          <InputField placeholder={ t('fields.email') } ref={ emailInput } />\n          { (emailError && <StyledText className={ negativeColorCss }>{ t('errors.required_field') }</StyledText>) }\n          <InputField placeholder={ t('fields.password') } type=\"password\" hidden={ true } ref={ passwordInput } />\n          { (passwordError && <StyledText className={ negativeColorCss }>{ t('errors.required_field') }</StyledText>) }\n          { (loginError && <StyledText className={ negativeColorCss }>{ t('errors.invalid_credentials') }</StyledText>) }\n          <StyledText>{ t('no_account') } <Link to=\"/register\">{ t('register') }</Link></StyledText>\n          <FilledButton onClick={ login }>{ t('continue') }</FilledButton>\n        </Modal>\n      </Layer>\n    </div>\n  );\n\n  async function login() {\n    setLoginError(false);\n    setEmailError(!emailInput.current?.value);\n    setPasswordError(!passwordInput.current?.value);\n\n    if (!emailInput.current?.value || !passwordInput.current?.value) return;\n\n    setLoginLoading(true);\n\n    const response = await AuthService.login(emailInput.current?.value, passwordInput.current?.value);\n\n    setLoginLoading(false);\n\n    if (!response) {\n      setLoginError(true);\n      return;\n    }\n\n    setToken(response.access_token);\n    setRefreshToken(response.refresh_token);\n\n    history.push('/home');\n  }\n}\n\nexport default Login;\n","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/Layer.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/ui/Modal.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/ui/ModalHeader.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/ui/InputField.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/ui/FilledButton.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/ui/StyledText.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/views/Register.tsx",["341"],"import { css } from 'linaria';\n\nimport { useState, Fragment, useRef, useEffect } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\n\nimport { useTranslation } from 'react-i18next';\n\nimport { useStore } from 'effector-react';\nimport $AuthStore from '../store/AuthStore';\n\nimport AuthService from '../services/api/auth/auth.service';\n\nimport '../styles/App.css';\n\nimport Layer from '../components/ui/Layer';\nimport Modal from '../components/ui/Modal';\nimport ModalHeader from '../components/ui/ModalHeader';\nimport InputField from '../components/ui/InputField';\nimport FilledButton from '../components/ui/FilledButton';\nimport StyledText from '../components/ui/StyledText';\nimport LoadingPlaceholder from '../components/ui/LoadingPlaceholder';\n\nconst modalCss = css`\n  width: 440px\n`\n\nconst negativeColorCss = css`\n  color: var(--text-negative);\n`\n\nfunction Register() {\n  const { token } = useStore($AuthStore);\n  const history = useHistory();\n\n  useEffect(() => {\n    if (token) {\n      history.push('/channels/@me');\n    }\n  }, []);\n\n  const { t } = useTranslation(['reg']);\n\n  const [registerLoading, setRegisterLoading] = useState(false);\n  const [registerState, setRegisterState] = useState(0);\n  const [placeholderText] = useState(0);\n  const [emailError, setEmailError] = useState(false);\n  const [usernameError, setUsernameError] = useState(false);\n  const [passwordError, setPasswordError] = useState(false);\n\n  const emailInput = useRef<HTMLInputElement>(null);\n  const usernameInput = useRef<HTMLInputElement>(null);\n  const passwordInput = useRef<HTMLInputElement>(null);\n\n  return (\n    <div className=\"Login dark-theme\">\n      <Layer>\n        <Modal className={ modalCss }>\n          <LoadingPlaceholder title={ (placeholderText === 0 && 'Creating your account...') || 'Almost there...' } active={ registerLoading } />\n\n          { registerState === 0 && (\n            <Fragment>\n              <ModalHeader>{ t('register') }<br /><StyledText>{ t('welcomer_register') }</StyledText></ModalHeader>\n              <InputField placeholder={ t('fields.email') } ref={ emailInput } />\n              { (emailError && <StyledText className={ negativeColorCss }>{ t('errors.required_field') }</StyledText>) }\n              <InputField placeholder={ t('fields.username') } ref={ usernameInput } />\n              { (usernameError && <StyledText className={ negativeColorCss }>{ t('errors.required_field') }</StyledText>) }\n              <InputField placeholder={ t('fields.password') } type=\"password\" ref={ passwordInput } hidden={ true } />\n              { (passwordError && <StyledText className={ negativeColorCss }>{ t('errors.required_field') }</StyledText>) }\n              <StyledText>{ t('has_account') } <Link to=\"/login\">{ t('log_in') }</Link></StyledText>\n              <FilledButton onClick={ register }>{ t('continue') }</FilledButton>\n            </Fragment>\n          ) }\n\n          { registerState === 1 && (\n            <Fragment>\n              <ModalHeader>{ t('account_created') }<br /><StyledText>{ t('account_log_in') }</StyledText></ModalHeader>\n              <FilledButton onClick={ login }>{ t('continue') }</FilledButton>\n            </Fragment>\n          ) }\n        </Modal>\n      </Layer>\n    </div>\n  );\n\n  async function register() {\n    setEmailError(!emailInput.current?.value);\n    setUsernameError(!usernameInput.current?.value);\n    setPasswordError(!passwordInput.current?.value);\n\n    if (!emailInput.current?.value || !usernameInput.current?.value || !passwordInput.current?.value) return;\n\n    setRegisterLoading(true);\n\n    const response = await AuthService.register(\n      emailInput.current?.value,\n      usernameInput.current?.value,\n      passwordInput.current?.value\n    );\n\n    if (!response) return;\n\n    setRegisterLoading(false);\n    setRegisterState(1);\n  }\n\n  function login() {\n    history.push('/login');\n  }\n}\n\nexport default Register;\n","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/LoadingPlaceholder.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/animations/Dots.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/i18n/config.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/services/api/auth/auth.service.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/services/api/common.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/config.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/services/api/users/users.service.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/services/api/guilds/guilds.service.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Modals.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/modals/ServerCreationModal.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/ui/BigPageButton.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/css/PanelIconCss.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/css/LayerBackgroundShadeCss.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/css/InactiveLayerCss.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/sidebar/Tab.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/css/StyledIconCss.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/UserStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/AuthStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/GuildStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/ModalStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/ChannelStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/services/api/channels/channels.service.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/chat/ChatView.tsx",["342","343","344","345","346","347"],"import { useStore } from 'effector-react';\nimport { css } from 'linaria';\nimport { styled } from 'linaria/react';\nimport { Fragment, useEffect, useRef, useState } from 'react';\nimport $ChannelCacheStore from '../../store/ChannelCacheStore';\nimport { cacheMessages } from '../../store/MessageCacheStore';\nimport $MessageStore, { appendChannelMessages, clearLoadedMesssages } from '../../store/MessageStore';\nimport { ComputedPermissions } from '../../store/models/ComputedPermissions';\nimport $RoleCacheStore from '../../store/RolesCacheStore';\nimport PermissionCalculator from '../../utils/PermissionCalculator';\n\nimport MessagesService from '../../services/api/messages/messages.service';\n\nimport ChatInput from './ChatInput';\nimport MessageView from './MessageView';\nimport Message from '../../store/models/Message';\n\nconst MessageContainerWrapper = styled.div`\n  flex-grow: 1;\n`\n\nconst MessageContainer = styled.div`\n  position: relative;\n  width: 100%;\n  height: calc(100% + 26px);\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n`\n\nconst ScrollableContent = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  overflow: hidden auto;\n  box-sizing: border-box;\n`\n\nconst MessageWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  min-height: 100%;\n  padding-bottom: 32px;\n  justify-content: flex-end;\n`\n\ninterface ChatViewProps {\n  channel: string\n}\n\nfunction ChatView({ channel }: ChatViewProps) {\n  const scrollerRef = useRef<HTMLDivElement>(null);\n  const Messages = useStore($MessageStore);\n  const Channels = useStore($ChannelCacheStore);\n  const Roles = useStore($RoleCacheStore);\n\n  const [inputVisible, setInputVisible] = useState(getSendPermission());\n  const [loading, setLoading] = useState(false);\n  const [oldHeight, setOldHeight] = useState(0);\n  const [oldTop, setOldTop] = useState(0);\n\n  useEffect(() => {\n    setInputVisible(getSendPermission());\n  }, [Roles]);\n\n  useEffect(() => {\n    if (!loading) {\n      scrollView()\n    } else {\n      setLoading(false);\n    }\n  }, [channel, Messages[channel]]);\n\n  return (\n    <Fragment>\n      <MessageContainerWrapper>\n        <MessageContainer>\n          <ScrollableContent ref={ scrollerRef } onScroll={ handleScroll }>\n            <MessageWrapper>\n              <MessageView channel={ channel } onMessagesLoaded={ scrollView } />\n            </MessageWrapper>\n          </ScrollableContent>\n        </MessageContainer>\n      </MessageContainerWrapper>\n      { inputVisible ? (\n        <ChatInput channel={ channel } onMessageSent={ scrollView } />\n      ) : <div className={ css`height: 26px` } /> }\n    </Fragment>\n  )\n\n  function scrollView() {\n    if (!loading) {\n      scrollerRef.current?.scrollTo({ top: scrollerRef.current.scrollHeight, behavior: 'auto' });\n    }\n  }\n\n  function getSendPermission() {\n    return !!(PermissionCalculator.getUserPermissions(Channels[channel]?.guild_id || '', channel, '') & ComputedPermissions.WRITE_MESSAGES);\n  }\n\n  async function handleScroll() {\n    if (\n      scrollerRef?.current?.scrollTop &&\n      scrollerRef?.current?.scrollTop < 400 &&\n      !loading\n    ) {\n      setLoading(true);\n      const response = await MessagesService.getChannelMessages(channel, Messages[channel].length);\n      if (!response || !response.length) return;\n      cacheMessages(response);\n      appendChannelMessages({ channel, messages: response.map((message: Message) => message.id) });\n      setOldHeight(scrollerRef?.current?.scrollHeight);\n    } else if (\n      scrollerRef?.current?.scrollTop &&\n      scrollerRef?.current?.scrollTop > scrollerRef?.current?.scrollHeight - 100 - window.innerHeight &&\n      Messages[channel].length > 50\n    ) {\n      clearLoadedMesssages(channel);\n    }\n  }\n}\n\nexport default ChatView;\n","/home/miha/Documents/projects/js/nexomia-client/src/components/chat/ChatInput.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/chat/MessageView.tsx",["348"],"/home/miha/Documents/projects/js/nexomia-client/src/components/layout/CenteredContainer.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/services/api/messages/messages.service.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/MessageStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/MessageCacheStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/GuildCacheStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/ChannelCacheStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/UserCacheStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/chat/MessageRenderer.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/profile/ProfileView.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/utils/isTabGuild.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/MemberCacheStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/contextmenus/ContextMenu.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/ContextMenuStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/contextmenus/ContextTab.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/settings/SettingsView.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/settings/guild/RolesView.tsx",["349","350","351"],"import classNames from 'classnames';\nimport { useStore } from 'effector-react';\nimport { css } from 'linaria';\nimport { styled } from 'linaria/react';\nimport { ChangeEvent, Fragment, useEffect, useState } from 'react';\nimport { RiArrowLeftLine, RiArrowRightSLine } from 'react-icons/ri';\nimport { useParams } from 'react-router-dom';\nimport { List, arrayMove } from 'react-movable';\nimport RolesService from '../../../services/api/roles/roles.service';\nimport $GuildCacheStore, { setGuildRoles } from '../../../store/GuildCacheStore';\nimport PermissionOverwrites from '../../../store/models/PermissionOverwrites';\nimport $RoleCacheStore, { cacheRoles, updateRole } from '../../../store/RolesCacheStore';\nimport StyledIconCss from '../../css/StyledIconCss';\nimport InputField from '../../ui/InputField';\nimport LoadingPlaceholder from '../../ui/LoadingPlaceholder';\nimport StyledText from '../../ui/StyledText';\nimport PermissionEditor from '../ui/PermissionEditor';\nimport Role from '../ui/Role';\nimport PermissionCalculator from '../../../utils/PermissionCalculator';\nimport { ComputedPermissions } from '../../../store/models/ComputedPermissions';\nimport { useTranslation } from 'react-i18next';\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  padding: 14px;\n  cursor: pointer;\n  border-radius: 4px;\n  flex-grow: 1;\n  flex-direction: row;\n  margin: 16px 0;\n\n  &:hover {\n    background: var(--background-light);\n  }\n`\n\nconst IconCss = css`\n  width: 20px;\n  height: 20px;\n  margin-right: 14px;\n`\n\nconst ColorDot = styled.div`\n  width: 16px;\n  height: 16px;\n  border-radius: 50%;\n  margin-right: 16px;\n`\n\nconst Container = styled.div`\n  padding: 16px;\n  border-radius: 4px;\n  background: var(--background-secondary-alt);\n  margin-bottom: 4px;\n  display: flex;\n  flex-grow: 1;\n  flex-direction: row;\n  align-items: center;\n\n  &:hover {\n    cursor: pointer;\n    background: var(--background-secondary);\n  }\n`\n\nconst Splitter = styled.div`\n  flex-grow: 1;\n`\n\nconst DefaultIconCss = css`\n  padding: 2px 4px;\n  border-radius: 2px;\n  background: var(--accent);\n  margin: 0;\n  font-size: 14px;\n`\n\nconst RoleIconCss = css`\n  width: 20px;\n  height: 20px;\n  margin-left: 16px;\n`\n\ninterface RouteParams {\n  guildId: string\n}\n\nfunction RolesView() {\n  const { guildId } = useParams<RouteParams>();\n  const GuildsCache = useStore($GuildCacheStore);\n  const RolesCache = useStore($RoleCacheStore);\n\n  const { t } = useTranslation(['settings']);\n\n  const [roleList, setRoleList] = useState<string[]>([]);\n  \n  useEffect(() => {\n    setRoleList([ ...(GuildsCache[guildId]?.roles || []) ]);\n    setCanMove(\n      !!(\n        PermissionCalculator.getUserPermissions(guildId, '', '')\n        & (ComputedPermissions.MANAGE_ROLES | ComputedPermissions.ADMINISTRATOR)\n      )\n    );\n  }, []);\n\n  useEffect(() => {\n    setRoleList([ ...(GuildsCache[guildId]?.roles || []) ]);\n  }, [GuildsCache]);\n\n  const [canMove, setCanMove] = useState(false);\n\n  const [roleSelected, setRoleSelected] = useState('');\n  const [editedPermissions, setEditedPermissions] = useState<PermissionOverwrites>({ allow: 0, deny: 0 });\n  const [permissionsWasEdited, setPermissionsWasEdited] = useState(false);\n  const [saveLoading, setSaveLoading] = useState(false);\n\n  const [roleName, setRoleName] = useState('');\n  const [roleColor, setRoleColor] = useState('');\n\n  return (\n    <Fragment>\n      <LoadingPlaceholder title={ t('saving_changes') } active={ saveLoading } />\n      { !roleSelected ? (\n        <Fragment>\n          <StyledText className={ css`text-align: center; margin: 32px 0` }>\n            { t('server_roles.roles_description') }\n          </StyledText>\n          { \n            <List\n              lockVertically\n              values={ roleList }\n              onChange={ \n                ({ oldIndex, newIndex }) => {\n                  const updatedRoleList = arrayMove(roleList, oldIndex, newIndex);\n                  updateRolePosition(newIndex, updatedRoleList);\n                  setRoleList(updatedRoleList);\n                }\n              }\n              renderList={ ({ children, props }) => <div { ...props }>{ children }</div> }\n              renderItem={ ({ value, props }) =>\n                <Container { ...props } onClick={ () => selectRole(value) }>\n                  <ColorDot\n                    style={{ background: RolesCache[value].color || 'var(--text-primary)' }}\n                  >\n                    <div data-movable-handle style={{ \n                      width: canMove && !RolesCache[value].default ? '100%' : '0px',\n                      height: canMove && !RolesCache[value].default ? '100%' : '0px',\n                      cursor: 'grab'\n                    }} />\n                  </ColorDot>\n                  <StyledText className={ css`margin: 0; font-weight: 900` }>{ RolesCache[value].name }</StyledText>\n                  <Splitter />\n                  { RolesCache[value].default && (<StyledText className={ DefaultIconCss }>{ t('server_roles.default_role') }</StyledText>) }\n                  <RiArrowRightSLine className={ classNames({ [StyledIconCss]: true, [RoleIconCss]: true }) } />\n                </Container>\n              }\n            />\n          }\n        </Fragment>\n      ) : (\n        <Fragment>\n          <ButtonContainer onClick={ () => goBack() }>\n            <RiArrowLeftLine className={ classNames({ [IconCss]: true, [StyledIconCss]: true }) } />\n            <StyledText className={ css`margin: 0; font-weight: 900` }>\n              { !permissionsWasEdited ? t('server_roles.back') : t('server_roles.save_back') }\n            </StyledText>\n          </ButtonContainer>\n          <Role\n            name={ roleName }\n            color={ roleColor || 'var(--background-light)' }\n            defaultRole={ RolesCache[roleSelected].default === true }\n            active={ true }\n          />\n          <StyledText className={ css`text-align: center; margin: 48px 0 24px 0; font-size: 22px; font-weight: 900` }>\n            { t('server_roles.appearance') }\n          </StyledText>\n          <StyledText className={ css`text-align: left; margin: 4px; font-size: 14px; font-weight: 900` }>\n            { t('server_roles.name') }\n          </StyledText>\n          <InputField\n            className={ css`margin-top: 2px; margin-bottom: 16px` }\n            defaultValue={ RolesCache[roleSelected].name }\n            onChange={ (event: ChangeEvent<HTMLInputElement>) => { setRoleName(event.target.value); setPermissionsWasEdited(true) } }\n          />\n          <StyledText className={ css`text-align: left; margin: 4px; font-size: 14px; font-weight: 900` }>\n            { t('server_roles.color') }\n          </StyledText>\n          <InputField\n            className={ css`margin-top: 2px; margin-bottom: 16px` }\n            defaultValue={ RolesCache[roleSelected].color }\n            onChange={ (event: ChangeEvent<HTMLInputElement>) => { setRoleColor(event.target.value); setPermissionsWasEdited(true) } }\n          />\n          <StyledText className={ css`text-align: center; margin: 48px 0 24px 0; font-size: 22px; font-weight: 900` }>\n            { t('server_roles.permissions') }\n          </StyledText>\n          <StyledText className={ css`text-align: center; margin: 0 0 24px 0` }>\n            { t('server_roles.permissions_description') }\n          </StyledText>\n          \n          <PermissionEditor\n            initialPermissions={ RolesCache[roleSelected].permissions }\n            inherit={ !RolesCache[roleSelected].default }\n            onChange={ permissionsEdited }\n          />\n        </Fragment>\n      ) }\n    </Fragment>\n  )\n\n  function permissionsEdited(permissions: PermissionOverwrites) {\n    setEditedPermissions(permissions);\n    setPermissionsWasEdited(true);\n  }\n\n  function selectRole(role: string) {\n    setRoleName(RolesCache[role].name);\n    setRoleColor(RolesCache[role].color || '');\n    setRoleSelected(role);\n  }\n\n  async function goBack() {\n    if (permissionsWasEdited) {\n      setSaveLoading(true);\n\n      const response = await RolesService.patchRole(guildId, roleSelected, {\n        name: roleName,\n        color: roleColor,\n        permissions: editedPermissions\n      });\n\n      if (response) {\n        updateRole({ role: roleSelected, patch: response });\n      }\n\n      setSaveLoading(false);\n    }\n\n    setPermissionsWasEdited(false);\n    setRoleSelected('');\n  }\n\n  async function updateRolePosition(index: number, updatedRoleList: string[]) {\n    setGuildRoles({ guild: guildId, roles: updatedRoleList });\n    await RolesService.patchRole(guildId, updatedRoleList[index], { position: index + 1 });\n  }\n}\n\nexport default RolesView;\n","/home/miha/Documents/projects/js/nexomia-client/src/services/api/roles/roles.service.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/RolesCacheStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/settings/ui/Role.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/settings/ui/Permission.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/settings/ui/PermissionEditor.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/models/ComputedPermissions.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/layout/MemberSidebar.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/utils/PermissionCalculator.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/sidebar/Member.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/utils/getMemberColor.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/services/socket/SocketManager.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/services/socket/events/Messages.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/services/socket/events/Users.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/services/socket/events/Roles.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/utils/getUrlEncodedString.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/utils/getIconString.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/settings/guild/GeneralView.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/ui/DropdownInput.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/modals/ChannelCreationModal.tsx",["352"],"import classNames from 'classnames';\nimport { css } from 'linaria';\nimport { useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router';\nimport GuildsService from '../../services/api/guilds/guilds.service';\nimport { cacheChannels } from '../../store/ChannelCacheStore';\nimport { setModalState } from '../../store/ModalStore';\nimport InactiveLayerCss from '../css/InactiveLayerCss';\nimport LayerBackgroundShadeCss from '../css/LayerBackgroundShadeCss';\nimport FilledButton from '../ui/FilledButton';\nimport InputField from '../ui/InputField';\nimport Layer from '../ui/Layer';\nimport LoadingPlaceholder from '../ui/LoadingPlaceholder';\nimport Modal from '../ui/Modal';\nimport ModalHeader from '../ui/ModalHeader';\nimport StyledText from '../ui/StyledText';\n\ninterface ChannelCreationModalProps {\n  active: boolean\n}\n\ninterface RouteParams {\n  guildId: string\n}\n\nconst negativeColorCss = css`\n  color: var(--text-negative);\n`\n\nfunction ChannelCreationModal({ active }: ChannelCreationModalProps) {\n  const { guildId } = useParams<RouteParams>();\n\n  const layerRef = useRef(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const { t } = useTranslation(['settings']);\n\n  const [loading, setLoading] = useState(false);\n  const [name, setName] = useState('');\n  const [error, setError] = useState(false);\n\n  return (\n    <Layer className={ classNames({ [LayerBackgroundShadeCss]: true, [InactiveLayerCss]: !active }) } onClick={ (event) => { closeModal(event) } } ref={ layerRef }>\n      <Modal className={ css`width: 440px` }>\n        <LoadingPlaceholder title={ t('modals.channel_creating') } active={ loading } />\n        <ModalHeader>{ t('modals.channel_create_header') }</ModalHeader>\n        <InputField\n          placeholder={ t('modals.name') }\n          onChange={ (event) => { setName(event.target.value) } }\n          ref={ inputRef }\n        />\n        { (error && <StyledText className={ negativeColorCss }>{ t('modals.channel_create_error') }</StyledText>) }\n        <FilledButton onClick={ createChannel }>{ t('modals.create') }</FilledButton>\n      </Modal>\n    </Layer>\n  )\n\n  function closeModal(event: any) {\n    if (event.target !== layerRef.current) return;\n    setModalState({ channelCreation: false });\n  }\n\n  async function createChannel() {\n    setLoading(true);\n\n    const response = await GuildsService.createGuildChannel(guildId, { name, type: 3 });\n    setLoading(false);\n\n    if (!response) {\n      return setError(true);\n    }\n\n    setName('');\n    if (inputRef.current)\n      inputRef.current.value = '';\n    setModalState({ channelCreation: false });\n  }\n}\n\nexport default ChannelCreationModal;\n","/home/miha/Documents/projects/js/nexomia-client/src/services/socket/events/Channels.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/chat/InputButton.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/chat/PinnedMessagesView.tsx",["353"],"/home/miha/Documents/projects/js/nexomia-client/src/components/ui/PopoutHeader.tsx",[],{"ruleId":"354","replacedBy":"355"},{"ruleId":"356","replacedBy":"357"},{"ruleId":"358","severity":1,"message":"359","line":57,"column":6,"nodeType":"360","endLine":57,"endColumn":8,"suggestions":"361"},{"ruleId":"358","severity":1,"message":"362","line":109,"column":6,"nodeType":"360","endLine":109,"endColumn":21,"suggestions":"363"},{"ruleId":"358","severity":1,"message":"364","line":114,"column":6,"nodeType":"360","endLine":114,"endColumn":16,"suggestions":"365"},{"ruleId":"366","severity":1,"message":"367","line":10,"column":3,"nodeType":"368","messageId":"369","endLine":10,"endColumn":15},{"ruleId":"358","severity":1,"message":"370","line":40,"column":6,"nodeType":"360","endLine":40,"endColumn":8,"suggestions":"371"},{"ruleId":"358","severity":1,"message":"370","line":39,"column":6,"nodeType":"360","endLine":39,"endColumn":8,"suggestions":"372"},{"ruleId":"366","severity":1,"message":"373","line":62,"column":10,"nodeType":"368","messageId":"369","endLine":62,"endColumn":19},{"ruleId":"366","severity":1,"message":"374","line":63,"column":10,"nodeType":"368","messageId":"369","endLine":63,"endColumn":16},{"ruleId":"366","severity":1,"message":"375","line":63,"column":18,"nodeType":"368","messageId":"369","endLine":63,"endColumn":27},{"ruleId":"358","severity":1,"message":"376","line":67,"column":6,"nodeType":"360","endLine":67,"endColumn":13,"suggestions":"377"},{"ruleId":"358","severity":1,"message":"378","line":75,"column":6,"nodeType":"360","endLine":75,"endColumn":34,"suggestions":"379"},{"ruleId":"358","severity":1,"message":"380","line":75,"column":16,"nodeType":"381","endLine":75,"endColumn":33},{"ruleId":"358","severity":1,"message":"382","line":43,"column":6,"nodeType":"360","endLine":43,"endColumn":31,"suggestions":"383"},{"ruleId":"366","severity":1,"message":"384","line":12,"column":27,"nodeType":"368","messageId":"369","endLine":12,"endColumn":37},{"ruleId":"358","severity":1,"message":"385","line":105,"column":6,"nodeType":"360","endLine":105,"endColumn":8,"suggestions":"386"},{"ruleId":"358","severity":1,"message":"364","line":109,"column":6,"nodeType":"360","endLine":109,"endColumn":19,"suggestions":"387"},{"ruleId":"366","severity":1,"message":"388","line":7,"column":10,"nodeType":"368","messageId":"369","endLine":7,"endColumn":23},{"ruleId":"366","severity":1,"message":"389","line":36,"column":9,"nodeType":"368","messageId":"369","endLine":36,"endColumn":17},"no-native-reassign",["390"],"no-negated-in-lhs",["391"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'preloadUserInfo'. Either include it or remove the dependency array.","ArrayExpression",["392"],"React Hook useEffect has missing dependencies: 'channelId', 'channels', 'guilds', 'history', 'loadChannels', and 'type'. Either include them or remove the dependency array.",["393"],"React Hook useEffect has a missing dependency: 'guildId'. Either include it or remove the dependency array.",["394"],"@typescript-eslint/no-unused-vars","'RiSearchLine' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'history' and 'token'. Either include them or remove the dependency array.",["395"],["396"],"'oldHeight' is assigned a value but never used.","'oldTop' is assigned a value but never used.","'setOldTop' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getSendPermission'. Either include it or remove the dependency array.",["397"],"React Hook useEffect has missing dependencies: 'loading' and 'scrollView'. Either include them or remove the dependency array.",["398"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","MemberExpression","React Hook useEffect has missing dependencies: 'MessageStore', 'loadMessages', and 'type'. Either include them or remove the dependency array.",["399"],"'cacheRoles' is defined but never used.","React Hook useEffect has missing dependencies: 'GuildsCache' and 'guildId'. Either include them or remove the dependency array.",["400"],["401"],"'cacheChannels' is defined but never used.","'Messages' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"402","fix":"403"},{"desc":"404","fix":"405"},{"desc":"406","fix":"407"},{"desc":"408","fix":"409"},{"desc":"408","fix":"410"},{"desc":"411","fix":"412"},{"desc":"413","fix":"414"},{"desc":"415","fix":"416"},{"desc":"417","fix":"418"},{"desc":"417","fix":"419"},"Update the dependencies array to be: [preloadUserInfo]",{"range":"420","text":"421"},"Update the dependencies array to be: [channelId, channels, guildId, guilds, history, loadChannels, path, type]",{"range":"422","text":"423"},"Update the dependencies array to be: [channels, guildId]",{"range":"424","text":"425"},"Update the dependencies array to be: [history, token]",{"range":"426","text":"427"},{"range":"428","text":"427"},"Update the dependencies array to be: [Roles, getSendPermission]",{"range":"429","text":"430"},"Update the dependencies array to be: [channel, loading, scrollView]",{"range":"431","text":"432"},"Update the dependencies array to be: [channel, CachedChannels, MessageStore, type, loadMessages]",{"range":"433","text":"434"},"Update the dependencies array to be: [GuildsCache, guildId]",{"range":"435","text":"436"},{"range":"437","text":"436"},[1899,1901],"[preloadUserInfo]",[3419,3434],"[channelId, channels, guildId, guilds, history, loadChannels, path, type]",[3562,3572],"[channels, guildId]",[1095,1097],"[history, token]",[1045,1047],[1957,1964],"[Roles, getSendPermission]",[2076,2104],"[channel, loading, scrollView]",[1477,1502],"[channel, CachedChannels, MessageStore, type, loadMessages]",[2773,2775],"[GuildsCache, guildId]",[2865,2878]]