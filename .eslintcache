[{"/home/miha/Documents/projects/js/nexomia-client/src/index.tsx":"1","/home/miha/Documents/projects/js/nexomia-client/src/views/App.tsx":"2","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Sidebar.tsx":"3","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Content.tsx":"4","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/SidebarHeader.tsx":"5","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/ContentHeader.tsx":"6","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Guilds.tsx":"7","/home/miha/Documents/projects/js/nexomia-client/src/components/guilds/UserMenu.tsx":"8","/home/miha/Documents/projects/js/nexomia-client/src/components/guilds/PanelButton.tsx":"9","/home/miha/Documents/projects/js/nexomia-client/src/views/Login.tsx":"10","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/Layer.tsx":"11","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/Modal.tsx":"12","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/ModalHeader.tsx":"13","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/InputField.tsx":"14","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/FilledButton.tsx":"15","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/StyledText.tsx":"16","/home/miha/Documents/projects/js/nexomia-client/src/views/Register.tsx":"17","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/LoadingPlaceholder.tsx":"18","/home/miha/Documents/projects/js/nexomia-client/src/components/animations/Dots.tsx":"19","/home/miha/Documents/projects/js/nexomia-client/src/i18n/config.ts":"20","/home/miha/Documents/projects/js/nexomia-client/src/services/api/auth/auth.service.ts":"21","/home/miha/Documents/projects/js/nexomia-client/src/services/api/common.ts":"22","/home/miha/Documents/projects/js/nexomia-client/src/config.ts":"23","/home/miha/Documents/projects/js/nexomia-client/src/services/api/users/users.service.ts":"24","/home/miha/Documents/projects/js/nexomia-client/src/services/api/guilds/guilds.service.ts":"25","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Modals.tsx":"26","/home/miha/Documents/projects/js/nexomia-client/src/components/modals/ServerCreationModal.tsx":"27","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/BigPageButton.tsx":"28","/home/miha/Documents/projects/js/nexomia-client/src/components/css/PanelIconCss.tsx":"29","/home/miha/Documents/projects/js/nexomia-client/src/components/css/LayerBackgroundShadeCss.tsx":"30","/home/miha/Documents/projects/js/nexomia-client/src/components/css/InactiveLayerCss.tsx":"31","/home/miha/Documents/projects/js/nexomia-client/src/components/sidebar/Tab.tsx":"32","/home/miha/Documents/projects/js/nexomia-client/src/components/css/StyledIconCss.tsx":"33","/home/miha/Documents/projects/js/nexomia-client/src/store/UserStore.tsx":"34","/home/miha/Documents/projects/js/nexomia-client/src/store/AuthStore.tsx":"35","/home/miha/Documents/projects/js/nexomia-client/src/store/GuildStore.tsx":"36","/home/miha/Documents/projects/js/nexomia-client/src/store/ModalStore.tsx":"37","/home/miha/Documents/projects/js/nexomia-client/src/store/ChannelStore.tsx":"38","/home/miha/Documents/projects/js/nexomia-client/src/services/api/channels/channels.service.ts":"39","/home/miha/Documents/projects/js/nexomia-client/src/components/chat/ChatView.tsx":"40","/home/miha/Documents/projects/js/nexomia-client/src/components/chat/ChatInput.tsx":"41","/home/miha/Documents/projects/js/nexomia-client/src/components/chat/MessageView.tsx":"42","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/CenteredContainer.tsx":"43","/home/miha/Documents/projects/js/nexomia-client/src/services/api/messages/messages.service.ts":"44","/home/miha/Documents/projects/js/nexomia-client/src/store/MessageStore.tsx":"45","/home/miha/Documents/projects/js/nexomia-client/src/store/MessageCacheStore.tsx":"46","/home/miha/Documents/projects/js/nexomia-client/src/store/GuildCacheStore.tsx":"47","/home/miha/Documents/projects/js/nexomia-client/src/store/ChannelCacheStore.tsx":"48","/home/miha/Documents/projects/js/nexomia-client/src/store/UserCacheStore.tsx":"49","/home/miha/Documents/projects/js/nexomia-client/src/components/chat/MessageRenderer.tsx":"50","/home/miha/Documents/projects/js/nexomia-client/src/components/profile/ProfileView.tsx":"51","/home/miha/Documents/projects/js/nexomia-client/src/utils/isTabGuild.ts":"52","/home/miha/Documents/projects/js/nexomia-client/src/store/MemberCacheStore.tsx":"53"},{"size":745,"mtime":1627597352775,"results":"54","hashOfConfig":"55"},{"size":3182,"mtime":1627597740357,"results":"56","hashOfConfig":"55"},{"size":5505,"mtime":1627648759954,"results":"57","hashOfConfig":"55"},{"size":1439,"mtime":1627598047539,"results":"58","hashOfConfig":"55"},{"size":163,"mtime":1627018358125,"results":"59","hashOfConfig":"55"},{"size":1849,"mtime":1627645882540,"results":"60","hashOfConfig":"55"},{"size":2933,"mtime":1627645254904,"results":"61","hashOfConfig":"55"},{"size":2305,"mtime":1627597904237,"results":"62","hashOfConfig":"55"},{"size":430,"mtime":1627384550915,"results":"63","hashOfConfig":"55"},{"size":3243,"mtime":1627596811177,"results":"64","hashOfConfig":"55"},{"size":261,"mtime":1627027947598,"results":"65","hashOfConfig":"55"},{"size":308,"mtime":1627028022731,"results":"66","hashOfConfig":"55"},{"size":277,"mtime":1626934198646,"results":"67","hashOfConfig":"55"},{"size":769,"mtime":1627227991041,"results":"68","hashOfConfig":"55"},{"size":462,"mtime":1627227809580,"results":"69","hashOfConfig":"55"},{"size":252,"mtime":1627214753219,"results":"70","hashOfConfig":"55"},{"size":3967,"mtime":1627596821449,"results":"71","hashOfConfig":"55"},{"size":1554,"mtime":1627018288813,"results":"72","hashOfConfig":"55"},{"size":616,"mtime":1626934226635,"results":"73","hashOfConfig":"55"},{"size":334,"mtime":1626959070191,"results":"74","hashOfConfig":"55"},{"size":688,"mtime":1626955086129,"results":"75","hashOfConfig":"55"},{"size":1650,"mtime":1627458180747,"results":"76","hashOfConfig":"55"},{"size":74,"mtime":1626946161504,"results":"77","hashOfConfig":"55"},{"size":349,"mtime":1627295837712,"results":"78","hashOfConfig":"55"},{"size":1058,"mtime":1627295901306,"results":"79","hashOfConfig":"55"},{"size":391,"mtime":1627389460267,"results":"80","hashOfConfig":"55"},{"size":4606,"mtime":1627297821529,"results":"81","hashOfConfig":"55"},{"size":467,"mtime":1627027430873,"results":"82","hashOfConfig":"55"},{"size":131,"mtime":1627022154493,"results":"83","hashOfConfig":"55"},{"size":83,"mtime":1627028155787,"results":"84","hashOfConfig":"55"},{"size":134,"mtime":1627028396713,"results":"85","hashOfConfig":"55"},{"size":1452,"mtime":1627597822073,"results":"86","hashOfConfig":"55"},{"size":84,"mtime":1627022005885,"results":"87","hashOfConfig":"55"},{"size":619,"mtime":1627209298039,"results":"88","hashOfConfig":"55"},{"size":717,"mtime":1627209298039,"results":"89","hashOfConfig":"55"},{"size":382,"mtime":1627297490390,"results":"90","hashOfConfig":"55"},{"size":379,"mtime":1627389470459,"results":"91","hashOfConfig":"55"},{"size":602,"mtime":1627298171525,"results":"92","hashOfConfig":"55"},{"size":380,"mtime":1627216994941,"results":"93","hashOfConfig":"55"},{"size":772,"mtime":1627390283903,"results":"94","hashOfConfig":"55"},{"size":2733,"mtime":1627305145535,"results":"95","hashOfConfig":"55"},{"size":2684,"mtime":1627634320953,"results":"96","hashOfConfig":"55"},{"size":160,"mtime":1627243655376,"results":"97","hashOfConfig":"55"},{"size":657,"mtime":1627290434544,"results":"98","hashOfConfig":"55"},{"size":904,"mtime":1627292532078,"results":"99","hashOfConfig":"55"},{"size":587,"mtime":1627293744780,"results":"100","hashOfConfig":"55"},{"size":549,"mtime":1627296796116,"results":"101","hashOfConfig":"55"},{"size":587,"mtime":1627298548333,"results":"102","hashOfConfig":"55"},{"size":530,"mtime":1627633335957,"results":"103","hashOfConfig":"55"},{"size":2532,"mtime":1627647347408,"results":"104","hashOfConfig":"55"},{"size":3418,"mtime":1627648220780,"results":"105","hashOfConfig":"55"},{"size":74,"mtime":1627645846682,"results":"106","hashOfConfig":"55"},{"size":593,"mtime":1627633613683,"results":"107","hashOfConfig":"55"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},"9q8v7z",{"filePath":"111","messages":"112","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"110"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"110"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"110"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"110"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"110"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"110"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"110"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"110"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"110"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"110"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"110"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"110"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"110"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"222","messages":"223","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"110"},"/home/miha/Documents/projects/js/nexomia-client/src/index.tsx",[],["229","230"],"/home/miha/Documents/projects/js/nexomia-client/src/views/App.tsx",["231","232","233"],"import {\n  Switch,\n  Route,\n  useRouteMatch,\n  useHistory,\n  useParams\n} from 'react-router-dom';\n\nimport { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { useStore } from 'effector-react';\nimport $AuthStore, { setToken } from '../store/AuthStore';\nimport { setUser } from '../store/UserStore';\nimport { setGuilds } from '../store/GuildStore';\nimport { cacheGuilds } from '../store/GuildCacheStore';\n\nimport UsersService from '../services/api/users/users.service';\nimport GuildsService from '../services/api/guilds/guilds.service';\nimport CommonRequestManager from '../services/api/common';\n\nimport '../i18n/config';\n\nimport '../styles/App.css';\n\nimport Guilds from '../components/layout/Guilds';\nimport Sidebar from '../components/layout/Sidebar';\nimport Content from '../components/layout/Content';\nimport LoadingPlaceholder from '../components/ui/LoadingPlaceholder';\nimport Modals from '../components/layout/Modals';\n\nimport preloaders from '../i18n/preloaders.json';\nimport Guild from '../store/models/Guild';\n\nfunction App() {\n  const { t } = useTranslation(['states']);\n\n  const { token } = useStore($AuthStore);\n\n  const match = useRouteMatch();\n  const history = useHistory();\n\n  const [loaded, setLoaded] = useState(false);\n\n  const [loaderTitleAuthor, setLoaderTitleAuthor] = useState(0);\n  const [loaderTitleId, setLoaderTitleId] = useState(0);\n\n  useEffect(() => {\n    const authorId = getRandomInt(preloaders.authors.length)\n    setLoaderTitleAuthor(authorId);\n    setLoaderTitleId(preloaders.authors[authorId].prefix + getRandomInt(preloaders.authors[authorId].count));\n\n    preloadUserInfo();\n  }, []);\n\n  return (\n    <div className=\"App dark-theme\">\n      <LoadingPlaceholder\n        title={ t(`states:loading.${loaderTitleId.toString()}`) }\n        subtext={ `@${preloaders.authors[loaderTitleAuthor].name}` }\n        active={ !loaded }\n        solid={ true }\n      />\n      <Switch>\n        <Route path={`/channels/:guildId/:channelId`}>\n          <Modals />\n          <Guilds />\n          <Sidebar />\n          <Content />\n          <Sidebar type=\"members\" />\n        </Route>\n\n        <Route path={`/channels/:guildId`}>\n          <Modals />\n          <Guilds />\n          <Sidebar />\n          <Content />\n          <Sidebar type=\"members\" />\n        </Route>\n\n        <Route path={`/:path/:guildId`}>\n          <Modals />\n          <Guilds />\n          <Sidebar />\n          <Content />\n        </Route>\n\n        <Route path={`/:path`}>\n          <Modals />\n          <Guilds />\n          <Sidebar />\n          <Content />\n        </Route>\n      </Switch>\n    </div>\n  );\n\n  async function preloadUserInfo() {\n    CommonRequestManager.setToken(token);\n    const userInfo = await UsersService.getUser('@me');\n    if (!userInfo) {\n      setToken('');\n      history.push('/login');\n      return;\n    }\n\n    const guilds = await GuildsService.getUserGuilds();\n\n    setUser(userInfo);\n    setGuilds(guilds.map((guild: Guild) => guild.id));\n    cacheGuilds(guilds);\n\n    setLoaded(true);\n  }\n}\n\nfunction getRandomInt(max: number): number {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nexport default App;\n\n","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Sidebar.tsx",["234","235","236","237","238"],"/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Content.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/layout/SidebarHeader.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/layout/ContentHeader.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Guilds.tsx",["239"],"/home/miha/Documents/projects/js/nexomia-client/src/components/guilds/UserMenu.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/guilds/PanelButton.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/views/Login.tsx",["240"],"import { css } from 'linaria';\n\nimport { useState, useRef, useEffect } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\n\nimport { useTranslation } from 'react-i18next';\n\nimport { useStore } from 'effector-react';\nimport $AuthStore, { setToken, setRefreshToken } from '../store/AuthStore';\n\nimport AuthService from '../services/api/auth/auth.service';\n\nimport '../styles/App.css';\n\nimport Layer from '../components/ui/Layer';\nimport Modal from '../components/ui/Modal';\nimport ModalHeader from '../components/ui/ModalHeader';\nimport InputField from '../components/ui/InputField';\nimport FilledButton from '../components/ui/FilledButton';\nimport StyledText from '../components/ui/StyledText';\nimport LoadingPlaceholder from '../components/ui/LoadingPlaceholder';\n\nconst modalCss = css`\n  width: 440px;\n`\n\nconst negativeColorCss = css`\n  color: var(--text-negative);\n`\n\nfunction Login() {\n  const { token } = useStore($AuthStore);\n  const history = useHistory();\n\n  useEffect(() => {\n    console.log(token)\n    if (token && token !== '') {\n      history.push('/home');\n    }\n  }, []);\n\n  const { t } = useTranslation(['reg']);\n\n  const [loginLoading, setLoginLoading] = useState(false);\n  const [emailError, setEmailError] = useState(false);\n  const [passwordError, setPasswordError] = useState(false);\n  const [loginError, setLoginError] = useState(false);\n\n  const emailInput = useRef<HTMLInputElement>(null);\n  const passwordInput = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    console.log(emailInput);\n  }, []);\n\n  return (\n    <div className=\"Login dark-theme\">\n      <Layer>\n        <Modal className={ modalCss }>\n          <LoadingPlaceholder title={ t('reg:logging_in') } active={ loginLoading } />\n          <ModalHeader>{ t('reg:log_in') }<br /><StyledText>{ t('reg:welcomer_log_in') }</StyledText></ModalHeader>\n          <InputField placeholder=\"Email\" ref={ emailInput } />\n          { (emailError && <StyledText className={ negativeColorCss }>{ t('reg:errors.required_field') }</StyledText>) }\n          <InputField placeholder={ t('reg:fields.password') } type=\"password\" hidden={ true } ref={ passwordInput } />\n          { (passwordError && <StyledText className={ negativeColorCss }>{ t('reg:errors.required_field') }</StyledText>) }\n          { (loginError && <StyledText className={ negativeColorCss }>{ t('reg:errors.invalid_credentials') }</StyledText>) }\n          <StyledText>{ t('reg:no_account') } <Link to=\"/register\">{ t('reg:register') }</Link></StyledText>\n          <FilledButton onClick={ login }>{ t('reg:continue') }</FilledButton>\n        </Modal>\n      </Layer>\n    </div>\n  );\n\n  async function login() {\n    setLoginError(false);\n    setEmailError(!emailInput.current?.value);\n    setPasswordError(!passwordInput.current?.value);\n\n    if (!emailInput.current?.value || !passwordInput.current?.value) return;\n\n    setLoginLoading(true);\n\n    const response = await AuthService.login(emailInput.current?.value, passwordInput.current?.value);\n\n    setLoginLoading(false);\n\n    if (!response) {\n      setLoginError(true);\n      return;\n    }\n\n    setToken(response.access_token);\n    setRefreshToken(response.refresh_token);\n\n    history.push('/home');\n  }\n}\n\nexport default Login;\n","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/Layer.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/ui/Modal.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/ui/ModalHeader.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/ui/InputField.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/ui/FilledButton.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/ui/StyledText.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/views/Register.tsx",["241","242"],"import { css } from 'linaria';\n\nimport { useState, Fragment, useRef, useEffect } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\n\nimport { useTranslation } from 'react-i18next';\n\nimport { useStore } from 'effector-react';\nimport $AuthStore from '../store/AuthStore';\n\nimport AuthService from '../services/api/auth/auth.service';\n\nimport '../styles/App.css';\n\nimport Layer from '../components/ui/Layer';\nimport Modal from '../components/ui/Modal';\nimport ModalHeader from '../components/ui/ModalHeader';\nimport InputField from '../components/ui/InputField';\nimport FilledButton from '../components/ui/FilledButton';\nimport StyledText from '../components/ui/StyledText';\nimport LoadingPlaceholder from '../components/ui/LoadingPlaceholder';\n\nconst modalCss = css`\n  width: 440px\n`\n\nconst negativeColorCss = css`\n  color: var(--text-negative);\n`\n\nfunction Register() {\n  const { token } = useStore($AuthStore);\n  const history = useHistory();\n\n  useEffect(() => {\n    if (token) {\n      history.push('/channels/@me');\n    }\n  }, []);\n\n  const { t } = useTranslation(['reg']);\n\n  const [registerLoading, setRegisterLoading] = useState(false);\n  const [registerState, setRegisterState] = useState(0);\n  const [placeholderText, setPlaceholderText] = useState(0);\n  const [emailError, setEmailError] = useState(false);\n  const [usernameError, setUsernameError] = useState(false);\n  const [passwordError, setPasswordError] = useState(false);\n\n  const emailInput = useRef<HTMLInputElement>(null);\n  const usernameInput = useRef<HTMLInputElement>(null);\n  const passwordInput = useRef<HTMLInputElement>(null);\n\n  return (\n    <div className=\"Login dark-theme\">\n      <Layer>\n        <Modal className={ modalCss }>\n          <LoadingPlaceholder title={ (placeholderText === 0 && 'Creating your account...') || 'Almost there...' } active={ registerLoading } />\n\n          { registerState === 0 && (\n            <Fragment>\n              <ModalHeader>{ t('reg:register') }<br /><StyledText>{ t('reg:welcomer_register') }</StyledText></ModalHeader>\n              <InputField placeholder=\"Email\" ref={ emailInput } />\n              { (emailError && <StyledText className={ negativeColorCss }>{ t('reg:errors.required_field') }</StyledText>) }\n              <InputField placeholder={ t('reg:fields.username') } ref={ usernameInput } />\n              { (usernameError && <StyledText className={ negativeColorCss }>{ t('reg:errors.required_field') }</StyledText>) }\n              <InputField placeholder={ t('reg:fields.password') } type=\"password\" ref={ passwordInput } hidden={ true } />\n              { (passwordError && <StyledText className={ negativeColorCss }>{ t('reg:errors.required_field') }</StyledText>) }\n              <StyledText>{ t('reg:has_account') } <Link to=\"/login\">{ t('reg:log_in') }</Link></StyledText>\n              <FilledButton onClick={ register }>{ t('reg:continue') }</FilledButton>\n            </Fragment>\n          ) }\n\n          { registerState === 1 && (\n            <Fragment>\n              <ModalHeader>{ t('reg:account_created') }<br /><StyledText>{ t('reg:account_log_in') }</StyledText></ModalHeader>\n              <FilledButton onClick={ login }>{ t('reg:continue') }</FilledButton>\n            </Fragment>\n          ) }\n        </Modal>\n      </Layer>\n    </div>\n  );\n\n  async function register() {\n    setEmailError(!emailInput.current?.value);\n    setUsernameError(!usernameInput.current?.value);\n    setPasswordError(!passwordInput.current?.value);\n\n    if (!emailInput.current?.value || !usernameInput.current?.value || !passwordInput.current?.value) return;\n\n    setRegisterLoading(true);\n\n    const response = await AuthService.register(\n      emailInput.current?.value,\n      usernameInput.current?.value,\n      passwordInput.current?.value\n    );\n\n    if (!response) return;\n\n    setRegisterLoading(false);\n    setRegisterState(1);\n  }\n\n  function login() {\n    history.push('/login');\n  }\n}\n\nexport default Register;\n","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/LoadingPlaceholder.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/animations/Dots.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/i18n/config.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/services/api/auth/auth.service.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/services/api/common.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/config.ts",["243"],"export default {\n  api: {\n    endpoint: 'http://127.0.0.1:7081/api'\n  }\n}\n","/home/miha/Documents/projects/js/nexomia-client/src/services/api/users/users.service.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/services/api/guilds/guilds.service.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Modals.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/modals/ServerCreationModal.tsx",["244","245"],"import { css } from 'linaria';\nimport classNames from 'classnames';\nimport { useState, useRef, Fragment, useEffect } from 'react';\n\nimport { useStore } from 'effector-react';\nimport $ModalStore, { setModalState } from '../../store/ModalStore';\nimport { addGuild } from '../../store/GuildStore';\nimport { cacheGuilds } from '../../store/GuildCacheStore';\n\nimport GuildsService from '../../services/api/guilds/guilds.service';\n\nimport Layer from '../ui/Layer';\nimport LayerBackgroundShadeCss from '../css/LayerBackgroundShadeCss';\nimport InactiveLayerCss from '../css/InactiveLayerCss';\nimport Modal from '../ui/Modal';\nimport ModalHeader from '../ui/ModalHeader';\nimport StyledText from '../ui/StyledText';\nimport BigPageButton from '../ui/BigPageButton';\nimport InputField from '../ui/InputField';\nimport FilledButton from '../ui/FilledButton';\nimport LoadingPlaceholder from '../ui/LoadingPlaceholder';\n\ninterface ServerCreationModalProps {\n  active: boolean\n}\n\nconst negativeColorCss = css`\n  color: var(--text-negative);\n`\n\nfunction ServerCreationModal({ active }: ServerCreationModalProps) {\n  const layerRef = useRef(null);\n\n  const [modalPage, setModalPage] = useState(0);\n  const [nameValue, setNameValue] = useState('');\n  const [inviteValue, setInviteValue] = useState('');\n\n  const [joinError, setJoinError] = useState(false);\n  const [createError, setCreateError] = useState(false);\n\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (active) {\n      setModalPage(0);\n      setJoinError(false);\n      setCreateError(false);\n      setNameValue('');\n      setInviteValue('');\n    }\n  }, [active]);\n\n  return (\n    <Layer className={ classNames({ [LayerBackgroundShadeCss]: true, [InactiveLayerCss]: !active }) } onClick={ (event) => { closeModal(event) } } ref={ layerRef }>\n      <Modal className={ css`width: 440px` }>\n        <LoadingPlaceholder title={ (modalPage === 1 && 'Creating your server...') || 'Joining server...' } active={ loading } />\n        { modalPage === 0 && (\n          <Fragment>\n            <ModalHeader>Join or create a server<br /><StyledText>Talk with friends in your private space or create a public community!</StyledText></ModalHeader>\n            <BigPageButton onClick={ () => setModalPage(1) }>Create a server</BigPageButton>\n            <BigPageButton onClick={ () => setModalPage(2) }>Join a server</BigPageButton>\n          </Fragment>\n        ) }\n\n        { modalPage === 1 && (\n          <Fragment>\n            <ModalHeader>Name your server</ModalHeader>\n            <InputField placeholder=\"Server Name\" onChange={ (event) => { setNameValue(event.target.value) } } />\n            { (createError && <StyledText className={ negativeColorCss }>Failed to create server.</StyledText>) }\n            <FilledButton onClick={ createServer }>Create</FilledButton>\n          </Fragment>\n        ) }\n\n        { modalPage === 2 && (\n          <Fragment>\n            <ModalHeader>Enter your invite</ModalHeader>\n            <InputField placeholder=\"Invite Code\" onChange={ (event) => { setInviteValue(event.target.value) } } />\n            { (joinError && <StyledText className={ negativeColorCss }>Failed to join this server. Invite code is invalid or you have been banned from that server.</StyledText>) }\n            <FilledButton onClick={ joinServer }>Join</FilledButton>\n          </Fragment>\n        ) }\n      </Modal>\n    </Layer>\n  );\n\n  // TODO: что-то сделать с этим пиздецом в типах\n  function closeModal(event: any) {\n    if (event.target !== layerRef.current) return;\n    setModalState({ serverCreation: false });\n  }\n\n  async function createServer() {\n    setLoading(true);\n    const response = await GuildsService.createGuild(nameValue);\n    if (!response) {\n      setCreateError(true);\n      setLoading(false);\n      return;\n    }\n\n    const { id, name } = response;\n\n    cacheGuilds([{\n      id,\n      name,\n      icon: response.icon || ''\n    }]);\n    addGuild(id);\n\n    setLoading(false);\n    setNameValue('');\n    setInviteValue('');\n    setModalState({ serverCreation: false });\n  }\n\n  async function joinServer() {\n    setLoading(true);\n    const response = await GuildsService.joinGuild(inviteValue);\n    if (!response) {\n      setJoinError(true);\n      setLoading(false);\n      return;\n    }\n\n    const { id, name } = response;\n\n    cacheGuilds([{\n      id,\n      name,\n      icon: response.icon || ''\n    }]);\n    addGuild(id);\n\n    setLoading(false);\n    setNameValue('');\n    setInviteValue('');\n    setModalState({ serverCreation: false });\n  }\n}\n\nexport default ServerCreationModal;\n","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/BigPageButton.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/css/PanelIconCss.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/css/LayerBackgroundShadeCss.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/css/InactiveLayerCss.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/sidebar/Tab.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/css/StyledIconCss.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/UserStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/AuthStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/GuildStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/ModalStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/ChannelStore.tsx",["246","247"],"import { createStore, createEvent } from 'effector-root';\nimport Channel from './models/Channel';\n\nconst setGuildChannels = createEvent<GuildChannelsInfo>();\n\ninterface GuildChannelsInfo {\n  guild: string,\n  channels: string[]\n}\n\ninterface GuildChannelPath {\n  guild: string,\n  channel: string\n}\n\ninterface GuildChannels {\n  [key: string]: string[]\n}\n\nconst $ChannelStore = createStore<GuildChannels>({});\n\n$ChannelStore\n  .on(setGuildChannels, (state: GuildChannels, info: GuildChannelsInfo) => ({ ...state, [info.guild]: info.channels }));\n\nexport default $ChannelStore;\nexport { setGuildChannels };\n","/home/miha/Documents/projects/js/nexomia-client/src/services/api/channels/channels.service.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/chat/ChatView.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/chat/ChatInput.tsx",["248"],"import { styled } from 'linaria/react';\nimport { css } from 'linaria';\nimport classNames from 'classnames';\nimport { useRef, useState } from 'react';\nimport { RiAddCircleFill, RiEmotionLaughFill, RiSendPlane2Fill } from 'react-icons/ri';\n\nimport { addMessage } from '../../store/MessageStore';\nimport { cacheMessages } from '../../store/MessageCacheStore';\n\nimport StyledIconCss from '../css/StyledIconCss';\nimport Dots from '../animations/Dots';\n\nimport MessagesService from '../../services/api/messages/messages.service';\n\nconst Container = styled.div`\n  display: flex;\n  margin: 16px;\n  border-radius: 8px;\n  background: var(--background-primary-alt);\n  height: 48px;\n  flex-direction: row;\n`\n\nconst InputButton = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 46px;\n  height: 40px;\n  padding: 8px 11px;\n  margin: 4px;\n  border-radius: 6px;\n  cursor: pointer;\n  transition: .2s;\n\n  &:hover {\n    background: var(--background-light);\n  }\n  &:active, &.active {\n    transform: scale(0.93);\n  }\n  &.active {\n    opacity: .5;\n  }\n`\n\nconst InputIconCss = css`\n  width: 24px;\n  height: 24px;\n`\n\nconst Input = styled.input`\n  display: flex;\n  flex-grow: 1;\n  outline: none;\n  background: transparent;\n  border: 0px;\n  font-weight: 400;\n  font-size: 16px;\n  color: var(--text-primary);\n  &::placeholder {\n    color: var(--text-secondary);\n    user-select: none;\n  }\n`\n\ninterface ChatInputProps {\n  channel: string\n}\n\nfunction ChatInput({ channel }: ChatInputProps) {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [sendLoading, setSendLoading] = useState(false);\n\n  return (\n    <Container>\n      <InputButton>\n        <RiAddCircleFill className={ classNames({ [StyledIconCss]: true, [InputIconCss]: true }) } />\n      </InputButton>\n      <Input placeholder=\"Type something here...\" ref={ inputRef } />\n      <InputButton className={ css`margin-right: 0` }>\n        <RiEmotionLaughFill className={ classNames({ [StyledIconCss]: true, [InputIconCss]: true }) } />\n      </InputButton>\n      <InputButton onClick={ sendMessage } className={ classNames({ active: sendLoading }) } >\n        <RiSendPlane2Fill className={ classNames({ [StyledIconCss]: true, [InputIconCss]: true }) } />\n      </InputButton>\n    </Container>\n  );\n\n  async function sendMessage() {\n    if (sendLoading) return;\n\n    setSendLoading(true);\n    const content = inputRef.current?.value;\n    if (inputRef.current) inputRef.current.value = '';\n    const response = await MessagesService.sendMessage(channel, content || '');\n\n    if (!response) return setSendLoading(false);\n\n    cacheMessages([response]);\n    addMessage({ channel: response.channel_id, message: response.id });\n\n    setSendLoading(false);\n  }\n}\n\nexport default ChatInput;\n","/home/miha/Documents/projects/js/nexomia-client/src/components/chat/MessageView.tsx",["249"],"import { Fragment, useEffect, useState } from 'react';\nimport { css } from 'linaria';\nimport Dots from '../animations/Dots';\nimport CenteredContainer from '../layout/CenteredContainer';\nimport MessageRenderer from './MessageRenderer';\n\nimport { useStore } from 'effector-react';\nimport $MessageStore, { setChannelMessages } from '../../store/MessageStore';\nimport $ChannelCacheStore from '../../store/ChannelCacheStore';\nimport $MessageCacheStore, { cacheMessages } from '../../store/MessageCacheStore';\nimport { cacheUsers } from '../../store/UserCacheStore';\nimport { cacheMembers } from '../../store/MemberCacheStore';\nimport MessagesService from '../../services/api/messages/messages.service';\nimport GuildsService from '../../services/api/guilds/guilds.service';\nimport Message from '../../store/models/Message';\n\ninterface MessageViewProps {\n  channel: string\n}\n\nfunction MessageView({ channel }: MessageViewProps) {\n  const [loading, setLoading] = useState(false);\n  const MessageStore = useStore($MessageStore);\n  const MessageCacheStore = useStore($MessageCacheStore);\n  const CachedChannels = useStore($ChannelCacheStore);\n\n  let prevMessage = '';\n\n  useEffect(() => {\n    if (!MessageStore[channel] || !MessageStore[channel].length) {\n      setLoading(true);\n      loadMessages();\n      return;\n    }\n  }, [channel]);\n\n  return (\n    <Fragment>\n      { loading ? (\n        <CenteredContainer className={ css`margin-bottom: 64px` }>\n          <Dots />\n        </CenteredContainer>\n      ) : (\n        MessageStore[channel] && MessageStore[channel].length && (\n          MessageStore[channel].map((message) => {\n            const rendered =  (\n              <MessageRenderer\n                id={ message }\n                key={ message }\n                grouped={ MessageCacheStore[prevMessage]?.author === MessageCacheStore[message]?.author }\n              />\n            );\n\n            prevMessage = message;\n            return rendered;\n          })\n        )\n      ) }\n    </Fragment>\n  )\n\n  async function loadMessages() {\n    const response = await MessagesService.getChannelMessages(channel);\n    if (!response) return setLoading(false);\n    \n    const membersResponse = await GuildsService.getGuildMembers(CachedChannels[channel].guild_id || '');\n\n    cacheUsers([...membersResponse].map((member: any) => member.user));\n    cacheMembers([...membersResponse].map((member: any) => {\n      delete member.user;\n      return { ...member, guild: CachedChannels[channel].guild_id }\n    }));\n    cacheMessages(response);\n    setChannelMessages({ channel, messages: response.map((message: Message) => message.id) });\n    setLoading(false);\n  }\n}\n\nexport default MessageView;\n","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/CenteredContainer.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/services/api/messages/messages.service.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/MessageStore.tsx",["250"],"import { createStore, createEvent } from 'effector-root';\n\nimport Message from './models/Message';\n\nconst setChannelMessages = createEvent<ChannelMessagesInfo>();\nconst addMessage = createEvent<ChannelMessageInfo>();\n\ninterface ChannelMessagesInfo {\n  channel: string,\n  messages: string[]\n}\n\ninterface ChannelMessageInfo {\n  channel: string,\n  message: string\n}\n\ninterface ChannelMessages {\n  [key: string]: string[]\n}\n\nconst $MessageStore = createStore<ChannelMessages>({});\n\n$MessageStore\n  .on(setChannelMessages, (state: ChannelMessages, info: ChannelMessagesInfo) => ({ ...state, [info.channel]: info.messages }))\n  .on(addMessage, (state: ChannelMessages, info: ChannelMessageInfo) => (\n    {\n      ...state,\n      [info.channel]: state[info.channel] ? state[info.channel].concat(info.message) : [info.message]\n    }\n  ));\n\nexport default $MessageStore;\nexport { setChannelMessages, addMessage };\n","/home/miha/Documents/projects/js/nexomia-client/src/store/MessageCacheStore.tsx",["251"],"import { createStore, createEvent } from 'effector-root';\n\nimport Message from './models/Message';\n\nconst cacheMessages = createEvent<Message[]>();\n\ninterface MessageCache {\n  [key: string]: Message\n}\n\nconst $MessageCacheStore = createStore<MessageCache>({});\n\n$MessageCacheStore\n  .on(cacheMessages, (state: MessageCache, messages: Message[]) => {\n    let modifiedState = { ...state };\n    messages.map((message) => {\n      modifiedState = { ...modifiedState, [message.id]: message };\n    });\n    return modifiedState;\n  })\n\nexport default $MessageCacheStore;\nexport { cacheMessages };\n","/home/miha/Documents/projects/js/nexomia-client/src/store/GuildCacheStore.tsx",["252"],"import { createStore, createEvent } from 'effector-root';\n\nimport Guild from './models/Guild';\n\nconst cacheGuilds = createEvent<Guild[]>();\n\ninterface GuildCache {\n  [key: string]: Guild\n}\n\nconst $GuildCacheStore = createStore<GuildCache>({});\n\n$GuildCacheStore\n  .on(cacheGuilds, (state: GuildCache, guilds: Guild[]) => {\n    let modifiedState = { ...state };\n    guilds.map((guild) => {\n      modifiedState = { ...modifiedState, [guild.id]: guild };\n    });\n    return modifiedState;\n  })\n\nexport default $GuildCacheStore;\nexport { cacheGuilds };\n","/home/miha/Documents/projects/js/nexomia-client/src/store/ChannelCacheStore.tsx",["253"],"import { createStore, createEvent } from 'effector-root';\n\nimport Channel from './models/Channel';\n\nconst cacheChannels = createEvent<Channel[]>();\n\ninterface ChannelCache {\n  [key: string]: Channel\n}\n\nconst $ChannelCacheStore = createStore<ChannelCache>({});\n\n$ChannelCacheStore\n  .on(cacheChannels, (state: ChannelCache, channels: Channel[]) => {\n    let modifiedState = { ...state };\n    channels.map((channel) => {\n      modifiedState = { ...modifiedState, [channel.id]: channel };\n    });\n    return modifiedState;\n  })\n\nexport default $ChannelCacheStore;\nexport { cacheChannels };\n","/home/miha/Documents/projects/js/nexomia-client/src/store/UserCacheStore.tsx",["254"],"import { createStore, createEvent } from 'effector-root';\n\nimport User from './models/User';\n\nconst cacheUsers = createEvent<User[]>();\n\ninterface UserCache {\n  [key: string]: User\n}\n\nconst $UserCacheStore = createStore<UserCache>({});\n\n$UserCacheStore\n  .on(cacheUsers, (state: UserCache, users: User[]) => {\n    let modifiedState = { ...state };\n    users.map((user) => {\n      modifiedState = { ...modifiedState, [user.id]: user };\n    });\n    return modifiedState;\n  })\n\nexport default $UserCacheStore;\nexport { cacheUsers };\n","/home/miha/Documents/projects/js/nexomia-client/src/components/chat/MessageRenderer.tsx",["255"],"/home/miha/Documents/projects/js/nexomia-client/src/components/profile/ProfileView.tsx",["256","257"],"/home/miha/Documents/projects/js/nexomia-client/src/utils/isTabGuild.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/MemberCacheStore.tsx",["258"],"import { createStore, createEvent } from 'effector-root';\n\nimport GuildMember from './models/GuildMember';\n\nconst cacheMembers = createEvent<GuildMember[]>();\n\ninterface MemberCache {\n  [key: string]: GuildMember\n}\n\nconst $MemberCacheStore = createStore<MemberCache>({});\n\n$MemberCacheStore\n  .on(cacheMembers, (state: MemberCache, members: GuildMember[]) => {\n    let modifiedState = { ...state };\n    members.map((member) => {\n      modifiedState = { ...modifiedState, [member.id]: member };\n    });\n    return modifiedState;\n  })\n\nexport default $MemberCacheStore;\nexport { cacheMembers };\n",{"ruleId":"259","replacedBy":"260"},{"ruleId":"261","replacedBy":"262"},{"ruleId":"263","severity":1,"message":"264","line":6,"column":3,"nodeType":"265","messageId":"266","endLine":6,"endColumn":12},{"ruleId":"263","severity":1,"message":"267","line":40,"column":9,"nodeType":"265","messageId":"266","endLine":40,"endColumn":14},{"ruleId":"268","severity":1,"message":"269","line":54,"column":6,"nodeType":"270","endLine":54,"endColumn":8,"suggestions":"271"},{"ruleId":"263","severity":1,"message":"272","line":7,"column":8,"nodeType":"265","messageId":"266","endLine":7,"endColumn":19},{"ruleId":"263","severity":1,"message":"273","line":15,"column":3,"nodeType":"265","messageId":"266","endLine":15,"endColumn":19},{"ruleId":"263","severity":1,"message":"274","line":27,"column":8,"nodeType":"265","messageId":"266","endLine":27,"endColumn":18},{"ruleId":"263","severity":1,"message":"275","line":68,"column":26,"nodeType":"265","messageId":"266","endLine":68,"endColumn":35},{"ruleId":"268","severity":1,"message":"276","line":90,"column":6,"nodeType":"270","endLine":90,"endColumn":15,"suggestions":"277"},{"ruleId":"263","severity":1,"message":"278","line":60,"column":9,"nodeType":"265","messageId":"266","endLine":60,"endColumn":15},{"ruleId":"268","severity":1,"message":"279","line":40,"column":6,"nodeType":"270","endLine":40,"endColumn":8,"suggestions":"280"},{"ruleId":"268","severity":1,"message":"279","line":39,"column":6,"nodeType":"270","endLine":39,"endColumn":8,"suggestions":"281"},{"ruleId":"263","severity":1,"message":"282","line":45,"column":27,"nodeType":"265","messageId":"266","endLine":45,"endColumn":45},{"ruleId":"283","severity":1,"message":"284","line":1,"column":1,"nodeType":"285","endLine":5,"endColumn":2},{"ruleId":"263","severity":1,"message":"286","line":5,"column":10,"nodeType":"265","messageId":"266","endLine":5,"endColumn":18},{"ruleId":"263","severity":1,"message":"287","line":6,"column":8,"nodeType":"265","messageId":"266","endLine":6,"endColumn":19},{"ruleId":"263","severity":1,"message":"288","line":2,"column":8,"nodeType":"265","messageId":"266","endLine":2,"endColumn":15},{"ruleId":"263","severity":1,"message":"289","line":11,"column":11,"nodeType":"265","messageId":"266","endLine":11,"endColumn":27},{"ruleId":"263","severity":1,"message":"290","line":11,"column":8,"nodeType":"265","messageId":"266","endLine":11,"endColumn":12},{"ruleId":"268","severity":1,"message":"291","line":35,"column":6,"nodeType":"270","endLine":35,"endColumn":15,"suggestions":"292"},{"ruleId":"263","severity":1,"message":"293","line":3,"column":8,"nodeType":"265","messageId":"266","endLine":3,"endColumn":15},{"ruleId":"294","severity":1,"message":"295","line":16,"column":28,"nodeType":"296","messageId":"297","endLine":16,"endColumn":30},{"ruleId":"294","severity":1,"message":"295","line":16,"column":24,"nodeType":"296","messageId":"297","endLine":16,"endColumn":26},{"ruleId":"294","severity":1,"message":"295","line":16,"column":28,"nodeType":"296","messageId":"297","endLine":16,"endColumn":30},{"ruleId":"294","severity":1,"message":"295","line":16,"column":22,"nodeType":"296","messageId":"297","endLine":16,"endColumn":24},{"ruleId":"263","severity":1,"message":"298","line":9,"column":10,"nodeType":"265","messageId":"266","endLine":9,"endColumn":23},{"ruleId":"263","severity":1,"message":"299","line":5,"column":20,"nodeType":"265","messageId":"266","endLine":5,"endColumn":29},{"ruleId":"263","severity":1,"message":"290","line":9,"column":8,"nodeType":"265","messageId":"266","endLine":9,"endColumn":12},{"ruleId":"294","severity":1,"message":"295","line":16,"column":26,"nodeType":"296","messageId":"297","endLine":16,"endColumn":28},"no-native-reassign",["300"],"no-negated-in-lhs",["301"],"@typescript-eslint/no-unused-vars","'useParams' is defined but never used.","Identifier","unusedVar","'match' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'preloadUserInfo'. Either include it or remove the dependency array.","ArrayExpression",["302"],"'$GuildStore' is defined but never used.","'RiVolumeDownFill' is defined but never used.","'classNames' is defined but never used.","'channelId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'channels', 'guildChannels.length', 'loadChannels', and 'type'. Either include them or remove the dependency array.",["303"],"'modals' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history' and 'token'. Either include them or remove the dependency array.",["304"],["305"],"'setPlaceholderText' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'useStore' is defined but never used.","'$ModalStore' is defined but never used.","'Channel' is defined but never used.","'GuildChannelPath' is defined but never used.","'Dots' is defined but never used.","React Hook useEffect has missing dependencies: 'MessageStore' and 'loadMessages'. Either include them or remove the dependency array.",["306"],"'Message' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'setModalState' is defined but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"307","fix":"308"},{"desc":"309","fix":"310"},{"desc":"311","fix":"312"},{"desc":"311","fix":"313"},{"desc":"314","fix":"315"},"Update the dependencies array to be: [preloadUserInfo]",{"range":"316","text":"317"},"Update the dependencies array to be: [channels, guildChannels.length, guildId, loadChannels, type]",{"range":"318","text":"319"},"Update the dependencies array to be: [history, token]",{"range":"320","text":"321"},{"range":"322","text":"321"},"Update the dependencies array to be: [MessageStore, channel, loadMessages]",{"range":"323","text":"324"},[1660,1662],"[preloadUserInfo]",[2359,2368],"[channels, guildChannels.length, guildId, loadChannels, type]",[1095,1097],"[history, token]",[1045,1047],[1317,1326],"[MessageStore, channel, loadMessages]"]