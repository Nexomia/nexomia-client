[{"/home/miha/Documents/projects/js/nexomia-client/src/index.tsx":"1","/home/miha/Documents/projects/js/nexomia-client/src/views/App.tsx":"2","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Sidebar.tsx":"3","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Content.tsx":"4","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/SidebarHeader.tsx":"5","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/ContentHeader.tsx":"6","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Guilds.tsx":"7","/home/miha/Documents/projects/js/nexomia-client/src/components/guilds/UserMenu.tsx":"8","/home/miha/Documents/projects/js/nexomia-client/src/components/guilds/PanelButton.tsx":"9","/home/miha/Documents/projects/js/nexomia-client/src/views/Login.tsx":"10","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/Layer.tsx":"11","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/Modal.tsx":"12","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/ModalHeader.tsx":"13","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/InputField.tsx":"14","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/FilledButton.tsx":"15","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/StyledText.tsx":"16","/home/miha/Documents/projects/js/nexomia-client/src/views/Register.tsx":"17","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/LoadingPlaceholder.tsx":"18","/home/miha/Documents/projects/js/nexomia-client/src/components/animations/Dots.tsx":"19","/home/miha/Documents/projects/js/nexomia-client/src/i18n/config.ts":"20","/home/miha/Documents/projects/js/nexomia-client/src/services/api/auth/auth.service.ts":"21","/home/miha/Documents/projects/js/nexomia-client/src/services/api/common.ts":"22","/home/miha/Documents/projects/js/nexomia-client/src/config.ts":"23","/home/miha/Documents/projects/js/nexomia-client/src/services/api/users/users.service.ts":"24","/home/miha/Documents/projects/js/nexomia-client/src/services/api/guilds/guilds.service.ts":"25","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Modals.tsx":"26","/home/miha/Documents/projects/js/nexomia-client/src/components/modals/ServerCreationModal.tsx":"27","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/BigPageButton.tsx":"28","/home/miha/Documents/projects/js/nexomia-client/src/components/css/PanelIconCss.tsx":"29","/home/miha/Documents/projects/js/nexomia-client/src/components/css/LayerBackgroundShadeCss.tsx":"30","/home/miha/Documents/projects/js/nexomia-client/src/components/css/InactiveLayerCss.tsx":"31","/home/miha/Documents/projects/js/nexomia-client/src/components/sidebar/Tab.tsx":"32","/home/miha/Documents/projects/js/nexomia-client/src/components/css/StyledIconCss.tsx":"33","/home/miha/Documents/projects/js/nexomia-client/src/store/UserStore.tsx":"34","/home/miha/Documents/projects/js/nexomia-client/src/store/AuthStore.tsx":"35","/home/miha/Documents/projects/js/nexomia-client/src/store/GuildStore.tsx":"36","/home/miha/Documents/projects/js/nexomia-client/src/store/ModalStore.tsx":"37","/home/miha/Documents/projects/js/nexomia-client/src/store/ChannelStore.tsx":"38","/home/miha/Documents/projects/js/nexomia-client/src/services/api/channels/channels.service.ts":"39","/home/miha/Documents/projects/js/nexomia-client/src/components/chat/ChatView.tsx":"40","/home/miha/Documents/projects/js/nexomia-client/src/components/chat/ChatInput.tsx":"41","/home/miha/Documents/projects/js/nexomia-client/src/components/chat/MessageView.tsx":"42","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/CenteredContainer.tsx":"43","/home/miha/Documents/projects/js/nexomia-client/src/services/api/messages/messages.service.ts":"44","/home/miha/Documents/projects/js/nexomia-client/src/store/MessageStore.tsx":"45","/home/miha/Documents/projects/js/nexomia-client/src/store/MessageCacheStore.tsx":"46","/home/miha/Documents/projects/js/nexomia-client/src/store/GuildCacheStore.tsx":"47","/home/miha/Documents/projects/js/nexomia-client/src/store/ChannelCacheStore.tsx":"48","/home/miha/Documents/projects/js/nexomia-client/src/store/UserCacheStore.tsx":"49","/home/miha/Documents/projects/js/nexomia-client/src/components/chat/MessageRenderer.tsx":"50","/home/miha/Documents/projects/js/nexomia-client/src/components/profile/ProfileView.tsx":"51","/home/miha/Documents/projects/js/nexomia-client/src/utils/isTabGuild.ts":"52","/home/miha/Documents/projects/js/nexomia-client/src/store/MemberCacheStore.tsx":"53","/home/miha/Documents/projects/js/nexomia-client/src/components/contextmenus/ContextMenu.tsx":"54","/home/miha/Documents/projects/js/nexomia-client/src/store/ContextMenuStore.tsx":"55","/home/miha/Documents/projects/js/nexomia-client/src/components/contextmenus/ContextTab.tsx":"56","/home/miha/Documents/projects/js/nexomia-client/src/components/settings/SettingsView.tsx":"57","/home/miha/Documents/projects/js/nexomia-client/src/components/settings/guild/RolesView.tsx":"58","/home/miha/Documents/projects/js/nexomia-client/src/services/api/roles/roles.service.ts":"59","/home/miha/Documents/projects/js/nexomia-client/src/store/RolesCacheStore.tsx":"60","/home/miha/Documents/projects/js/nexomia-client/src/components/settings/ui/Role.tsx":"61","/home/miha/Documents/projects/js/nexomia-client/src/components/settings/ui/Permission.tsx":"62","/home/miha/Documents/projects/js/nexomia-client/src/components/settings/ui/PermissionEditor.tsx":"63","/home/miha/Documents/projects/js/nexomia-client/src/store/models/ComputedPermissions.ts":"64","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/MemberSidebar.tsx":"65"},{"size":745,"mtime":1627597352775,"results":"66","hashOfConfig":"67"},{"size":3667,"mtime":1627848603003,"results":"68","hashOfConfig":"67"},{"size":6420,"mtime":1627672531789,"results":"69","hashOfConfig":"67"},{"size":1612,"mtime":1627683670922,"results":"70","hashOfConfig":"67"},{"size":163,"mtime":1627018358125,"results":"71","hashOfConfig":"67"},{"size":2103,"mtime":1627680736184,"results":"72","hashOfConfig":"67"},{"size":3338,"mtime":1627683977730,"results":"73","hashOfConfig":"67"},{"size":2386,"mtime":1627683881976,"results":"74","hashOfConfig":"67"},{"size":448,"mtime":1627680724782,"results":"75","hashOfConfig":"67"},{"size":3243,"mtime":1627596811177,"results":"76","hashOfConfig":"67"},{"size":276,"mtime":1627682556678,"results":"77","hashOfConfig":"67"},{"size":308,"mtime":1627028022731,"results":"78","hashOfConfig":"67"},{"size":277,"mtime":1626934198646,"results":"79","hashOfConfig":"67"},{"size":769,"mtime":1627227991041,"results":"80","hashOfConfig":"67"},{"size":462,"mtime":1627227809580,"results":"81","hashOfConfig":"67"},{"size":252,"mtime":1627214753219,"results":"82","hashOfConfig":"67"},{"size":3967,"mtime":1627596821449,"results":"83","hashOfConfig":"67"},{"size":1554,"mtime":1627018288813,"results":"84","hashOfConfig":"67"},{"size":616,"mtime":1626934226635,"results":"85","hashOfConfig":"67"},{"size":334,"mtime":1626959070191,"results":"86","hashOfConfig":"67"},{"size":688,"mtime":1626955086129,"results":"87","hashOfConfig":"67"},{"size":1237,"mtime":1627737734777,"results":"88","hashOfConfig":"67"},{"size":74,"mtime":1626946161504,"results":"89","hashOfConfig":"67"},{"size":349,"mtime":1627295837712,"results":"90","hashOfConfig":"67"},{"size":1058,"mtime":1627295901306,"results":"91","hashOfConfig":"67"},{"size":391,"mtime":1627389460267,"results":"92","hashOfConfig":"67"},{"size":4606,"mtime":1627297821529,"results":"93","hashOfConfig":"67"},{"size":467,"mtime":1627027430873,"results":"94","hashOfConfig":"67"},{"size":131,"mtime":1627022154493,"results":"95","hashOfConfig":"67"},{"size":83,"mtime":1627028155787,"results":"96","hashOfConfig":"67"},{"size":134,"mtime":1627028396713,"results":"97","hashOfConfig":"67"},{"size":1452,"mtime":1627597822073,"results":"98","hashOfConfig":"67"},{"size":84,"mtime":1627022005885,"results":"99","hashOfConfig":"67"},{"size":619,"mtime":1627209298039,"results":"100","hashOfConfig":"67"},{"size":717,"mtime":1627209298039,"results":"101","hashOfConfig":"67"},{"size":382,"mtime":1627297490390,"results":"102","hashOfConfig":"67"},{"size":379,"mtime":1627389470459,"results":"103","hashOfConfig":"67"},{"size":602,"mtime":1627298171525,"results":"104","hashOfConfig":"67"},{"size":380,"mtime":1627216994941,"results":"105","hashOfConfig":"67"},{"size":1522,"mtime":1627849726211,"results":"106","hashOfConfig":"67"},{"size":2747,"mtime":1627682533116,"results":"107","hashOfConfig":"67"},{"size":2404,"mtime":1627849671989,"results":"108","hashOfConfig":"67"},{"size":160,"mtime":1627243655376,"results":"109","hashOfConfig":"67"},{"size":657,"mtime":1627290434544,"results":"110","hashOfConfig":"67"},{"size":904,"mtime":1627292532078,"results":"111","hashOfConfig":"67"},{"size":587,"mtime":1627293744780,"results":"112","hashOfConfig":"67"},{"size":915,"mtime":1627673558173,"results":"113","hashOfConfig":"67"},{"size":587,"mtime":1627298548333,"results":"114","hashOfConfig":"67"},{"size":530,"mtime":1627633335957,"results":"115","hashOfConfig":"67"},{"size":2801,"mtime":1627655990760,"results":"116","hashOfConfig":"67"},{"size":3496,"mtime":1627683726058,"results":"117","hashOfConfig":"67"},{"size":74,"mtime":1627645846682,"results":"118","hashOfConfig":"67"},{"size":593,"mtime":1627633613683,"results":"119","hashOfConfig":"67"},{"size":1347,"mtime":1627848247525,"results":"120","hashOfConfig":"67"},{"size":507,"mtime":1627655773684,"results":"121","hashOfConfig":"67"},{"size":1117,"mtime":1627655670692,"results":"122","hashOfConfig":"67"},{"size":678,"mtime":1627673011153,"results":"123","hashOfConfig":"67"},{"size":5954,"mtime":1627737811927,"results":"124","hashOfConfig":"67"},{"size":700,"mtime":1627737557971,"results":"125","hashOfConfig":"67"},{"size":530,"mtime":1627634799409,"results":"126","hashOfConfig":"67"},{"size":1624,"mtime":1627726118650,"results":"127","hashOfConfig":"67"},{"size":2401,"mtime":1627734950325,"results":"128","hashOfConfig":"67"},{"size":8483,"mtime":1627740269313,"results":"129","hashOfConfig":"67"},{"size":608,"mtime":1627680572534,"results":"130","hashOfConfig":"67"},{"size":350,"mtime":1627848619115,"results":"131","hashOfConfig":"67"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},"9q8v7z",{"filePath":"135","messages":"136","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"137","messages":"138","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"134"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"134"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"134"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"134"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"134"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"134"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"134"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"134"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"134"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"134"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"134"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"134"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"134"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"134"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"134"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"134"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"134"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"134"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"134"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"134"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"134"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"134"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/miha/Documents/projects/js/nexomia-client/src/index.tsx",[],["285","286"],"/home/miha/Documents/projects/js/nexomia-client/src/views/App.tsx",["287","288","289"],"/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Sidebar.tsx",["290","291","292","293","294"],"import { styled } from 'linaria/react';\nimport { css } from 'linaria';\nimport { Fragment, useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\n\nimport { useStore } from 'effector-react';\nimport $GuildStore from '../../store/GuildStore';\nimport $GuildCacheStore, { setGuildRoles } from '../../store/GuildCacheStore';\nimport $ChannelStore, { setGuildChannels } from '../../store/ChannelStore';\nimport $ChannelCacheStore, { cacheChannels } from '../../store/ChannelCacheStore';\nimport { cacheUsers } from '../../store/UserCacheStore';\nimport { cacheMembers } from '../../store/MemberCacheStore';\nimport { cacheRoles } from '../../store/RolesCacheStore';\nimport Tab from '../sidebar/Tab';\n\nimport { BiHash } from 'react-icons/bi';\nimport {\n  RiVolumeDownFill,\n  RiMessage3Fill,\n  RiUserFill\n} from 'react-icons/ri';\n\nimport SidebarHeader from './SidebarHeader';\n\nimport Channel from '../../store/models/Channel';\nimport StyledText from '../ui/StyledText';\nimport CenteredContainer from './CenteredContainer';\nimport ChannelsService from '../../services/api/channels/channels.service';\nimport Dots from '../animations/Dots';\nimport classNames from 'classnames';\nimport isTabGuild from '../../utils/isTabGuild';\nimport GuildsService from '../../services/api/guilds/guilds.service';\nimport RolesService from '../../services/api/roles/roles.service';\nimport Role from '../../store/models/Role';\n\nconst SidebarContainer = styled.div`\n  display: flex;\n  width: 240px;\n  flex-shrink: 0;\n  flex-direction: column;\n  align-self: stretch;\n  background: var(--background-secondary-alt)\n`\n\nconst Content = styled.div`\n  display: flex;\n  align-self: center;\n  color: var(--text-primary);\n  font-weight: 900;\n  font-size: 18px;\n  padding: 0 16px;\n  user-select: none;\n`\n\ninterface RouteParams {\n  path: string,\n  guildId: string,\n  channelId: string\n}\n\ninterface SidebarProps {\n  type?: string\n}\n\ninterface GuildChannels {\n  [key: string]: string[]\n}\n\ninterface ChannelsCache {\n  [key: string]: Channel\n}\n\nfunction Sidebar({ type = 'channels' }: SidebarProps) {\n  const { path, guildId, channelId } = useParams<RouteParams>();\n\n  const guilds = useStore($GuildCacheStore);\n  const channels = useStore<GuildChannels>($ChannelStore);\n  const channelsCache = useStore<ChannelsCache>($ChannelCacheStore);\n\n  const history = useHistory();\n\n  const [loading, setLoading] = useState(false);\n\n  const [guildChannels, setGuildChannelsValue] = useState<string[]>([]);\n\n  useEffect(() => {\n    setLoading(false);\n    if (type === 'channels') {\n      if (!isTabGuild(guildId)) return;\n      setGuildChannelsValue(channels[guildId] || []);\n      \n      if (!guildChannels.length && (!path || path === 'guildsettings')) {\n        loadChannels();\n      }\n    }\n  }, [guildId]);\n\n  return (\n    <SidebarContainer>\n      { !path && guildId === '@me' && type === 'channels' && (\n        <SidebarHeader>\n          <Content>Direct Messages</Content>\n        </SidebarHeader>\n      ) }\n\n      { (path === 'discover' || path === 'profiles') && type === 'channels' && (\n        <Fragment>\n          <SidebarHeader>\n            <Content>Discover</Content>\n          </SidebarHeader>\n          <Tab\n            Icon={ RiUserFill }\n            title={ 'People' }\n            tabId={ 'people' }\n            active={ path === 'profiles' }\n            onClick={ () => { history.push(`/discover/people`) } }\n          />\n        </Fragment>\n      ) }\n\n      { path === 'home' && type === 'channels' && (\n        <Fragment>\n          <SidebarHeader>\n            <Content>Home</Content>\n          </SidebarHeader>\n          <Tab\n            Icon={ RiMessage3Fill }\n            title={ 'Feed' }\n            tabId={ 'feed' }\n            onClick={ () => { history.push(`/home/feed`) } }\n          />\n          <Tab\n            Icon={ RiUserFill }\n            title={ 'Friends' }\n            tabId={ 'friends' }\n            onClick={ () => { history.push(`/home/friends`) } }\n          />\n        </Fragment>\n      ) }\n\n      { path === 'guildsettings' && type === 'channels' && (\n        <Fragment>\n          <SidebarHeader>\n            <Content>Server Settings</Content>\n          </SidebarHeader>\n          <Tab\n            title={ 'General' }\n            tabId={ 'general' }\n            onClick={ () => { history.push(`/guildsettings/${guildId}/general`) } }\n          />\n          <Tab\n            title={ 'Roles' }\n            tabId={ 'roles' }\n            onClick={ () => { history.push(`/guildsettings/${guildId}/roles`) } }\n          />\n        </Fragment>\n      ) }\n\n      { !path && isTabGuild(guildId) && type === 'channels' && (\n        <Fragment>\n          <SidebarHeader>\n            <Content>{ guilds[guildId]?.name }</Content>\n          </SidebarHeader>\n        </Fragment>\n      ) }\n\n      { !path && isTabGuild(guildId) && type === 'channels' && (guildChannels.length && channelsCache[guildChannels[0]] ? (\n        guildChannels.map((channel: string) => (\n          <Tab\n            Icon={ BiHash }\n            title={ channelsCache[channel]?.name || '' }\n            tabId={ channelsCache[channel]?.id }\n            key={ channelsCache[channel]?.id }\n            onClick={ () => { history.push(`/channels/${guildId}/${channel}`) } }\n          />\n        ))\n      ) : loading ? (\n        <CenteredContainer>\n          <Dots />\n        </CenteredContainer>\n      ) : (\n        <StyledText className={ css`text-align: center` }>No channels</StyledText>\n      )) }\n    </SidebarContainer>\n  );\n\n  async function loadChannels() {\n    setLoading(true);\n    const response = await ChannelsService.getGuildChannels(guildId);\n    if (!response) return history.push('/home');\n    const membersResponse = await GuildsService.getGuildMembers(guildId || '');\n    const rolesResponse = await RolesService.getGuildRoles(guildId || '');\n\n    cacheUsers([...membersResponse].map((member: any) => member.user));\n    cacheMembers([...membersResponse].map((member: any) => {\n      delete member.user;\n      return { ...member, guild: guildId };\n    }));\n    cacheRoles(rolesResponse);\n    setGuildRoles({ guild: guildId, roles: rolesResponse.map((role: Role) => role.id) });\n    cacheChannels(response);\n    setGuildChannels({ guild: guildId, channels: response.map((channel: Channel) => channel.id) });\n    setGuildChannelsValue(response.map((channel: Channel) => channel.id));\n    setLoading(false);\n  }\n}\n\nexport default Sidebar;\n","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Content.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/layout/SidebarHeader.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/layout/ContentHeader.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Guilds.tsx",["295"],"import { styled } from 'linaria/react';\nimport { css } from 'linaria';\n\nimport classNames from 'classnames';\n\nimport { useHistory, useParams } from 'react-router-dom';\n\nimport {\n  RiAddFill\n} from 'react-icons/ri'\n\nimport { useStore } from 'effector-react';\nimport $ModalStore, { setModalState } from '../../store/ModalStore';\nimport $GuildStore from '../../store/GuildStore';\nimport $GuildCacheStore from '../../store/GuildCacheStore';\nimport { setContextMenu } from '../../store/ContextMenuStore';\n\nimport UserMenu from '../guilds/UserMenu';\nimport PanelButton from '../guilds/PanelButton';\nimport StyledText from '../ui/StyledText';\nimport PanelIconCss from '../css/PanelIconCss';\n\nconst GuildsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-shrink: 0;\n  width: 64px;\n  align-self: stretch;\n  background: var(--background-secondary);\n  overflow: auto\n\n  &::-webkit-scrollbar {\n    width: 0;\n  }\n`\n\nconst Splitter = styled.div`\n  flex-shrink: 0;\n  height: 4px;\n  width: calc(100% - 32px);\n  margin: 0 16px 8px 16px;\n  border-radius: 2px;\n  background: var(--background-primary);\n`\n\nconst AvatarImg = styled.img`\n  width: 100%;\n  height: 100%;\n`\n\nconst GuildLetters = css`\n  line-height: 48px;\n  height: 48px;\n  text-align: center;\n  font-weight: 600;\n  margin: 0;\n`\n\ninterface RouteParams {\n  guildId: string\n}\n\nfunction Guilds() {\n  const history = useHistory();\n  const { guildId } = useParams<RouteParams>();\n\n  const modals = useStore($ModalStore);\n  const guildList = useStore($GuildStore);\n  const guilds = useStore($GuildCacheStore);\n\n  return (\n    <GuildsContainer>\n      <UserMenu />\n      <Splitter />\n      {\n        guildList.map((guildListId) => (\n          <PanelButton\n            onClick={ () => switchGuild(guildListId) }\n            onContextMenu={ (event: any) => openContextMenu(event, guildListId) }\n            key={ guildListId }\n            className={ classNames({ active: guildId === guildListId }) }\n          >\n            { guilds[guildListId]?.icon && <AvatarImg src={ guilds[guildListId]?.icon } /> }\n            {\n              !guilds[guildListId]?.icon &&\n              (\n                <StyledText className={ GuildLetters }>\n                  {\n                    guilds[guildListId]?.name && (\n                      guilds[guildListId].name.split(' ')[1]\n                      ? guilds[guildListId].name.split(' ')[0][0] + guilds[guildListId].name.split(' ')[1][0]\n                      : guilds[guildListId].name.split(' ')[0][0] + (\n                        guilds[guildListId].name.split(' ')[0][1]\n                        ? guilds[guildListId].name.split(' ')[0][1]\n                        : ''\n                      )\n                    )\n                  }\n                </StyledText>\n              )\n            }\n          </PanelButton>\n        ))\n      }\n      <PanelButton className={ css`margin-bottom: 0` } onClick={ () => { setModalState({ serverCreation: true }) } }>\n        <RiAddFill className={ PanelIconCss } />\n      </PanelButton>\n    </GuildsContainer>\n  );\n\n  function switchGuild(id: string) {\n    history.push(`/channels/${id}`);\n  }\n\n  function openContextMenu(event: any, id: string) {\n    event.preventDefault();\n    setContextMenu({ type: 'guild', top: event.pageY, left: event.pageX, visible: true, id });\n  }\n}\n\nexport default Guilds;\n","/home/miha/Documents/projects/js/nexomia-client/src/components/guilds/UserMenu.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/guilds/PanelButton.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/views/Login.tsx",["296"],"import { css } from 'linaria';\n\nimport { useState, useRef, useEffect } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\n\nimport { useTranslation } from 'react-i18next';\n\nimport { useStore } from 'effector-react';\nimport $AuthStore, { setToken, setRefreshToken } from '../store/AuthStore';\n\nimport AuthService from '../services/api/auth/auth.service';\n\nimport '../styles/App.css';\n\nimport Layer from '../components/ui/Layer';\nimport Modal from '../components/ui/Modal';\nimport ModalHeader from '../components/ui/ModalHeader';\nimport InputField from '../components/ui/InputField';\nimport FilledButton from '../components/ui/FilledButton';\nimport StyledText from '../components/ui/StyledText';\nimport LoadingPlaceholder from '../components/ui/LoadingPlaceholder';\n\nconst modalCss = css`\n  width: 440px;\n`\n\nconst negativeColorCss = css`\n  color: var(--text-negative);\n`\n\nfunction Login() {\n  const { token } = useStore($AuthStore);\n  const history = useHistory();\n\n  useEffect(() => {\n    console.log(token)\n    if (token && token !== '') {\n      history.push('/home');\n    }\n  }, []);\n\n  const { t } = useTranslation(['reg']);\n\n  const [loginLoading, setLoginLoading] = useState(false);\n  const [emailError, setEmailError] = useState(false);\n  const [passwordError, setPasswordError] = useState(false);\n  const [loginError, setLoginError] = useState(false);\n\n  const emailInput = useRef<HTMLInputElement>(null);\n  const passwordInput = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    console.log(emailInput);\n  }, []);\n\n  return (\n    <div className=\"Login dark-theme\">\n      <Layer>\n        <Modal className={ modalCss }>\n          <LoadingPlaceholder title={ t('reg:logging_in') } active={ loginLoading } />\n          <ModalHeader>{ t('reg:log_in') }<br /><StyledText>{ t('reg:welcomer_log_in') }</StyledText></ModalHeader>\n          <InputField placeholder=\"Email\" ref={ emailInput } />\n          { (emailError && <StyledText className={ negativeColorCss }>{ t('reg:errors.required_field') }</StyledText>) }\n          <InputField placeholder={ t('reg:fields.password') } type=\"password\" hidden={ true } ref={ passwordInput } />\n          { (passwordError && <StyledText className={ negativeColorCss }>{ t('reg:errors.required_field') }</StyledText>) }\n          { (loginError && <StyledText className={ negativeColorCss }>{ t('reg:errors.invalid_credentials') }</StyledText>) }\n          <StyledText>{ t('reg:no_account') } <Link to=\"/register\">{ t('reg:register') }</Link></StyledText>\n          <FilledButton onClick={ login }>{ t('reg:continue') }</FilledButton>\n        </Modal>\n      </Layer>\n    </div>\n  );\n\n  async function login() {\n    setLoginError(false);\n    setEmailError(!emailInput.current?.value);\n    setPasswordError(!passwordInput.current?.value);\n\n    if (!emailInput.current?.value || !passwordInput.current?.value) return;\n\n    setLoginLoading(true);\n\n    const response = await AuthService.login(emailInput.current?.value, passwordInput.current?.value);\n\n    setLoginLoading(false);\n\n    if (!response) {\n      setLoginError(true);\n      return;\n    }\n\n    setToken(response.access_token);\n    setRefreshToken(response.refresh_token);\n\n    history.push('/home');\n  }\n}\n\nexport default Login;\n","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/Layer.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/ui/Modal.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/ui/ModalHeader.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/ui/InputField.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/ui/FilledButton.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/ui/StyledText.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/views/Register.tsx",["297","298"],"import { css } from 'linaria';\n\nimport { useState, Fragment, useRef, useEffect } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\n\nimport { useTranslation } from 'react-i18next';\n\nimport { useStore } from 'effector-react';\nimport $AuthStore from '../store/AuthStore';\n\nimport AuthService from '../services/api/auth/auth.service';\n\nimport '../styles/App.css';\n\nimport Layer from '../components/ui/Layer';\nimport Modal from '../components/ui/Modal';\nimport ModalHeader from '../components/ui/ModalHeader';\nimport InputField from '../components/ui/InputField';\nimport FilledButton from '../components/ui/FilledButton';\nimport StyledText from '../components/ui/StyledText';\nimport LoadingPlaceholder from '../components/ui/LoadingPlaceholder';\n\nconst modalCss = css`\n  width: 440px\n`\n\nconst negativeColorCss = css`\n  color: var(--text-negative);\n`\n\nfunction Register() {\n  const { token } = useStore($AuthStore);\n  const history = useHistory();\n\n  useEffect(() => {\n    if (token) {\n      history.push('/channels/@me');\n    }\n  }, []);\n\n  const { t } = useTranslation(['reg']);\n\n  const [registerLoading, setRegisterLoading] = useState(false);\n  const [registerState, setRegisterState] = useState(0);\n  const [placeholderText, setPlaceholderText] = useState(0);\n  const [emailError, setEmailError] = useState(false);\n  const [usernameError, setUsernameError] = useState(false);\n  const [passwordError, setPasswordError] = useState(false);\n\n  const emailInput = useRef<HTMLInputElement>(null);\n  const usernameInput = useRef<HTMLInputElement>(null);\n  const passwordInput = useRef<HTMLInputElement>(null);\n\n  return (\n    <div className=\"Login dark-theme\">\n      <Layer>\n        <Modal className={ modalCss }>\n          <LoadingPlaceholder title={ (placeholderText === 0 && 'Creating your account...') || 'Almost there...' } active={ registerLoading } />\n\n          { registerState === 0 && (\n            <Fragment>\n              <ModalHeader>{ t('reg:register') }<br /><StyledText>{ t('reg:welcomer_register') }</StyledText></ModalHeader>\n              <InputField placeholder=\"Email\" ref={ emailInput } />\n              { (emailError && <StyledText className={ negativeColorCss }>{ t('reg:errors.required_field') }</StyledText>) }\n              <InputField placeholder={ t('reg:fields.username') } ref={ usernameInput } />\n              { (usernameError && <StyledText className={ negativeColorCss }>{ t('reg:errors.required_field') }</StyledText>) }\n              <InputField placeholder={ t('reg:fields.password') } type=\"password\" ref={ passwordInput } hidden={ true } />\n              { (passwordError && <StyledText className={ negativeColorCss }>{ t('reg:errors.required_field') }</StyledText>) }\n              <StyledText>{ t('reg:has_account') } <Link to=\"/login\">{ t('reg:log_in') }</Link></StyledText>\n              <FilledButton onClick={ register }>{ t('reg:continue') }</FilledButton>\n            </Fragment>\n          ) }\n\n          { registerState === 1 && (\n            <Fragment>\n              <ModalHeader>{ t('reg:account_created') }<br /><StyledText>{ t('reg:account_log_in') }</StyledText></ModalHeader>\n              <FilledButton onClick={ login }>{ t('reg:continue') }</FilledButton>\n            </Fragment>\n          ) }\n        </Modal>\n      </Layer>\n    </div>\n  );\n\n  async function register() {\n    setEmailError(!emailInput.current?.value);\n    setUsernameError(!usernameInput.current?.value);\n    setPasswordError(!passwordInput.current?.value);\n\n    if (!emailInput.current?.value || !usernameInput.current?.value || !passwordInput.current?.value) return;\n\n    setRegisterLoading(true);\n\n    const response = await AuthService.register(\n      emailInput.current?.value,\n      usernameInput.current?.value,\n      passwordInput.current?.value\n    );\n\n    if (!response) return;\n\n    setRegisterLoading(false);\n    setRegisterState(1);\n  }\n\n  function login() {\n    history.push('/login');\n  }\n}\n\nexport default Register;\n","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/LoadingPlaceholder.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/animations/Dots.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/i18n/config.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/services/api/auth/auth.service.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/services/api/common.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/config.ts",["299"],"export default {\n  api: {\n    endpoint: 'http://127.0.0.1:7081/api'\n  }\n}\n","/home/miha/Documents/projects/js/nexomia-client/src/services/api/users/users.service.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/services/api/guilds/guilds.service.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Modals.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/modals/ServerCreationModal.tsx",["300","301"],"import { css } from 'linaria';\nimport classNames from 'classnames';\nimport { useState, useRef, Fragment, useEffect } from 'react';\n\nimport { useStore } from 'effector-react';\nimport $ModalStore, { setModalState } from '../../store/ModalStore';\nimport { addGuild } from '../../store/GuildStore';\nimport { cacheGuilds } from '../../store/GuildCacheStore';\n\nimport GuildsService from '../../services/api/guilds/guilds.service';\n\nimport Layer from '../ui/Layer';\nimport LayerBackgroundShadeCss from '../css/LayerBackgroundShadeCss';\nimport InactiveLayerCss from '../css/InactiveLayerCss';\nimport Modal from '../ui/Modal';\nimport ModalHeader from '../ui/ModalHeader';\nimport StyledText from '../ui/StyledText';\nimport BigPageButton from '../ui/BigPageButton';\nimport InputField from '../ui/InputField';\nimport FilledButton from '../ui/FilledButton';\nimport LoadingPlaceholder from '../ui/LoadingPlaceholder';\n\ninterface ServerCreationModalProps {\n  active: boolean\n}\n\nconst negativeColorCss = css`\n  color: var(--text-negative);\n`\n\nfunction ServerCreationModal({ active }: ServerCreationModalProps) {\n  const layerRef = useRef(null);\n\n  const [modalPage, setModalPage] = useState(0);\n  const [nameValue, setNameValue] = useState('');\n  const [inviteValue, setInviteValue] = useState('');\n\n  const [joinError, setJoinError] = useState(false);\n  const [createError, setCreateError] = useState(false);\n\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (active) {\n      setModalPage(0);\n      setJoinError(false);\n      setCreateError(false);\n      setNameValue('');\n      setInviteValue('');\n    }\n  }, [active]);\n\n  return (\n    <Layer className={ classNames({ [LayerBackgroundShadeCss]: true, [InactiveLayerCss]: !active }) } onClick={ (event) => { closeModal(event) } } ref={ layerRef }>\n      <Modal className={ css`width: 440px` }>\n        <LoadingPlaceholder title={ (modalPage === 1 && 'Creating your server...') || 'Joining server...' } active={ loading } />\n        { modalPage === 0 && (\n          <Fragment>\n            <ModalHeader>Join or create a server<br /><StyledText>Talk with friends in your private space or create a public community!</StyledText></ModalHeader>\n            <BigPageButton onClick={ () => setModalPage(1) }>Create a server</BigPageButton>\n            <BigPageButton onClick={ () => setModalPage(2) }>Join a server</BigPageButton>\n          </Fragment>\n        ) }\n\n        { modalPage === 1 && (\n          <Fragment>\n            <ModalHeader>Name your server</ModalHeader>\n            <InputField placeholder=\"Server Name\" onChange={ (event) => { setNameValue(event.target.value) } } />\n            { (createError && <StyledText className={ negativeColorCss }>Failed to create server.</StyledText>) }\n            <FilledButton onClick={ createServer }>Create</FilledButton>\n          </Fragment>\n        ) }\n\n        { modalPage === 2 && (\n          <Fragment>\n            <ModalHeader>Enter your invite</ModalHeader>\n            <InputField placeholder=\"Invite Code\" onChange={ (event) => { setInviteValue(event.target.value) } } />\n            { (joinError && <StyledText className={ negativeColorCss }>Failed to join this server. Invite code is invalid or you have been banned from that server.</StyledText>) }\n            <FilledButton onClick={ joinServer }>Join</FilledButton>\n          </Fragment>\n        ) }\n      </Modal>\n    </Layer>\n  );\n\n  // TODO: что-то сделать с этим пиздецом в типах\n  function closeModal(event: any) {\n    if (event.target !== layerRef.current) return;\n    setModalState({ serverCreation: false });\n  }\n\n  async function createServer() {\n    setLoading(true);\n    const response = await GuildsService.createGuild(nameValue);\n    if (!response) {\n      setCreateError(true);\n      setLoading(false);\n      return;\n    }\n\n    const { id, name } = response;\n\n    cacheGuilds([{\n      id,\n      name,\n      icon: response.icon || ''\n    }]);\n    addGuild(id);\n\n    setLoading(false);\n    setNameValue('');\n    setInviteValue('');\n    setModalState({ serverCreation: false });\n  }\n\n  async function joinServer() {\n    setLoading(true);\n    const response = await GuildsService.joinGuild(inviteValue);\n    if (!response) {\n      setJoinError(true);\n      setLoading(false);\n      return;\n    }\n\n    const { id, name } = response;\n\n    cacheGuilds([{\n      id,\n      name,\n      icon: response.icon || ''\n    }]);\n    addGuild(id);\n\n    setLoading(false);\n    setNameValue('');\n    setInviteValue('');\n    setModalState({ serverCreation: false });\n  }\n}\n\nexport default ServerCreationModal;\n","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/BigPageButton.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/css/PanelIconCss.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/css/LayerBackgroundShadeCss.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/css/InactiveLayerCss.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/sidebar/Tab.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/css/StyledIconCss.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/UserStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/AuthStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/GuildStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/ModalStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/ChannelStore.tsx",["302","303"],"import { createStore, createEvent } from 'effector-root';\nimport Channel from './models/Channel';\n\nconst setGuildChannels = createEvent<GuildChannelsInfo>();\n\ninterface GuildChannelsInfo {\n  guild: string,\n  channels: string[]\n}\n\ninterface GuildChannelPath {\n  guild: string,\n  channel: string\n}\n\ninterface GuildChannels {\n  [key: string]: string[]\n}\n\nconst $ChannelStore = createStore<GuildChannels>({});\n\n$ChannelStore\n  .on(setGuildChannels, (state: GuildChannels, info: GuildChannelsInfo) => ({ ...state, [info.guild]: info.channels }));\n\nexport default $ChannelStore;\nexport { setGuildChannels };\n","/home/miha/Documents/projects/js/nexomia-client/src/services/api/channels/channels.service.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/chat/ChatView.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/chat/ChatInput.tsx",["304"],"import { styled } from 'linaria/react';\nimport { css } from 'linaria';\nimport classNames from 'classnames';\nimport { useRef, useState } from 'react';\nimport { RiAddCircleFill, RiEmotionLaughFill, RiSendPlane2Fill } from 'react-icons/ri';\n\nimport { addMessage } from '../../store/MessageStore';\nimport { cacheMessages } from '../../store/MessageCacheStore';\n\nimport StyledIconCss from '../css/StyledIconCss';\nimport Dots from '../animations/Dots';\n\nimport MessagesService from '../../services/api/messages/messages.service';\n\nconst Container = styled.div`\n  display: flex;\n  margin: 16px;\n  border-radius: 8px;\n  background: var(--background-primary-alt);\n  height: 48px;\n  flex-direction: row;\n  z-index: 2;\n`\n\nconst InputButton = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 46px;\n  height: 40px;\n  padding: 8px 11px;\n  margin: 4px;\n  border-radius: 6px;\n  cursor: pointer;\n  transition: .2s;\n\n  &:hover {\n    background: var(--background-light);\n  }\n  &:active, &.active {\n    transform: scale(0.93);\n  }\n  &.active {\n    opacity: .5;\n  }\n`\n\nconst InputIconCss = css`\n  width: 24px;\n  height: 24px;\n`\n\nconst Input = styled.input`\n  display: flex;\n  flex-grow: 1;\n  outline: none;\n  background: transparent;\n  border: 0px;\n  font-weight: 400;\n  font-size: 16px;\n  color: var(--text-primary);\n  &::placeholder {\n    color: var(--text-secondary);\n    user-select: none;\n  }\n`\n\ninterface ChatInputProps {\n  channel: string\n}\n\nfunction ChatInput({ channel }: ChatInputProps) {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [sendLoading, setSendLoading] = useState(false);\n\n  return (\n    <Container>\n      <InputButton>\n        <RiAddCircleFill className={ classNames({ [StyledIconCss]: true, [InputIconCss]: true }) } />\n      </InputButton>\n      <Input placeholder=\"Type something here...\" ref={ inputRef } />\n      <InputButton className={ css`margin-right: 0` }>\n        <RiEmotionLaughFill className={ classNames({ [StyledIconCss]: true, [InputIconCss]: true }) } />\n      </InputButton>\n      <InputButton onClick={ sendMessage } className={ classNames({ active: sendLoading }) } >\n        <RiSendPlane2Fill className={ classNames({ [StyledIconCss]: true, [InputIconCss]: true }) } />\n      </InputButton>\n    </Container>\n  );\n\n  async function sendMessage() {\n    if (sendLoading) return;\n\n    setSendLoading(true);\n    const content = inputRef.current?.value;\n    if (inputRef.current) inputRef.current.value = '';\n    const response = await MessagesService.sendMessage(channel, content || '');\n\n    if (!response) return setSendLoading(false);\n\n    cacheMessages([response]);\n    addMessage({ channel: response.channel_id, message: response.id });\n\n    setSendLoading(false);\n  }\n}\n\nexport default ChatInput;\n","/home/miha/Documents/projects/js/nexomia-client/src/components/chat/MessageView.tsx",["305","306","307","308","309"],"/home/miha/Documents/projects/js/nexomia-client/src/components/layout/CenteredContainer.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/services/api/messages/messages.service.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/MessageStore.tsx",["310"],"import { createStore, createEvent } from 'effector-root';\n\nimport Message from './models/Message';\n\nconst setChannelMessages = createEvent<ChannelMessagesInfo>();\nconst addMessage = createEvent<ChannelMessageInfo>();\n\ninterface ChannelMessagesInfo {\n  channel: string,\n  messages: string[]\n}\n\ninterface ChannelMessageInfo {\n  channel: string,\n  message: string\n}\n\ninterface ChannelMessages {\n  [key: string]: string[]\n}\n\nconst $MessageStore = createStore<ChannelMessages>({});\n\n$MessageStore\n  .on(setChannelMessages, (state: ChannelMessages, info: ChannelMessagesInfo) => ({ ...state, [info.channel]: info.messages }))\n  .on(addMessage, (state: ChannelMessages, info: ChannelMessageInfo) => (\n    {\n      ...state,\n      [info.channel]: state[info.channel] ? state[info.channel].concat(info.message) : [info.message]\n    }\n  ));\n\nexport default $MessageStore;\nexport { setChannelMessages, addMessage };\n","/home/miha/Documents/projects/js/nexomia-client/src/store/MessageCacheStore.tsx",["311"],"import { createStore, createEvent } from 'effector-root';\n\nimport Message from './models/Message';\n\nconst cacheMessages = createEvent<Message[]>();\n\ninterface MessageCache {\n  [key: string]: Message\n}\n\nconst $MessageCacheStore = createStore<MessageCache>({});\n\n$MessageCacheStore\n  .on(cacheMessages, (state: MessageCache, messages: Message[]) => {\n    let modifiedState = { ...state };\n    messages.map((message) => {\n      modifiedState = { ...modifiedState, [message.id]: message };\n    });\n    return modifiedState;\n  })\n\nexport default $MessageCacheStore;\nexport { cacheMessages };\n","/home/miha/Documents/projects/js/nexomia-client/src/store/GuildCacheStore.tsx",["312","313"],"import { createStore, createEvent } from 'effector-root';\n\nimport Guild from './models/Guild';\nimport Role from './models/Role';\n\nconst cacheGuilds = createEvent<Guild[]>();\nconst setGuildRoles = createEvent<GuildRolesInfo>();\n\ninterface GuildCache {\n  [key: string]: Guild\n}\n\ninterface GuildRolesInfo {\n  guild: string,\n  roles: string[]\n}\n\nconst $GuildCacheStore = createStore<GuildCache>({});\n\n$GuildCacheStore\n  .on(cacheGuilds, (state: GuildCache, guilds: Guild[]) => {\n    let modifiedState = { ...state };\n    guilds.map((guild) => {\n      modifiedState = { ...modifiedState, [guild.id]: guild };\n    });\n    return modifiedState;\n  })\n  .on(setGuildRoles, (state: GuildCache, info: GuildRolesInfo) => {\n    const modifiedState = { ...state };\n    modifiedState[info.guild].roles = info.roles.reverse();\n    return modifiedState;\n  })\n\nexport default $GuildCacheStore;\nexport { cacheGuilds, setGuildRoles };\n","/home/miha/Documents/projects/js/nexomia-client/src/store/ChannelCacheStore.tsx",["314"],"import { createStore, createEvent } from 'effector-root';\n\nimport Channel from './models/Channel';\n\nconst cacheChannels = createEvent<Channel[]>();\n\ninterface ChannelCache {\n  [key: string]: Channel\n}\n\nconst $ChannelCacheStore = createStore<ChannelCache>({});\n\n$ChannelCacheStore\n  .on(cacheChannels, (state: ChannelCache, channels: Channel[]) => {\n    let modifiedState = { ...state };\n    channels.map((channel) => {\n      modifiedState = { ...modifiedState, [channel.id]: channel };\n    });\n    return modifiedState;\n  })\n\nexport default $ChannelCacheStore;\nexport { cacheChannels };\n","/home/miha/Documents/projects/js/nexomia-client/src/store/UserCacheStore.tsx",["315"],"import { createStore, createEvent } from 'effector-root';\n\nimport User from './models/User';\n\nconst cacheUsers = createEvent<User[]>();\n\ninterface UserCache {\n  [key: string]: User\n}\n\nconst $UserCacheStore = createStore<UserCache>({});\n\n$UserCacheStore\n  .on(cacheUsers, (state: UserCache, users: User[]) => {\n    let modifiedState = { ...state };\n    users.map((user) => {\n      modifiedState = { ...modifiedState, [user.id]: user };\n    });\n    return modifiedState;\n  })\n\nexport default $UserCacheStore;\nexport { cacheUsers };\n","/home/miha/Documents/projects/js/nexomia-client/src/components/chat/MessageRenderer.tsx",["316"],"import classNames from 'classnames';\nimport { useStore } from 'effector-react';\nimport { format } from 'fecha';\nimport { css } from 'linaria';\nimport { styled } from 'linaria/react';\nimport { useHistory } from 'react-router-dom';\nimport $MessageCacheStore from '../../store/MessageCacheStore';\nimport $UserCacheStore from '../../store/UserCacheStore';\nimport { setModalState } from '../../store/ModalStore';\nimport StyledText from '../ui/StyledText';\nimport { setContextMenu } from '../../store/ContextMenuStore';\n\nconst Container = styled.div`\n  margin-top: 8px;\n  margin-bottom: -1px;\n  padding: 4px 0;\n  display: flex;\n  flex-direction: row;\n\n  &:hover {\n    background: var(--background-secondary-alt);\n  }\n`\n\nconst GroupedContainerCss = css`\n  margin: 0;\n`\n\nconst Avatar = styled.img`\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  margin: 0 16px;\n  user-select: none;\n  cursor: pointer;\n  transition: .2s;\n  &:active {\n    transform: translateY(2px);\n  }\n`\n\nconst Spacer = styled.div`\n  width: 72px;\n  flex-shrink: 0;\n`\n\nconst ContentContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n`\n\ninterface MessageProps {\n  id: string,\n  grouped: boolean\n}\n\nfunction MessageRenderer({ id, grouped }: MessageProps) {\n  const UserCache = useStore($UserCacheStore);\n  const MessageCache = useStore($MessageCacheStore);\n\n  const history = useHistory();\n\n  return (\n    <Container className={ classNames({ [GroupedContainerCss]: grouped }) } onContextMenu={ openContextMenu } >\n      { !grouped ? (\n        <Avatar src={ UserCache[MessageCache[id].author].avatar } onClick={ showUserProfile }></Avatar>\n      ) : (\n        <Spacer />\n      ) }\n      <ContentContainer>\n        { !grouped && (\n          <StyledText className={ css`margin: 0` }>\n            <div\n              className={ css`display: inline-block; cursor: pointer; &:hover { text-decoration: underline }` } \n              onClick={ showUserProfile }\n            >{ UserCache[MessageCache[id].author].username }</div>\n            <StyledText className={ css`margin: 0 0 0 8px; color: var(--text-secondary); display: inline-block; font-size: 12px` }>\n              { format(new Date(MessageCache[id].created), 'HH:mm') }\n            </StyledText>\n          </StyledText>\n        ) }\n        <StyledText className={ css`margin: 0; padding-right: 16px; font-weight: 400; user-select: text; word-break: break-all` }>{ MessageCache[id].content }</StyledText>\n      </ContentContainer>\n    </Container>\n  )\n\n  function showUserProfile() {\n    history.push(`/profiles/${ MessageCache[id].author }`);\n  }\n\n  function openContextMenu(event: any) {\n    event.preventDefault();\n    setContextMenu({ type: 'message', top: event.pageY, left: event.pageX, visible: true, id });\n  }\n}\n\nexport default MessageRenderer;\n","/home/miha/Documents/projects/js/nexomia-client/src/components/profile/ProfileView.tsx",["317","318"],"import classNames from 'classnames';\nimport { useStore } from 'effector-react';\nimport { css } from 'linaria';\nimport { styled } from 'linaria/react';\nimport { Fragment, useEffect } from 'react';\nimport { RiShieldCheckFill, RiCodeSSlashFill } from 'react-icons/ri';\nimport markdown from 'snarkdown';\nimport $UserCacheStore from '../../store/UserCacheStore';\nimport Dots from '../animations/Dots';\nimport StyledIconCss from '../css/StyledIconCss';\nimport CenteredContainer from '../layout/CenteredContainer';\nimport StyledText from '../ui/StyledText';\n\ninterface ProfileViewProps {\n  user: string\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst Banner = styled.div`\n  height: 400px;\n  background-size: cover;\n  background-position: center;\n`\n\nconst Avatar = styled.img`\n  width: 128px;\n  height: 128px;\n  border-radius: 50%;\n  margin-top: -64px;\n  user-select: none;\n  border: solid 8px var(--background-primary);\n  background: var(--background-primary);\n`\n\nconst DarkText = styled.div`\n  color: var(--text-secondary);\n`\n\nconst InfoContainer = styled.div`\n  padding: 16px 18px;\n  border-radius: 8px;\n  background: var(--background-secondary-alt);\n  max-width: 900px;\n  width: 100%;\n  margin-top: 32px;\n`\n\nconst BadgeCss = css`\n  width: 32px;\n  height: 32px;\n  margin-right: 16px;\n`\n\nconst BlueBadge = css`\n  color: var(--accent);\n`\n\nconst GreenBadge = css`\n  color: var(--accent-green);\n`\n\nfunction ProfileView({ user }: ProfileViewProps) {\n  const UserCache = useStore($UserCacheStore);\n\n  return (\n    <Container>\n      { UserCache[user] && (\n        <Fragment>\n          { UserCache[user].banner ? (\n            <Banner style={{ background: `url(${ UserCache[user].banner })`, backgroundSize: 'cover', backgroundPosition: 'center' }} />\n          ) : (\n            <Banner className={ css`background: var(--accent-dark)` } />\n          ) }\n          <CenteredContainer className={ css`flex-direction: column; margin: 0 16px` }>\n            <Avatar src={ UserCache[user].avatar } />\n            <StyledText className={ css`font-size: 28px; font-weight: 900` }>\n              { UserCache[user].username }\n              <DarkText className={ css`display: inline-block` }>#{ UserCache[user].discriminator }</DarkText>\n            </StyledText>\n            <StyledText className={ css`font-size: 18px` }>{ UserCache[user].status }</StyledText>\n            { UserCache[user].description && (\n              <InfoContainer>\n                <StyledText className={ css`font-size: 22px; margin: 0; font-weight: 900; margin-bottom: 16px` }>About me</StyledText>\n                <StyledText className={ css`font-size: 18px; margin: 0` } dangerouslySetInnerHTML={{ __html: markdown(UserCache[user].description || '') }}></StyledText>\n              </InfoContainer>\n            ) }\n            { UserCache[user].verified && (\n              <InfoContainer>\n                <StyledText className={ css`font-size: 22px; margin: 0; font-weight: 900; margin-bottom: 16px` }>Badges</StyledText>\n                { UserCache[user].verified && (<RiCodeSSlashFill className={ classNames({ [StyledIconCss]: true, [BadgeCss]: true, [BlueBadge]: true }) } />) }\n                { UserCache[user].verified && (<RiShieldCheckFill className={ classNames({ [StyledIconCss]: true, [BadgeCss]: true, [GreenBadge]: true }) } />) }\n              </InfoContainer>\n            ) }\n          </CenteredContainer>\n        </Fragment>\n      ) }\n    </Container>\n  )\n}\n\nexport default ProfileView;\n","/home/miha/Documents/projects/js/nexomia-client/src/utils/isTabGuild.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/MemberCacheStore.tsx",["319"],"import { createStore, createEvent } from 'effector-root';\n\nimport GuildMember from './models/GuildMember';\n\nconst cacheMembers = createEvent<GuildMember[]>();\n\ninterface MemberCache {\n  [key: string]: GuildMember\n}\n\nconst $MemberCacheStore = createStore<MemberCache>({});\n\n$MemberCacheStore\n  .on(cacheMembers, (state: MemberCache, members: GuildMember[]) => {\n    let modifiedState = { ...state };\n    members.map((member) => {\n      modifiedState = { ...modifiedState, [member.id]: member };\n    });\n    return modifiedState;\n  })\n\nexport default $MemberCacheStore;\nexport { cacheMembers };\n","/home/miha/Documents/projects/js/nexomia-client/src/components/contextmenus/ContextMenu.tsx",["320"],"/home/miha/Documents/projects/js/nexomia-client/src/store/ContextMenuStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/contextmenus/ContextTab.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/settings/SettingsView.tsx",["321"],"import { styled } from 'linaria/lib/react';\nimport { useParams } from 'react-router-dom';\nimport CenteredContainer from '../layout/CenteredContainer';\nimport RolesView from './guild/RolesView';\n\nconst Wrapper = styled.div`\n  max-width: 700px;\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  margin: 0 16px;\n`\n\ninterface RouteParams {\n  guildId: string,\n  channelId: string\n}\n\nfunction SettingsView() {\n  const { guildId, channelId } = useParams<RouteParams>();\n\n  return (\n    <CenteredContainer>\n      <Wrapper>\n        { channelId === 'roles' && (\n          <RolesView />\n        ) }\n      </Wrapper>\n    </CenteredContainer>\n  ) \n}\n\nexport default SettingsView;\n","/home/miha/Documents/projects/js/nexomia-client/src/components/settings/guild/RolesView.tsx",["322","323"],"import classNames from 'classnames';\nimport { useStore } from 'effector-react';\nimport { css } from 'linaria';\nimport { styled } from 'linaria/react';\nimport { ChangeEvent, Fragment, useState } from 'react';\nimport { RiArrowLeftLine } from 'react-icons/ri';\nimport { useParams } from 'react-router-dom';\nimport RolesService from '../../../services/api/roles/roles.service';\nimport $GuildCacheStore from '../../../store/GuildCacheStore';\nimport PermissionOverwrites from '../../../store/models/PermissionOverwrites';\nimport $RoleCacheStore, { cacheRoles } from '../../../store/RolesCacheStore';\nimport StyledIconCss from '../../css/StyledIconCss';\nimport FilledButton from '../../ui/FilledButton';\nimport InputField from '../../ui/InputField';\nimport LoadingPlaceholder from '../../ui/LoadingPlaceholder';\nimport StyledText from '../../ui/StyledText';\nimport Permission from '../ui/Permission';\nimport PermissionEditor from '../ui/PermissionEditor';\nimport Role from '../ui/Role';\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  padding: 14px;\n  cursor: pointer;\n  border-radius: 4px;\n  flex-grow: 1;\n  flex-direction: row;\n  margin: 16px 0;\n\n  &:hover {\n    background: var(--background-light);\n  }\n`\n\nconst IconCss = css`\n  width: 20px;\n  height: 20px;\n  margin-right: 14px;\n`\n\ninterface RouteParams {\n  guildId: string\n}\n\nfunction RolesView() {\n  const { guildId } = useParams<RouteParams>();\n  const GuildsCache = useStore($GuildCacheStore);\n  const RolesCache = useStore($RoleCacheStore);\n\n  const [roleSelected, setRoleSelected] = useState('');\n  const [editedPermissions, setEditedPermissions] = useState<PermissionOverwrites>({ allow: 0, deny: 0 });\n  const [permissionsWasEdited, setPermissionsWasEdited] = useState(false);\n  const [saveLoading, setSaveLoading] = useState(false);\n\n  const [roleName, setRoleName] = useState('');\n  const [roleColor, setRoleColor] = useState('');\n\n  return (\n    <Fragment>\n      <LoadingPlaceholder title=\"Saving Changes...\" active={ saveLoading } />\n      { !roleSelected ? (\n        <Fragment>\n          <StyledText className={ css`text-align: center; margin: 32px 0` }>\n            Roles help you organize your server and configure permissions for your members.\n            <br />Role permissions are calculated from lowest (default) to highest role.\n          </StyledText>\n          { \n            GuildsCache[guildId]?.roles?.map((role) => (\n              <Role\n                name={ RolesCache[role].name }\n                color={ RolesCache[role].color || 'var(--background-light)' }\n                defaultRole={ RolesCache[role].default === true }\n                onClick={ () => selectRole(role) }\n              /> \n            ))\n          }\n        </Fragment>\n      ) : (\n        <Fragment>\n          <ButtonContainer onClick={ () => goBack() }>\n            <RiArrowLeftLine className={ classNames({ [IconCss]: true, [StyledIconCss]: true }) } />\n            <StyledText className={ css`margin: 0; font-weight: 900` }>\n              { !permissionsWasEdited ? 'Back' : 'Save & Go Back' }\n            </StyledText>\n          </ButtonContainer>\n          <Role\n            name={ roleName }\n            color={ roleColor || 'var(--background-light)' }\n            defaultRole={ RolesCache[roleSelected].default === true }\n            active={ true }\n          />\n          <StyledText className={ css`text-align: center; margin: 48px 0 24px 0; font-size: 22px; font-weight: 900` }>\n            Appearance\n          </StyledText>\n          <StyledText className={ css`text-align: left; margin: 4px; font-size: 14px; font-weight: 900` }>\n            Role Name\n          </StyledText>\n          <InputField\n            className={ css`margin-top: 2px; margin-bottom: 16px` }\n            defaultValue={ RolesCache[roleSelected].name }\n            onChange={ (event: ChangeEvent<HTMLInputElement>) => { setRoleName(event.target.value); setPermissionsWasEdited(true) } }\n          />\n          <StyledText className={ css`text-align: left; margin: 4px; font-size: 14px; font-weight: 900` }>\n            Role Color\n          </StyledText>\n          <InputField\n            className={ css`margin-top: 2px; margin-bottom: 16px` }\n            defaultValue={ RolesCache[roleSelected].color }\n            onChange={ (event: ChangeEvent<HTMLInputElement>) => { setRoleColor(event.target.value); setPermissionsWasEdited(true) } }\n          />\n          <StyledText className={ css`text-align: center; margin: 48px 0 24px 0; font-size: 22px; font-weight: 900` }>\n            Permissions\n          </StyledText>\n          <StyledText className={ css`text-align: center; margin: 0 0 24px 0` }>\n            Configure permissions carefully, forcing a lot of permissions to \"allowed\" state is a bad practice, though you are not restricted from doing this. Higher roles will inherit all permissions from this role and apply their overwrites to them.\n          </StyledText>\n          \n          <PermissionEditor\n            initialPermissions={ RolesCache[roleSelected].permissions }\n            inherit={ !RolesCache[roleSelected].default }\n            onChange={ permissionsEdited }\n          />\n        </Fragment>\n      ) }\n    </Fragment>\n  )\n\n  function permissionsEdited(permissions: PermissionOverwrites) {\n    setEditedPermissions(permissions);\n    setPermissionsWasEdited(true);\n  }\n\n  function selectRole(role: string) {\n    setRoleName(RolesCache[role].name);\n    setRoleColor(RolesCache[role].color || '');\n    setRoleSelected(role);\n  }\n\n  async function goBack() {\n    if (permissionsWasEdited) {\n      setSaveLoading(true);\n\n      const response = await RolesService.patchRole(guildId, roleSelected, {\n        name: roleName,\n        color: roleColor,\n        permissions: editedPermissions\n      });\n\n      if (response) {\n        cacheRoles([response]);\n      }\n\n      setSaveLoading(false);\n    }\n\n    setPermissionsWasEdited(false);\n    setRoleSelected('');\n  }\n}\n\nexport default RolesView;\n","/home/miha/Documents/projects/js/nexomia-client/src/services/api/roles/roles.service.ts",["324"],"import axios from 'axios';\nimport Role from '../../../store/models/Role';\n\nimport CommonRequestManager from '../common';\n\nclass RolesService {\n  async getGuildRoles(guild: string) {\n    const response = await CommonRequestManager.apiRequest('GET', `/guilds/${guild}/roles`, {});\n\n    if (axios.isAxiosError(response)) {\n      return false;\n    }\n\n    return response.data;\n  }\n\n  async patchRole(guild: string, roleId: string, rolePatch: object) {\n    const response = await CommonRequestManager.apiRequest('PATCH', `/guilds/${guild}/roles/${roleId}`, rolePatch);\n\n    if (axios.isAxiosError(response)) {\n      return false;\n    }\n\n    return response.data;\n  }\n}\n\nexport default new RolesService();\n","/home/miha/Documents/projects/js/nexomia-client/src/store/RolesCacheStore.tsx",["325"],"import { createStore, createEvent } from 'effector-root';\n\nimport Role from './models/Role';\n\nconst cacheRoles = createEvent<Role[]>();\n\ninterface RoleCache {\n  [key: string]: Role\n}\n\nconst $RoleCacheStore = createStore<RoleCache>({});\n\n$RoleCacheStore\n  .on(cacheRoles, (state: RoleCache, roles: Role[]) => {\n    let modifiedState = { ...state };\n    roles.map((role) => {\n      modifiedState = { ...modifiedState, [role.id]: role };\n    });\n    return modifiedState;\n  })\n\nexport default $RoleCacheStore;\nexport { cacheRoles };\n","/home/miha/Documents/projects/js/nexomia-client/src/components/settings/ui/Role.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/settings/ui/Permission.tsx",["326","327","328"],"import { css } from 'linaria';\nimport { styled } from 'linaria/react';\nimport { RiArrowRightSLine } from 'react-icons/ri';\nimport StyledIconCss from '../../css/StyledIconCss';\nimport StyledText from '../../ui/StyledText';\n\nimport {\n  RiCheckFill,\n  RiCloseFill\n} from 'react-icons/ri';\nimport classNames from 'classnames';\n\n\nconst Container = styled.div`\n  padding: 16px;\n  border-radius: 4px;\n  background: var(--background-secondary-alt);\n  margin: 4px 0;\n  display: flex;\n  flex-grow: 1;\n  flex-direction: row;\n  align-items: center;\n\n  &:hover {\n    background: var(--background-secondary);\n  }\n`\n\nconst Splitter = styled.div`\n  flex-grow: 1;\n`\n\nconst DefaultIconCss = css`\n  padding: 2px 4px;\n  border-radius: 2px;\n  background: var(--accent);\n  margin: 0;\n  font-size: 14px;\n`\n\nconst IconCss = css`\n  width: 20px;\n  height: 20px;\n  margin-left: 16px;\n`\n\nconst Selector = styled.div`\n  width: 28px;\n  height: 28px;\n  padding: 2px;\n  background: var(--background-light);\n  cursor: pointer;\n\n  & > svg {\n    width: 24px;\n    height: 24px;\n  }\n\n  &:not(.active):hover {\n    background: var(--background-primary);\n  }\n\n  &.active {\n    background: var(--accent);\n  }\n`\n\nconst LeftIconCss = css`border-radius: 2px 0 0 2px`;\nconst RightIconCss = css`border-radius: 0 2px 2px 0`;\n\ninterface PermissionProps {\n  name: string,\n  description: string,\n  active?: number,\n  inherit: boolean,\n  onEnablePerm?: any,\n  onDisablePerm?: any,\n  onInheritPerm?: any\n}\n\nfunction Permission({ name, description, active = 1, inherit, onEnablePerm, onDisablePerm, onInheritPerm }: PermissionProps) {\n  return (\n    <Container>\n      <div>\n        <StyledText className={ css`margin: 0; font-weight: 900` }>{ name }</StyledText>\n        <StyledText className={ css`margin: 0; font-size: 14px` }>{ description }</StyledText>\n      </div>\n      <Splitter />\n      <Selector className={ classNames({ [LeftIconCss]: true, active: active === 0 || (!inherit && active === 1) }) } onClick={ onDisablePerm }>\n        <RiCloseFill className={ StyledIconCss } />\n      </Selector>\n      { inherit && (<Selector className={ classNames({ active: active === 1 }) } onClick={ onInheritPerm } />) }\n      <Selector className={ classNames({ [RightIconCss]: true, active: active === 2 }) } onClick={ onEnablePerm }>\n        <RiCheckFill className={ StyledIconCss } />\n      </Selector>\n    </Container>\n  )\n}\n\nexport default Permission;\n","/home/miha/Documents/projects/js/nexomia-client/src/components/settings/ui/PermissionEditor.tsx",["329","330"],"import { Fragment, useEffect, useState } from 'react';\nimport { css } from 'linaria';\nimport { ComputedPermissions } from '../../../store/models/ComputedPermissions';\nimport PermissionOverwrites from '../../../store/models/PermissionOverwrites';\nimport FilledButton from '../../ui/FilledButton';\nimport Permission from './Permission';\n\ninterface PermissionProps {\n  initialPermissions: PermissionOverwrites,\n  inherit: boolean,\n  onChange: any\n}\n\nfunction PermissionEditor({ initialPermissions, inherit, onChange }: PermissionProps) {\n  const [permissions, setPermissions] = useState(initialPermissions);\n\n  return (\n    <Fragment>\n      <Permission \n        name='Administrator'\n        description='Enables all permissions and bypasses channel restrictions.'\n        active={ getPermissionState(ComputedPermissions.ADMINISTRATOR) }\n        inherit={ inherit }\n        onEnablePerm={ () => enablePermission(ComputedPermissions.ADMINISTRATOR) }\n        onDisablePerm={ () => disablePermission(ComputedPermissions.ADMINISTRATOR) }\n        onInheritPerm={ () => inheritPermission(ComputedPermissions.ADMINISTRATOR) }\n      />\n      <Permission\n        name='View Channels'\n        description='Ability to view channels.'\n        active={ getPermissionState(ComputedPermissions.VIEW_CHANNEL) }\n        inherit={ inherit }\n        onEnablePerm={ () => enablePermission(ComputedPermissions.VIEW_CHANNEL) }\n        onDisablePerm={ () => disablePermission(ComputedPermissions.VIEW_CHANNEL) }\n        onInheritPerm={ () => inheritPermission(ComputedPermissions.VIEW_CHANNEL) }\n      />\n      <Permission\n        name='Read Messages'\n        description='Ability to read messages.'\n        active={ getPermissionState(ComputedPermissions.READ_MESSAGES) }\n        inherit={ inherit }\n        onEnablePerm={ () => enablePermission(ComputedPermissions.READ_MESSAGES) }\n        onDisablePerm={ () => disablePermission(ComputedPermissions.READ_MESSAGES) }\n        onInheritPerm={ () => inheritPermission(ComputedPermissions.READ_MESSAGES) }\n      />\n      <Permission\n        name='Send Messages'\n        description='Ability to send messages.'\n        active={ getPermissionState(ComputedPermissions.WRITE_MESSAGES) }\n        inherit={ inherit }\n        onEnablePerm={ () => enablePermission(ComputedPermissions.WRITE_MESSAGES) }\n        onDisablePerm={ () => disablePermission(ComputedPermissions.WRITE_MESSAGES) }\n        onInheritPerm={ () => inheritPermission(ComputedPermissions.WRITE_MESSAGES) }\n      />\n      <Permission\n        name='Send Voice Messages'\n        description='Ability to send voice messages.'\n        active={ getPermissionState(ComputedPermissions.VOICE_MESSAGES) }\n        inherit={ inherit }\n        onEnablePerm={ () => enablePermission(ComputedPermissions.VOICE_MESSAGES) }\n        onDisablePerm={ () => disablePermission(ComputedPermissions.VOICE_MESSAGES) }\n        onInheritPerm={ () => inheritPermission(ComputedPermissions.VOICE_MESSAGES) }\n      />\n      <Permission\n        name='Use Stickers'\n        description='Ability to use stickers.'\n        active={ getPermissionState(ComputedPermissions.ATTACH_STICKERS) }\n        inherit={ inherit }\n        onEnablePerm={ () => enablePermission(ComputedPermissions.ATTACH_STICKERS) }\n        onDisablePerm={ () => disablePermission(ComputedPermissions.ATTACH_STICKERS) }\n        onInheritPerm={ () => inheritPermission(ComputedPermissions.ATTACH_STICKERS) }\n      />\n      <Permission\n        name='Add Attachments'\n        description='Ability to attach files, images and music to messages.'\n        active={ getPermissionState(ComputedPermissions.ATTACH_FILES) }\n        inherit={ inherit }\n        onEnablePerm={ () => enablePermission(ComputedPermissions.ATTACH_FILES) }\n        onDisablePerm={ () => disablePermission(ComputedPermissions.ATTACH_FILES) }\n        onInheritPerm={ () => inheritPermission(ComputedPermissions.ATTACH_FILES) }\n      />\n      <Permission\n        name='Use Extended Markdown'\n        description='Ability to add tables, hyperlinks to messages and write large text.'\n        active={ getPermissionState(ComputedPermissions.USE_EXTENDED_MARKDOWN) }\n        inherit={ inherit }\n        onEnablePerm={ () => enablePermission(ComputedPermissions.USE_EXTENDED_MARKDOWN) }\n        onDisablePerm={ () => disablePermission(ComputedPermissions.USE_EXTENDED_MARKDOWN) }\n        onInheritPerm={ () => inheritPermission(ComputedPermissions.USE_EXTENDED_MARKDOWN) }\n      />\n      <Permission\n        name='Forward Messages'\n        description='Ability to forward messages to external servers or direct messages.'\n        active={ getPermissionState(ComputedPermissions.FORWARD_MESSAGES_FROM_SERVER) }\n        inherit={ inherit }\n        onEnablePerm={ () => enablePermission(ComputedPermissions.FORWARD_MESSAGES_FROM_SERVER) }\n        onDisablePerm={ () => disablePermission(ComputedPermissions.FORWARD_MESSAGES_FROM_SERVER) }\n        onInheritPerm={ () => inheritPermission(ComputedPermissions.FORWARD_MESSAGES_FROM_SERVER) }\n      />\n      <Permission\n        name='Change Nickname'\n        description='Ability to set a custom nickname.'\n        active={ getPermissionState(ComputedPermissions.CHANGE_SELF_NICKNAME) }\n        inherit={ inherit }\n        onEnablePerm={ () => enablePermission(ComputedPermissions.CHANGE_SELF_NICKNAME) }\n        onDisablePerm={ () => disablePermission(ComputedPermissions.CHANGE_SELF_NICKNAME) }\n        onInheritPerm={ () => inheritPermission(ComputedPermissions.CHANGE_SELF_NICKNAME) }\n      />\n      <Permission\n        name='Change Member Nicknames'\n        description='Ability to change nicknames of all members'\n        active={ getPermissionState(ComputedPermissions.CHANGE_MEMBER_NICKNAMES) }\n        inherit={ inherit }\n        onEnablePerm={ () => enablePermission(ComputedPermissions.CHANGE_MEMBER_NICKNAMES) }\n        onDisablePerm={ () => disablePermission(ComputedPermissions.CHANGE_MEMBER_NICKNAMES) }\n        onInheritPerm={ () => inheritPermission(ComputedPermissions.CHANGE_MEMBER_NICKNAMES) }\n      />\n      <Permission\n        name='Add Reactions'\n        description='Ability to add reactions.'\n        active={ getPermissionState(ComputedPermissions.ADD_REACTIONS) }\n        inherit={ inherit }\n        onEnablePerm={ () => enablePermission(ComputedPermissions.ADD_REACTIONS) }\n        onDisablePerm={ () => disablePermission(ComputedPermissions.ADD_REACTIONS) }\n        onInheritPerm={ () => inheritPermission(ComputedPermissions.ADD_REACTIONS) }\n      />\n      <Permission\n        name='Add External Reactions'\n        description='Ability to add reactions from other servers.'\n        active={ getPermissionState(ComputedPermissions.ADD_EXTERNAL_REACTIONS) }\n        inherit={ inherit }\n        onEnablePerm={ () => enablePermission(ComputedPermissions.ADD_EXTERNAL_REACTIONS) }\n        onDisablePerm={ () => disablePermission(ComputedPermissions.ADD_EXTERNAL_REACTIONS) }\n        onInheritPerm={ () => inheritPermission(ComputedPermissions.ADD_EXTERNAL_REACTIONS) }\n      />\n      <Permission\n        name='Delete Multiple Messages'\n        description='Ability to delete multiple messages (it is also called purging).'\n        active={ getPermissionState(ComputedPermissions.BULK_DELETE) }\n        inherit={ inherit }\n        onEnablePerm={ () => enablePermission(ComputedPermissions.BULK_DELETE) }\n        onDisablePerm={ () => disablePermission(ComputedPermissions.BULK_DELETE) }\n        onInheritPerm={ () => inheritPermission(ComputedPermissions.BULK_DELETE) }\n      />\n      <div className={ css`height: 58px` } />\n    </Fragment>\n  )\n\n  function getPermissionState(compare: number) {\n    return permissions?.allow & compare\n      ? 2\n      : permissions?.deny & compare\n      ? 0\n      : 1\n  }\n\n  function enablePermission(compare: number) {\n    const editedPermissions = { allow: permissions?.allow | compare, deny: permissions?.deny & ~compare };\n    setPermissions(editedPermissions);\n    onChange(editedPermissions);\n  }\n\n  function disablePermission(compare: number) {\n    const editedPermissions = { allow: permissions?.allow & ~compare, deny: permissions?.deny | compare };\n    setPermissions(editedPermissions);\n    onChange(editedPermissions);\n  }\n\n  function inheritPermission(compare: number) {\n    const editedPermissions = { allow: permissions?.allow & ~compare, deny: permissions?.deny & ~compare };\n    setPermissions(editedPermissions);\n    onChange(editedPermissions);\n  }\n}\n\nexport default PermissionEditor;\n","/home/miha/Documents/projects/js/nexomia-client/src/store/models/ComputedPermissions.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/layout/MemberSidebar.tsx",[],{"ruleId":"331","replacedBy":"332"},{"ruleId":"333","replacedBy":"334"},{"ruleId":"335","severity":1,"message":"336","line":6,"column":3,"nodeType":"337","messageId":"338","endLine":6,"endColumn":12},{"ruleId":"335","severity":1,"message":"339","line":43,"column":9,"nodeType":"337","messageId":"338","endLine":43,"endColumn":14},{"ruleId":"340","severity":1,"message":"341","line":57,"column":6,"nodeType":"342","endLine":57,"endColumn":8,"suggestions":"343"},{"ruleId":"335","severity":1,"message":"344","line":7,"column":8,"nodeType":"337","messageId":"338","endLine":7,"endColumn":19},{"ruleId":"335","severity":1,"message":"345","line":18,"column":3,"nodeType":"337","messageId":"338","endLine":18,"endColumn":19},{"ruleId":"335","severity":1,"message":"346","line":30,"column":8,"nodeType":"337","messageId":"338","endLine":30,"endColumn":18},{"ruleId":"335","severity":1,"message":"347","line":74,"column":26,"nodeType":"337","messageId":"338","endLine":74,"endColumn":35},{"ruleId":"340","severity":1,"message":"348","line":96,"column":6,"nodeType":"342","endLine":96,"endColumn":15,"suggestions":"349"},{"ruleId":"335","severity":1,"message":"350","line":67,"column":9,"nodeType":"337","messageId":"338","endLine":67,"endColumn":15},{"ruleId":"340","severity":1,"message":"351","line":40,"column":6,"nodeType":"342","endLine":40,"endColumn":8,"suggestions":"352"},{"ruleId":"340","severity":1,"message":"351","line":39,"column":6,"nodeType":"342","endLine":39,"endColumn":8,"suggestions":"353"},{"ruleId":"335","severity":1,"message":"354","line":45,"column":27,"nodeType":"337","messageId":"338","endLine":45,"endColumn":45},{"ruleId":"355","severity":1,"message":"356","line":1,"column":1,"nodeType":"357","endLine":5,"endColumn":2},{"ruleId":"335","severity":1,"message":"358","line":5,"column":10,"nodeType":"337","messageId":"338","endLine":5,"endColumn":18},{"ruleId":"335","severity":1,"message":"359","line":6,"column":8,"nodeType":"337","messageId":"338","endLine":6,"endColumn":19},{"ruleId":"335","severity":1,"message":"360","line":2,"column":8,"nodeType":"337","messageId":"338","endLine":2,"endColumn":15},{"ruleId":"335","severity":1,"message":"361","line":11,"column":11,"nodeType":"337","messageId":"338","endLine":11,"endColumn":27},{"ruleId":"335","severity":1,"message":"362","line":11,"column":8,"nodeType":"337","messageId":"338","endLine":11,"endColumn":12},{"ruleId":"335","severity":1,"message":"363","line":11,"column":10,"nodeType":"337","messageId":"338","endLine":11,"endColumn":20},{"ruleId":"335","severity":1,"message":"364","line":12,"column":10,"nodeType":"337","messageId":"338","endLine":12,"endColumn":22},{"ruleId":"335","severity":1,"message":"365","line":14,"column":8,"nodeType":"337","messageId":"338","endLine":14,"endColumn":21},{"ruleId":"335","severity":1,"message":"366","line":26,"column":9,"nodeType":"337","messageId":"338","endLine":26,"endColumn":23},{"ruleId":"340","severity":1,"message":"367","line":36,"column":6,"nodeType":"342","endLine":36,"endColumn":15,"suggestions":"368"},{"ruleId":"335","severity":1,"message":"369","line":3,"column":8,"nodeType":"337","messageId":"338","endLine":3,"endColumn":15},{"ruleId":"370","severity":1,"message":"371","line":16,"column":28,"nodeType":"372","messageId":"373","endLine":16,"endColumn":30},{"ruleId":"335","severity":1,"message":"374","line":4,"column":8,"nodeType":"337","messageId":"338","endLine":4,"endColumn":12},{"ruleId":"370","severity":1,"message":"371","line":23,"column":24,"nodeType":"372","messageId":"373","endLine":23,"endColumn":26},{"ruleId":"370","severity":1,"message":"371","line":16,"column":28,"nodeType":"372","messageId":"373","endLine":16,"endColumn":30},{"ruleId":"370","severity":1,"message":"371","line":16,"column":22,"nodeType":"372","messageId":"373","endLine":16,"endColumn":24},{"ruleId":"335","severity":1,"message":"375","line":9,"column":10,"nodeType":"337","messageId":"338","endLine":9,"endColumn":23},{"ruleId":"335","severity":1,"message":"376","line":5,"column":20,"nodeType":"337","messageId":"338","endLine":5,"endColumn":29},{"ruleId":"335","severity":1,"message":"362","line":9,"column":8,"nodeType":"337","messageId":"338","endLine":9,"endColumn":12},{"ruleId":"370","severity":1,"message":"371","line":16,"column":26,"nodeType":"372","messageId":"373","endLine":16,"endColumn":28},{"ruleId":"335","severity":1,"message":"377","line":2,"column":10,"nodeType":"337","messageId":"338","endLine":2,"endColumn":13},{"ruleId":"335","severity":1,"message":"378","line":20,"column":11,"nodeType":"337","messageId":"338","endLine":20,"endColumn":18},{"ruleId":"335","severity":1,"message":"379","line":13,"column":8,"nodeType":"337","messageId":"338","endLine":13,"endColumn":20},{"ruleId":"335","severity":1,"message":"380","line":17,"column":8,"nodeType":"337","messageId":"338","endLine":17,"endColumn":18},{"ruleId":"335","severity":1,"message":"374","line":2,"column":8,"nodeType":"337","messageId":"338","endLine":2,"endColumn":12},{"ruleId":"370","severity":1,"message":"371","line":16,"column":22,"nodeType":"372","messageId":"373","endLine":16,"endColumn":24},{"ruleId":"335","severity":1,"message":"381","line":3,"column":10,"nodeType":"337","messageId":"338","endLine":3,"endColumn":27},{"ruleId":"335","severity":1,"message":"382","line":33,"column":7,"nodeType":"337","messageId":"338","endLine":33,"endColumn":21},{"ruleId":"335","severity":1,"message":"383","line":41,"column":7,"nodeType":"337","messageId":"338","endLine":41,"endColumn":14},{"ruleId":"335","severity":1,"message":"376","line":1,"column":20,"nodeType":"337","messageId":"338","endLine":1,"endColumn":29},{"ruleId":"335","severity":1,"message":"379","line":5,"column":8,"nodeType":"337","messageId":"338","endLine":5,"endColumn":20},"no-native-reassign",["384"],"no-negated-in-lhs",["385"],"@typescript-eslint/no-unused-vars","'useParams' is defined but never used.","Identifier","unusedVar","'match' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'preloadUserInfo'. Either include it or remove the dependency array.","ArrayExpression",["386"],"'$GuildStore' is defined but never used.","'RiVolumeDownFill' is defined but never used.","'classNames' is defined but never used.","'channelId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'channels', 'guildChannels.length', 'loadChannels', 'path', and 'type'. Either include them or remove the dependency array.",["387"],"'modals' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history' and 'token'. Either include them or remove the dependency array.",["388"],["389"],"'setPlaceholderText' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'useStore' is defined but never used.","'$ModalStore' is defined but never used.","'Channel' is defined but never used.","'GuildChannelPath' is defined but never used.","'Dots' is defined but never used.","'cacheUsers' is defined but never used.","'cacheMembers' is defined but never used.","'GuildsService' is defined but never used.","'CachedChannels' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'MessageStore' and 'loadMessages'. Either include them or remove the dependency array.",["390"],"'Message' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Role' is defined but never used.","'setModalState' is defined but never used.","'useEffect' is defined but never used.","'css' is defined but never used.","'guildId' is assigned a value but never used.","'FilledButton' is defined but never used.","'Permission' is defined but never used.","'RiArrowRightSLine' is defined but never used.","'DefaultIconCss' is assigned a value but never used.","'IconCss' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"391","fix":"392"},{"desc":"393","fix":"394"},{"desc":"395","fix":"396"},{"desc":"395","fix":"397"},{"desc":"398","fix":"399"},"Update the dependencies array to be: [preloadUserInfo]",{"range":"400","text":"401"},"Update the dependencies array to be: [channels, guildChannels.length, guildId, loadChannels, path, type]",{"range":"402","text":"403"},"Update the dependencies array to be: [history, token]",{"range":"404","text":"405"},{"range":"406","text":"405"},"Update the dependencies array to be: [MessageStore, channel, loadMessages]",{"range":"407","text":"408"},[1850,1852],"[preloadUserInfo]",[2774,2783],"[channels, guildChannels.length, guildId, loadChannels, path, type]",[1095,1097],"[history, token]",[1045,1047],[1360,1369],"[MessageStore, channel, loadMessages]"]