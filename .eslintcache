[{"/home/miha/Documents/projects/js/nexomia-client/src/index.tsx":"1","/home/miha/Documents/projects/js/nexomia-client/src/views/App.tsx":"2","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Sidebar.tsx":"3","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Content.tsx":"4","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/SidebarHeader.tsx":"5","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/ContentHeader.tsx":"6","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Guilds.tsx":"7","/home/miha/Documents/projects/js/nexomia-client/src/components/guilds/UserMenu.tsx":"8","/home/miha/Documents/projects/js/nexomia-client/src/components/guilds/PanelButton.tsx":"9","/home/miha/Documents/projects/js/nexomia-client/src/views/Login.tsx":"10","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/Layer.tsx":"11","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/Modal.tsx":"12","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/ModalHeader.tsx":"13","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/InputField.tsx":"14","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/FilledButton.tsx":"15","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/StyledText.tsx":"16","/home/miha/Documents/projects/js/nexomia-client/src/views/Register.tsx":"17","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/LoadingPlaceholder.tsx":"18","/home/miha/Documents/projects/js/nexomia-client/src/components/animations/Dots.tsx":"19","/home/miha/Documents/projects/js/nexomia-client/src/i18n/config.ts":"20","/home/miha/Documents/projects/js/nexomia-client/src/services/api/auth/auth.service.ts":"21","/home/miha/Documents/projects/js/nexomia-client/src/services/api/common.ts":"22","/home/miha/Documents/projects/js/nexomia-client/src/config.ts":"23","/home/miha/Documents/projects/js/nexomia-client/src/services/api/users/users.service.ts":"24","/home/miha/Documents/projects/js/nexomia-client/src/services/api/guilds/guilds.service.ts":"25","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Modals.tsx":"26","/home/miha/Documents/projects/js/nexomia-client/src/components/modals/ServerCreationModal.tsx":"27","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/BigPageButton.tsx":"28","/home/miha/Documents/projects/js/nexomia-client/src/components/css/PanelIconCss.tsx":"29","/home/miha/Documents/projects/js/nexomia-client/src/components/css/LayerBackgroundShadeCss.tsx":"30","/home/miha/Documents/projects/js/nexomia-client/src/components/css/InactiveLayerCss.tsx":"31","/home/miha/Documents/projects/js/nexomia-client/src/components/sidebar/Tab.tsx":"32","/home/miha/Documents/projects/js/nexomia-client/src/components/css/StyledIconCss.tsx":"33","/home/miha/Documents/projects/js/nexomia-client/src/store/UserStore.tsx":"34","/home/miha/Documents/projects/js/nexomia-client/src/store/AuthStore.tsx":"35","/home/miha/Documents/projects/js/nexomia-client/src/store/GuildStore.tsx":"36","/home/miha/Documents/projects/js/nexomia-client/src/store/ModalStore.tsx":"37"},{"size":679,"mtime":1627208432679,"results":"38","hashOfConfig":"39"},{"size":2540,"mtime":1627206044497,"results":"40","hashOfConfig":"39"},{"size":1796,"mtime":1627208225252,"results":"41","hashOfConfig":"39"},{"size":564,"mtime":1626934198646,"results":"42","hashOfConfig":"39"},{"size":163,"mtime":1627018358125,"results":"43","hashOfConfig":"39"},{"size":444,"mtime":1627196551731,"results":"44","hashOfConfig":"39"},{"size":2573,"mtime":1627208093063,"results":"45","hashOfConfig":"39"},{"size":2085,"mtime":1627208711557,"results":"46","hashOfConfig":"39"},{"size":385,"mtime":1627018915969,"results":"47","hashOfConfig":"39"},{"size":3263,"mtime":1627206351539,"results":"48","hashOfConfig":"39"},{"size":261,"mtime":1627027947598,"results":"49","hashOfConfig":"39"},{"size":308,"mtime":1627028022731,"results":"50","hashOfConfig":"39"},{"size":277,"mtime":1626934198646,"results":"51","hashOfConfig":"39"},{"size":769,"mtime":1626934198644,"results":"52","hashOfConfig":"39"},{"size":462,"mtime":1626934198646,"results":"53","hashOfConfig":"39"},{"size":252,"mtime":1626934198646,"results":"54","hashOfConfig":"39"},{"size":3966,"mtime":1627206858841,"results":"55","hashOfConfig":"39"},{"size":1554,"mtime":1627018288813,"results":"56","hashOfConfig":"39"},{"size":616,"mtime":1626934226635,"results":"57","hashOfConfig":"39"},{"size":334,"mtime":1626959070191,"results":"58","hashOfConfig":"39"},{"size":688,"mtime":1626955086129,"results":"59","hashOfConfig":"39"},{"size":981,"mtime":1626966587866,"results":"60","hashOfConfig":"39"},{"size":74,"mtime":1626946161504,"results":"61","hashOfConfig":"39"},{"size":349,"mtime":1626965233867,"results":"62","hashOfConfig":"39"},{"size":819,"mtime":1627040440629,"results":"63","hashOfConfig":"39"},{"size":391,"mtime":1627207849036,"results":"64","hashOfConfig":"39"},{"size":4501,"mtime":1627208337963,"results":"65","hashOfConfig":"39"},{"size":467,"mtime":1627027430873,"results":"66","hashOfConfig":"39"},{"size":131,"mtime":1627022154493,"results":"67","hashOfConfig":"39"},{"size":83,"mtime":1627028155787,"results":"68","hashOfConfig":"39"},{"size":134,"mtime":1627028396713,"results":"69","hashOfConfig":"39"},{"size":1039,"mtime":1627193015898,"results":"70","hashOfConfig":"39"},{"size":84,"mtime":1627022005885,"results":"71","hashOfConfig":"39"},{"size":614,"mtime":1627208796800,"results":"72","hashOfConfig":"39"},{"size":712,"mtime":1627208944970,"results":"73","hashOfConfig":"39"},{"size":438,"mtime":1627208788420,"results":"74","hashOfConfig":"39"},{"size":373,"mtime":1627208792770,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"79"},"1yg1bzx",{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"79"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"79"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"79"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"79"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"79"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"79"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/miha/Documents/projects/js/nexomia-client/src/index.tsx",["158"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\n\nimport { Provider } from 'react-redux';\n\nimport App from './views/App';\nimport Login from './views/Login';\nimport Register from './views/Register';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Switch>\n        <Route path='/channels'>\n          <App />\n        </Route>\n        <Route path='/login'>\n          <Login />\n        </Route>\n        <Route path='/register'>\n          <Register />\n        </Route>\n      </Switch>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n",["159","160"],"/home/miha/Documents/projects/js/nexomia-client/src/views/App.tsx",["161"],"import {\n  Switch,\n  Route,\n  useRouteMatch,\n  useHistory\n} from 'react-router-dom';\n\nimport { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { useStore } from 'effector-react';\nimport $AuthStore, { setToken } from '../store/AuthStore';\nimport { setUser } from '../store/UserStore';\nimport { setGuilds } from '../store/GuildStore';\n\nimport UsersService from '../services/api/users/users.service';\nimport GuildsService from '../services/api/guilds/guilds.service';\nimport CommonRequestManager from '../services/api/common';\n\nimport '../i18n/config';\n\nimport '../styles/App.css';\n\nimport Guilds from '../components/layout/Guilds';\nimport Sidebar from '../components/layout/Sidebar';\nimport Content from '../components/layout/Content';\nimport LoadingPlaceholder from '../components/ui/LoadingPlaceholder';\nimport Modals from '../components/layout/Modals';\n\nimport preloaders from '../i18n/preloaders.json';\n\nfunction App() {\n  const { t } = useTranslation(['states']);\n\n  const { token } = useStore($AuthStore);\n\n  const match = useRouteMatch();\n  const history = useHistory();\n\n  const [loaded, setLoaded] = useState(false);\n\n  const [loaderTitleAuthor, setLoaderTitleAuthor] = useState(0);\n  const [loaderTitleId, setLoaderTitleId] = useState(0);\n\n  useEffect(() => {\n    const authorId = getRandomInt(preloaders.authors.length)\n    setLoaderTitleAuthor(authorId);\n    setLoaderTitleId(preloaders.authors[authorId].prefix + getRandomInt(preloaders.authors[authorId].count));\n\n    preloadUserInfo();\n  }, []);\n\n  return (\n    <div className=\"App dark-theme\">\n      <LoadingPlaceholder\n        title={ t(`states:loading.${loaderTitleId.toString()}`) }\n        subtext={ `@${preloaders.authors[loaderTitleAuthor].name}` }\n        active={ !loaded }\n        solid={ true }\n      />\n      <Switch>\n        <Route path={`${match.path}/:guildId`}>\n          <Modals />\n          <Guilds />\n          <Sidebar />\n          <Content />\n          <Sidebar type=\"members\" />\n        </Route>\n      </Switch>\n    </div>\n  );\n\n  async function preloadUserInfo() {\n    CommonRequestManager.setToken(token);\n    const userInfo = await UsersService.getUser('@me');\n    if (!userInfo) {\n      setToken('');\n      history.push('/login');\n      return;\n    }\n\n    const guilds = await GuildsService.getUserGuilds();\n\n    setUser(userInfo);\n    setGuilds(guilds);\n\n    setLoaded(true);\n  }\n}\n\nfunction getRandomInt(max: number): number {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nexport default App;\n\n","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Sidebar.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Content.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/layout/SidebarHeader.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/layout/ContentHeader.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Guilds.tsx",["162"],"import { styled } from 'linaria/react';\nimport { css } from 'linaria';\n\nimport classNames from 'classnames';\n\nimport { useHistory, useParams } from 'react-router-dom';\n\nimport {\n  RiAddFill\n} from 'react-icons/ri'\n\nimport { useStore } from 'effector-react';\nimport $ModalStore, { setModalState } from '../../store/ModalStore';\nimport $GuildStore from '../../store/GuildStore';\n\nimport UserMenu from '../guilds/UserMenu';\nimport PanelButton from '../guilds/PanelButton';\nimport StyledText from '../ui/StyledText';\nimport PanelIconCss from '../css/PanelIconCss';\n\nconst GuildsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 64px;\n  align-self: stretch;\n  background: var(--background-secondary);\n`\n\nconst Splitter = styled.div`\n  height: 4px;\n  width: calc(100% - 32px);\n  margin: 0 16px 8px 16px;\n  border-radius: 2px;\n  background: var(--background-primary);\n`\n\nconst AvatarImg = styled.img`\n  width: 100%;\n  height: 100%;\n`\n\nconst GuildLetters = css`\n  line-height: 48px;\n  height: 48px;\n  text-align: center;\n  font-weight: 600;\n  margin: 0;\n`\n\ninterface RouteParams {\n  guildId: string\n}\n\nfunction Guilds() {\n  const history = useHistory();\n  const { guildId } = useParams<RouteParams>();\n\n  const modals = useStore($ModalStore);\n  const guilds = useStore($GuildStore);\n\n  return (\n    <GuildsContainer>\n      <UserMenu />\n      <Splitter />\n      {\n        guilds.map((guild) => (\n          <PanelButton\n            onClick={ () => switchGuild(guild.id) }\n            key={ guild.id }\n            className={ classNames({ active: guildId === guild.id }) }\n          >\n            { guild.icon && <AvatarImg src={ guild.icon } /> }\n            {\n              !guild.icon &&\n              (\n                <StyledText className={ GuildLetters }>\n                  {\n                    guild.name.split(' ')[1]\n                    ? guild.name.split(' ')[0][0] + guild.name.split(' ')[1][0]\n                    : guild.name.split(' ')[0][0] + (\n                      guild.name.split(' ')[0][1]\n                      ? guild.name.split(' ')[0][1]\n                      : ''\n                    )\n                  }\n                </StyledText>\n              )\n            }\n          </PanelButton>\n        ))\n      }\n      <PanelButton className={ css`margin-bottom: 0` } onClick={ () => { setModalState({ serverCreation: true }) } }>\n        <RiAddFill className={ PanelIconCss } />\n      </PanelButton>\n    </GuildsContainer>\n  );\n\n  function switchGuild(id: string) {\n    history.push(`/channels/${id}`);\n  }\n}\n\nexport default Guilds;\n","/home/miha/Documents/projects/js/nexomia-client/src/components/guilds/UserMenu.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/guilds/PanelButton.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/views/Login.tsx",["163"],"import { css } from 'linaria';\n\nimport { useState, useRef, useEffect } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\n\nimport { useTranslation } from 'react-i18next';\n\nimport { useStore } from 'effector-react';\nimport $AuthStore, { setToken, setRefreshToken } from '../store/AuthStore';\n\nimport AuthService from '../services/api/auth/auth.service';\n\nimport '../styles/App.css';\n\nimport Layer from '../components/ui/Layer';\nimport Modal from '../components/ui/Modal';\nimport ModalHeader from '../components/ui/ModalHeader';\nimport InputField from '../components/ui/InputField';\nimport FilledButton from '../components/ui/FilledButton';\nimport StyledText from '../components/ui/StyledText';\nimport LoadingPlaceholder from '../components/ui/LoadingPlaceholder';\n\nconst modalCss = css`\n  width: 440px;\n`\n\nconst negativeColorCss = css`\n  color: var(--text-negative);\n`\n\nfunction Login() {\n  const { token } = useStore($AuthStore);\n  const history = useHistory();\n\n  useEffect(() => {\n    console.log(token)\n    if (token && token !== '') {\n      history.push('/channels/@home');\n    }\n  }, []);\n\n  const { t } = useTranslation(['reg']);\n\n  const [loginLoading, setLoginLoading] = useState(false);\n  const [emailError, setEmailError] = useState(false);\n  const [passwordError, setPasswordError] = useState(false);\n  const [loginError, setLoginError] = useState(false);\n\n  const emailInput = useRef<HTMLInputElement>(null);\n  const passwordInput = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    console.log(emailInput);\n  }, []);\n\n  return (\n    <div className=\"Login dark-theme\">\n      <Layer>\n        <Modal className={ modalCss }>\n          <LoadingPlaceholder title={ t('reg:logging_in') } active={ loginLoading } />\n          <ModalHeader>{ t('reg:log_in') }<br /><StyledText>{ t('reg:welcomer_log_in') }</StyledText></ModalHeader>\n          <InputField placeholder=\"Email\" ref={ emailInput } />\n          { (emailError && <StyledText className={ negativeColorCss }>{ t('reg:errors.required_field') }</StyledText>) }\n          <InputField placeholder={ t('reg:fields.password') } type=\"password\" hidden={ true } ref={ passwordInput } />\n          { (passwordError && <StyledText className={ negativeColorCss }>{ t('reg:errors.required_field') }</StyledText>) }\n          { (loginError && <StyledText className={ negativeColorCss }>{ t('reg:errors.invalid_credentials') }</StyledText>) }\n          <StyledText>{ t('reg:no_account') } <Link to=\"/register\">{ t('reg:register') }</Link></StyledText>\n          <FilledButton onClick={ login }>{ t('reg:continue') }</FilledButton>\n        </Modal>\n      </Layer>\n    </div>\n  );\n\n  async function login() {\n    setLoginError(false);\n    setEmailError(!emailInput.current?.value);\n    setPasswordError(!passwordInput.current?.value);\n\n    if (!emailInput.current?.value || !passwordInput.current?.value) return;\n\n    setLoginLoading(true);\n\n    const response = await AuthService.login(emailInput.current?.value, passwordInput.current?.value);\n\n    setLoginLoading(false);\n\n    if (!response) {\n      setLoginError(true);\n      return;\n    }\n\n    setToken(response.access_token);\n    setRefreshToken(response.refresh_token);\n\n    history.push('/channels/@home');\n  }\n}\n\nexport default Login;\n","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/Layer.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/ui/Modal.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/ui/ModalHeader.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/ui/InputField.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/ui/FilledButton.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/ui/StyledText.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/views/Register.tsx",["164","165"],"import { css } from 'linaria';\n\nimport { useState, Fragment, useRef, useEffect } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\n\nimport { useTranslation } from 'react-i18next';\n\nimport { useStore } from 'effector-react';\nimport $AuthStore from '../store/AuthStore';\n\nimport AuthService from '../services/api/auth/auth.service';\n\nimport '../styles/App.css';\n\nimport Layer from '../components/ui/Layer';\nimport Modal from '../components/ui/Modal';\nimport ModalHeader from '../components/ui/ModalHeader';\nimport InputField from '../components/ui/InputField';\nimport FilledButton from '../components/ui/FilledButton';\nimport StyledText from '../components/ui/StyledText';\nimport LoadingPlaceholder from '../components/ui/LoadingPlaceholder';\n\nconst modalCss = css`\n  width: 440px\n`\n\nconst negativeColorCss = css`\n  color: var(--text-negative);\n`\n\nfunction Register() {\n  const { token } = useStore($AuthStore);\n  const history = useHistory();\n\n  useEffect(() => {\n    if (token) {\n      history.push('/channels/me');\n    }\n  }, []);\n\n  const { t } = useTranslation(['reg']);\n\n  const [registerLoading, setRegisterLoading] = useState(false);\n  const [registerState, setRegisterState] = useState(0);\n  const [placeholderText, setPlaceholderText] = useState(0);\n  const [emailError, setEmailError] = useState(false);\n  const [usernameError, setUsernameError] = useState(false);\n  const [passwordError, setPasswordError] = useState(false);\n\n  const emailInput = useRef<HTMLInputElement>(null);\n  const usernameInput = useRef<HTMLInputElement>(null);\n  const passwordInput = useRef<HTMLInputElement>(null);\n\n  return (\n    <div className=\"Login dark-theme\">\n      <Layer>\n        <Modal className={ modalCss }>\n          <LoadingPlaceholder title={ (placeholderText === 0 && 'Creating your account...') || 'Almost there...' } active={ registerLoading } />\n\n          { registerState === 0 && (\n            <Fragment>\n              <ModalHeader>{ t('reg:register') }<br /><StyledText>{ t('reg:welcomer_register') }</StyledText></ModalHeader>\n              <InputField placeholder=\"Email\" ref={ emailInput } />\n              { (emailError && <StyledText className={ negativeColorCss }>{ t('reg:errors.required_field') }</StyledText>) }\n              <InputField placeholder={ t('reg:fields.username') } ref={ usernameInput } />\n              { (usernameError && <StyledText className={ negativeColorCss }>{ t('reg:errors.required_field') }</StyledText>) }\n              <InputField placeholder={ t('reg:fields.password') } type=\"password\" ref={ passwordInput } hidden={ true } />\n              { (passwordError && <StyledText className={ negativeColorCss }>{ t('reg:errors.required_field') }</StyledText>) }\n              <StyledText>{ t('reg:has_account') } <Link to=\"/login\">{ t('reg:log_in') }</Link></StyledText>\n              <FilledButton onClick={ register }>{ t('reg:continue') }</FilledButton>\n            </Fragment>\n          ) }\n\n          { registerState === 1 && (\n            <Fragment>\n              <ModalHeader>{ t('reg:account_created') }<br /><StyledText>{ t('reg:account_log_in') }</StyledText></ModalHeader>\n              <FilledButton onClick={ login }>{ t('reg:continue') }</FilledButton>\n            </Fragment>\n          ) }\n        </Modal>\n      </Layer>\n    </div>\n  );\n\n  async function register() {\n    setEmailError(!emailInput.current?.value);\n    setUsernameError(!usernameInput.current?.value);\n    setPasswordError(!passwordInput.current?.value);\n\n    if (!emailInput.current?.value || !usernameInput.current?.value || !passwordInput.current?.value) return;\n\n    setRegisterLoading(true);\n\n    const response = await AuthService.register(\n      emailInput.current?.value,\n      usernameInput.current?.value,\n      passwordInput.current?.value\n    );\n\n    if (!response) return;\n\n    setRegisterLoading(false);\n    setRegisterState(1);\n  }\n\n  function login() {\n    history.push('/login');\n  }\n}\n\nexport default Register;\n","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/LoadingPlaceholder.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/animations/Dots.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/i18n/config.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/services/api/auth/auth.service.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/services/api/common.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/config.ts",["166"],"export default {\n  api: {\n    endpoint: 'http://127.0.0.1:7081/api'\n  }\n}\n","/home/miha/Documents/projects/js/nexomia-client/src/services/api/users/users.service.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/services/api/guilds/guilds.service.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Modals.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/modals/ServerCreationModal.tsx",["167","168"],"import { css } from 'linaria';\nimport classNames from 'classnames';\nimport { useState, useRef, Fragment, useEffect } from 'react';\n\nimport { useStore } from 'effector-react';\nimport $ModalStore, { setModalState } from '../../store/ModalStore';\nimport { addGuild } from '../../store/GuildStore';\n\nimport GuildsService from '../../services/api/guilds/guilds.service';\n\nimport Layer from '../ui/Layer';\nimport LayerBackgroundShadeCss from '../css/LayerBackgroundShadeCss';\nimport InactiveLayerCss from '../css/InactiveLayerCss';\nimport Modal from '../ui/Modal';\nimport ModalHeader from '../ui/ModalHeader';\nimport StyledText from '../ui/StyledText';\nimport BigPageButton from '../ui/BigPageButton';\nimport InputField from '../ui/InputField';\nimport FilledButton from '../ui/FilledButton';\nimport LoadingPlaceholder from '../ui/LoadingPlaceholder';\n\ninterface ServerCreationModalProps {\n  active: boolean\n}\n\nconst negativeColorCss = css`\n  color: var(--text-negative);\n`\n\nfunction ServerCreationModal({ active }: ServerCreationModalProps) {\n  const layerRef = useRef(null);\n\n  const [modalPage, setModalPage] = useState(0);\n  const [nameValue, setNameValue] = useState('');\n  const [inviteValue, setInviteValue] = useState('');\n\n  const [joinError, setJoinError] = useState(false);\n  const [createError, setCreateError] = useState(false);\n\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (active) {\n      setModalPage(0);\n      setJoinError(false);\n      setCreateError(false);\n      setNameValue('');\n      setInviteValue('');\n    }\n  }, [active]);\n\n  return (\n    <Layer className={ classNames({ [LayerBackgroundShadeCss]: true, [InactiveLayerCss]: !active }) } onClick={ (event) => { closeModal(event) } } ref={ layerRef }>\n      <Modal className={ css`width: 440px` }>\n        <LoadingPlaceholder title={ (modalPage === 1 && 'Creating your server...') || 'Joining server...' } active={ loading } />\n        { modalPage === 0 && (\n          <Fragment>\n            <ModalHeader>Join or create a server<br /><StyledText>Talk with friends in your private space or create a public community!</StyledText></ModalHeader>\n            <BigPageButton onClick={ () => setModalPage(1) }>Create a server</BigPageButton>\n            <BigPageButton onClick={ () => setModalPage(2) }>Join a server</BigPageButton>\n          </Fragment>\n        ) }\n\n        { modalPage === 1 && (\n          <Fragment>\n            <ModalHeader>Name your server</ModalHeader>\n            <InputField placeholder=\"Server Name\" onChange={ (event) => { setNameValue(event.target.value) } } />\n            { (createError && <StyledText className={ negativeColorCss }>Failed to create server.</StyledText>) }\n            <FilledButton onClick={ createServer }>Create</FilledButton>\n          </Fragment>\n        ) }\n\n        { modalPage === 2 && (\n          <Fragment>\n            <ModalHeader>Enter your invite</ModalHeader>\n            <InputField placeholder=\"Invite Code\" onChange={ (event) => { setInviteValue(event.target.value) } } />\n            { (joinError && <StyledText className={ negativeColorCss }>Failed to join this server. Invite code is invalid or you have been banned from that server.</StyledText>) }\n            <FilledButton onClick={ joinServer }>Join</FilledButton>\n          </Fragment>\n        ) }\n      </Modal>\n    </Layer>\n  );\n\n  // TODO: что-то сделать с этим пиздецом в типах\n  function closeModal(event: any) {\n    if (event.target !== layerRef.current) return;\n    setModalState({ serverCreation: false });\n  }\n\n  async function createServer() {\n    setLoading(true);\n    const response = await GuildsService.createGuild(nameValue);\n    if (!response) {\n      setCreateError(true);\n      setLoading(false);\n      return;\n    }\n\n    const { id, name } = response;\n\n    addGuild({\n      id,\n      name,\n      icon: response.icon || ''\n    });\n\n    setLoading(false);\n    setNameValue('');\n    setInviteValue('');\n    setModalState({ serverCreation: false });\n  }\n\n  async function joinServer() {\n    setLoading(true);\n    const response = await GuildsService.joinGuild(inviteValue);\n    if (!response) {\n      setJoinError(true);\n      setLoading(false);\n      return;\n    }\n\n    const { id, name } = response;\n\n    addGuild({\n      id,\n      name,\n      icon: response.icon || ''\n    });\n\n    setLoading(false);\n    setNameValue('');\n    setInviteValue('');\n    setModalState({ serverCreation: false });\n  }\n}\n\nexport default ServerCreationModal;\n","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/BigPageButton.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/css/PanelIconCss.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/css/LayerBackgroundShadeCss.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/css/InactiveLayerCss.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/sidebar/Tab.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/css/StyledIconCss.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/UserStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/AuthStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/GuildStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/ModalStore.tsx",[],{"ruleId":"169","severity":1,"message":"170","line":11,"column":10,"nodeType":"171","messageId":"172","endLine":11,"endColumn":18},{"ruleId":"173","replacedBy":"174"},{"ruleId":"175","replacedBy":"176"},{"ruleId":"177","severity":1,"message":"178","line":51,"column":6,"nodeType":"179","endLine":51,"endColumn":8,"suggestions":"180"},{"ruleId":"169","severity":1,"message":"181","line":58,"column":9,"nodeType":"171","messageId":"172","endLine":58,"endColumn":15},{"ruleId":"177","severity":1,"message":"182","line":40,"column":6,"nodeType":"179","endLine":40,"endColumn":8,"suggestions":"183"},{"ruleId":"177","severity":1,"message":"182","line":39,"column":6,"nodeType":"179","endLine":39,"endColumn":8,"suggestions":"184"},{"ruleId":"169","severity":1,"message":"185","line":45,"column":27,"nodeType":"171","messageId":"172","endLine":45,"endColumn":45},{"ruleId":"186","severity":1,"message":"187","line":1,"column":1,"nodeType":"188","endLine":5,"endColumn":2},{"ruleId":"169","severity":1,"message":"189","line":5,"column":10,"nodeType":"171","messageId":"172","endLine":5,"endColumn":18},{"ruleId":"169","severity":1,"message":"190","line":6,"column":8,"nodeType":"171","messageId":"172","endLine":6,"endColumn":19},"@typescript-eslint/no-unused-vars","'Provider' is defined but never used.","Identifier","unusedVar","no-native-reassign",["191"],"no-negated-in-lhs",["192"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'preloadUserInfo'. Either include it or remove the dependency array.","ArrayExpression",["193"],"'modals' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history' and 'token'. Either include them or remove the dependency array.",["194"],["195"],"'setPlaceholderText' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'useStore' is defined but never used.","'$ModalStore' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"196","fix":"197"},{"desc":"198","fix":"199"},{"desc":"198","fix":"200"},"Update the dependencies array to be: [preloadUserInfo]",{"range":"201","text":"202"},"Update the dependencies array to be: [history, token]",{"range":"203","text":"204"},{"range":"205","text":"204"},[1548,1550],"[preloadUserInfo]",[1105,1107],"[history, token]",[1044,1046]]