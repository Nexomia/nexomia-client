[{"/home/miha/Documents/projects/js/nexomia-client/src/index.tsx":"1","/home/miha/Documents/projects/js/nexomia-client/src/views/App.tsx":"2","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Sidebar.tsx":"3","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Content.tsx":"4","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/SidebarHeader.tsx":"5","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/ContentHeader.tsx":"6","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Guilds.tsx":"7","/home/miha/Documents/projects/js/nexomia-client/src/components/guilds/UserMenu.tsx":"8","/home/miha/Documents/projects/js/nexomia-client/src/components/guilds/PanelButton.tsx":"9","/home/miha/Documents/projects/js/nexomia-client/src/views/Login.tsx":"10","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/Layer.tsx":"11","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/Modal.tsx":"12","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/ModalHeader.tsx":"13","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/InputField.tsx":"14","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/FilledButton.tsx":"15","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/StyledText.tsx":"16","/home/miha/Documents/projects/js/nexomia-client/src/views/Register.tsx":"17","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/LoadingPlaceholder.tsx":"18","/home/miha/Documents/projects/js/nexomia-client/src/components/animations/Dots.tsx":"19","/home/miha/Documents/projects/js/nexomia-client/src/i18n/config.ts":"20","/home/miha/Documents/projects/js/nexomia-client/src/services/api/auth/auth.service.ts":"21","/home/miha/Documents/projects/js/nexomia-client/src/services/api/common.ts":"22","/home/miha/Documents/projects/js/nexomia-client/src/config.ts":"23","/home/miha/Documents/projects/js/nexomia-client/src/services/api/users/users.service.ts":"24","/home/miha/Documents/projects/js/nexomia-client/src/services/api/guilds/guilds.service.ts":"25","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Modals.tsx":"26","/home/miha/Documents/projects/js/nexomia-client/src/components/modals/ServerCreationModal.tsx":"27","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/BigPageButton.tsx":"28","/home/miha/Documents/projects/js/nexomia-client/src/components/css/PanelIconCss.tsx":"29","/home/miha/Documents/projects/js/nexomia-client/src/components/css/LayerBackgroundShadeCss.tsx":"30","/home/miha/Documents/projects/js/nexomia-client/src/components/css/InactiveLayerCss.tsx":"31","/home/miha/Documents/projects/js/nexomia-client/src/components/sidebar/Tab.tsx":"32","/home/miha/Documents/projects/js/nexomia-client/src/components/css/StyledIconCss.tsx":"33","/home/miha/Documents/projects/js/nexomia-client/src/store/UserStore.tsx":"34","/home/miha/Documents/projects/js/nexomia-client/src/store/AuthStore.tsx":"35","/home/miha/Documents/projects/js/nexomia-client/src/store/GuildStore.tsx":"36","/home/miha/Documents/projects/js/nexomia-client/src/store/ModalStore.tsx":"37","/home/miha/Documents/projects/js/nexomia-client/src/store/ChannelStore.tsx":"38","/home/miha/Documents/projects/js/nexomia-client/src/services/api/channels/channels.service.ts":"39","/home/miha/Documents/projects/js/nexomia-client/src/components/chat/ChatView.tsx":"40","/home/miha/Documents/projects/js/nexomia-client/src/components/chat/ChatInput.tsx":"41","/home/miha/Documents/projects/js/nexomia-client/src/components/chat/MessageView.tsx":"42","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/CenteredContainer.tsx":"43","/home/miha/Documents/projects/js/nexomia-client/src/services/api/messages/messages.service.ts":"44","/home/miha/Documents/projects/js/nexomia-client/src/store/MessageStore.tsx":"45","/home/miha/Documents/projects/js/nexomia-client/src/store/MessageCacheStore.tsx":"46","/home/miha/Documents/projects/js/nexomia-client/src/store/GuildCacheStore.tsx":"47","/home/miha/Documents/projects/js/nexomia-client/src/store/ChannelCacheStore.tsx":"48","/home/miha/Documents/projects/js/nexomia-client/src/store/UserCacheStore.tsx":"49","/home/miha/Documents/projects/js/nexomia-client/src/components/chat/MessageRenderer.tsx":"50"},{"size":753,"mtime":1627209441883,"results":"51","hashOfConfig":"52"},{"size":2708,"mtime":1627297463226,"results":"53","hashOfConfig":"52"},{"size":4013,"mtime":1627305747347,"results":"54","hashOfConfig":"52"},{"size":964,"mtime":1627296080974,"results":"55","hashOfConfig":"52"},{"size":163,"mtime":1627018358125,"results":"56","hashOfConfig":"52"},{"size":1173,"mtime":1627298601633,"results":"57","hashOfConfig":"52"},{"size":2915,"mtime":1627298691507,"results":"58","hashOfConfig":"52"},{"size":2065,"mtime":1627209668771,"results":"59","hashOfConfig":"52"},{"size":434,"mtime":1627227776159,"results":"60","hashOfConfig":"52"},{"size":3263,"mtime":1627206351539,"results":"61","hashOfConfig":"52"},{"size":261,"mtime":1627027947598,"results":"62","hashOfConfig":"52"},{"size":308,"mtime":1627028022731,"results":"63","hashOfConfig":"52"},{"size":277,"mtime":1626934198646,"results":"64","hashOfConfig":"52"},{"size":769,"mtime":1627227991041,"results":"65","hashOfConfig":"52"},{"size":462,"mtime":1627227809580,"results":"66","hashOfConfig":"52"},{"size":252,"mtime":1627214753219,"results":"67","hashOfConfig":"52"},{"size":3966,"mtime":1627206858841,"results":"68","hashOfConfig":"52"},{"size":1554,"mtime":1627018288813,"results":"69","hashOfConfig":"52"},{"size":616,"mtime":1626934226635,"results":"70","hashOfConfig":"52"},{"size":334,"mtime":1626959070191,"results":"71","hashOfConfig":"52"},{"size":688,"mtime":1626955086129,"results":"72","hashOfConfig":"52"},{"size":981,"mtime":1626966587866,"results":"73","hashOfConfig":"52"},{"size":74,"mtime":1626946161504,"results":"74","hashOfConfig":"52"},{"size":349,"mtime":1627295837712,"results":"75","hashOfConfig":"52"},{"size":1058,"mtime":1627295901306,"results":"76","hashOfConfig":"52"},{"size":391,"mtime":1627207849036,"results":"77","hashOfConfig":"52"},{"size":4606,"mtime":1627297821529,"results":"78","hashOfConfig":"52"},{"size":467,"mtime":1627027430873,"results":"79","hashOfConfig":"52"},{"size":131,"mtime":1627022154493,"results":"80","hashOfConfig":"52"},{"size":83,"mtime":1627028155787,"results":"81","hashOfConfig":"52"},{"size":134,"mtime":1627028396713,"results":"82","hashOfConfig":"52"},{"size":1403,"mtime":1627236112525,"results":"83","hashOfConfig":"52"},{"size":84,"mtime":1627022005885,"results":"84","hashOfConfig":"52"},{"size":619,"mtime":1627209298039,"results":"85","hashOfConfig":"52"},{"size":717,"mtime":1627209298039,"results":"86","hashOfConfig":"52"},{"size":382,"mtime":1627297490390,"results":"87","hashOfConfig":"52"},{"size":378,"mtime":1627209298039,"results":"88","hashOfConfig":"52"},{"size":602,"mtime":1627298171525,"results":"89","hashOfConfig":"52"},{"size":380,"mtime":1627216994941,"results":"90","hashOfConfig":"52"},{"size":772,"mtime":1627301995781,"results":"91","hashOfConfig":"52"},{"size":2733,"mtime":1627305145535,"results":"92","hashOfConfig":"52"},{"size":2454,"mtime":1627380964406,"results":"93","hashOfConfig":"52"},{"size":160,"mtime":1627243655376,"results":"94","hashOfConfig":"52"},{"size":657,"mtime":1627290434544,"results":"95","hashOfConfig":"52"},{"size":904,"mtime":1627292532078,"results":"96","hashOfConfig":"52"},{"size":587,"mtime":1627293744780,"results":"97","hashOfConfig":"52"},{"size":549,"mtime":1627296796116,"results":"98","hashOfConfig":"52"},{"size":587,"mtime":1627298548333,"results":"99","hashOfConfig":"52"},{"size":531,"mtime":1627295727568,"results":"100","hashOfConfig":"52"},{"size":1946,"mtime":1627381104688,"results":"101","hashOfConfig":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},"9q8v7z",{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"104"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"104"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"104"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"104"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"104"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"104"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"104"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"104"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"104"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"104"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"104"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"104"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"104"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"104"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/miha/Documents/projects/js/nexomia-client/src/index.tsx",[],["217","218"],"/home/miha/Documents/projects/js/nexomia-client/src/views/App.tsx",["219"],"import {\n  Switch,\n  Route,\n  useRouteMatch,\n  useHistory\n} from 'react-router-dom';\n\nimport { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { useStore } from 'effector-react';\nimport $AuthStore, { setToken } from '../store/AuthStore';\nimport { setUser } from '../store/UserStore';\nimport { setGuilds } from '../store/GuildStore';\nimport { cacheGuilds } from '../store/GuildCacheStore';\n\nimport UsersService from '../services/api/users/users.service';\nimport GuildsService from '../services/api/guilds/guilds.service';\nimport CommonRequestManager from '../services/api/common';\n\nimport '../i18n/config';\n\nimport '../styles/App.css';\n\nimport Guilds from '../components/layout/Guilds';\nimport Sidebar from '../components/layout/Sidebar';\nimport Content from '../components/layout/Content';\nimport LoadingPlaceholder from '../components/ui/LoadingPlaceholder';\nimport Modals from '../components/layout/Modals';\n\nimport preloaders from '../i18n/preloaders.json';\nimport Guild from '../store/models/Guild';\n\nfunction App() {\n  const { t } = useTranslation(['states']);\n\n  const { token } = useStore($AuthStore);\n\n  const match = useRouteMatch();\n  const history = useHistory();\n\n  const [loaded, setLoaded] = useState(false);\n\n  const [loaderTitleAuthor, setLoaderTitleAuthor] = useState(0);\n  const [loaderTitleId, setLoaderTitleId] = useState(0);\n\n  useEffect(() => {\n    const authorId = getRandomInt(preloaders.authors.length)\n    setLoaderTitleAuthor(authorId);\n    setLoaderTitleId(preloaders.authors[authorId].prefix + getRandomInt(preloaders.authors[authorId].count));\n\n    preloadUserInfo();\n  }, []);\n\n  return (\n    <div className=\"App dark-theme\">\n      <LoadingPlaceholder\n        title={ t(`states:loading.${loaderTitleId.toString()}`) }\n        subtext={ `@${preloaders.authors[loaderTitleAuthor].name}` }\n        active={ !loaded }\n        solid={ true }\n      />\n      <Switch>\n        <Route path={`${match.path}/:guildId/:channelId?`}>\n          <Modals />\n          <Guilds />\n          <Sidebar />\n          <Content />\n          <Sidebar type=\"members\" />\n        </Route>\n      </Switch>\n    </div>\n  );\n\n  async function preloadUserInfo() {\n    CommonRequestManager.setToken(token);\n    const userInfo = await UsersService.getUser('@me');\n    if (!userInfo) {\n      setToken('');\n      history.push('/login');\n      return;\n    }\n\n    const guilds = await GuildsService.getUserGuilds();\n\n    setUser(userInfo);\n    setGuilds(guilds.map((guild: Guild) => guild.id));\n    cacheGuilds(guilds);\n\n    setLoaded(true);\n  }\n}\n\nfunction getRandomInt(max: number): number {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nexport default App;\n\n","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Sidebar.tsx",["220","221","222","223","224"],"import { styled } from 'linaria/react';\nimport { css } from 'linaria';\nimport { Fragment, useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\n\nimport { useStore } from 'effector-react';\nimport $GuildStore from '../../store/GuildStore';\nimport $GuildCacheStore from '../../store/GuildCacheStore';\nimport $ChannelStore, { setGuildChannels } from '../../store/ChannelStore';\nimport $ChannelCacheStore, { cacheChannels } from '../../store/ChannelCacheStore';\nimport Tab from '../sidebar/Tab';\n\nimport { BiHash } from 'react-icons/bi';\nimport { RiVolumeDownFill } from 'react-icons/ri';\n\nimport SidebarHeader from './SidebarHeader';\n\nimport Channel from '../../store/models/Channel';\nimport StyledText from '../ui/StyledText';\nimport CenteredContainer from './CenteredContainer';\nimport channelsService from '../../services/api/channels/channels.service';\nimport Dots from '../animations/Dots';\nimport classNames from 'classnames';\n\nconst SidebarContainer = styled.div`\n  display: flex;\n  width: 240px;\n  flex-direction: column;\n  align-self: stretch;\n  background: var(--background-secondary-alt)\n`\n\nconst Content = styled.div`\n  display: flex;\n  align-self: center;\n  color: var(--text-primary);\n  font-weight: 900;\n  font-size: 18px;\n  padding: 0 16px;\n  user-select: none;\n`\n\ninterface RouteParams {\n  guildId: string,\n  channelId: string\n}\n\ninterface SidebarProps {\n  type?: string\n}\n\ninterface GuildChannels {\n  [key: string]: string[]\n}\n\ninterface ChannelsCache {\n  [key: string]: Channel\n}\n\nfunction Sidebar({ type = 'channels' }: SidebarProps) {\n  const { guildId, channelId } = useParams<RouteParams>();\n\n  const guilds = useStore($GuildCacheStore);\n  const channels = useStore<GuildChannels>($ChannelStore);\n  const channelsCache = useStore<ChannelsCache>($ChannelCacheStore);\n\n  const history = useHistory();\n\n  const [loading, setLoading] = useState(false);\n\n  const [guildChannels, setGuildChannelsValue] = useState<string[]>([]);\n\n  useEffect(() => {\n    setLoading(false);\n    if (type === 'channels') {\n      if (guildId === '@me' || guildId === '@home') return;\n      setGuildChannelsValue(channels[guildId] || []);\n      \n      if (!guildChannels.length) {\n        loadChannels();\n      }\n    }\n  }, [guildId]);\n\n  return (\n    <SidebarContainer>\n      { guildId === '@me' && type === 'channels' && (\n        <SidebarHeader>\n          <Content>Direct Messages</Content>\n        </SidebarHeader>\n      ) }\n\n      { guildId === '@home' && type === 'channels' && (\n        <SidebarHeader>\n          <Content>Home</Content>\n        </SidebarHeader>\n      ) }\n\n      { guildId !== '@me' && guildId !== '@home' && type === 'channels' && (\n        <Fragment>\n          <SidebarHeader>\n            <Content>{ guilds[guildId]?.name }</Content>\n          </SidebarHeader>\n        </Fragment>\n      ) }\n\n      { guildId !== '@me' && guildId !== '@home' && type === 'channels' && (guildChannels.length && channelsCache[guildChannels[0]] ? (\n        guildChannels.map((channel: string) => (\n          <Tab\n            Icon={ BiHash }\n            title={ channelsCache[channel]?.name || '' }\n            tabId={ channelsCache[channel]?.id }\n            key={ channelsCache[channel]?.id }\n            onClick={ () => { history.push(`/channels/${guildId}/${channel}`) } }\n          />\n        ))\n      ) : loading ? (\n        <CenteredContainer>\n          <Dots />\n        </CenteredContainer>\n      ) : (\n        <StyledText className={ css`text-align: center` }>No channels</StyledText>\n      )) }\n    </SidebarContainer>\n  );\n\n  async function loadChannels() {\n    setLoading(true);\n    const response = await channelsService.getGuildChannels(guildId);\n    if (!response) return history.push('/channels/@home');\n    cacheChannels(response);\n    setGuildChannels({ guild: guildId, channels: response.map((channel: Channel) => channel.id) });\n    setGuildChannelsValue(response.map((channel: Channel) => channel.id));\n    setLoading(false);\n  }\n}\n\nexport default Sidebar;\n","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Content.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/layout/SidebarHeader.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/layout/ContentHeader.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Guilds.tsx",["225"],"import { styled } from 'linaria/react';\nimport { css } from 'linaria';\n\nimport classNames from 'classnames';\n\nimport { useHistory, useParams } from 'react-router-dom';\n\nimport {\n  RiAddFill\n} from 'react-icons/ri'\n\nimport { useStore } from 'effector-react';\nimport $ModalStore, { setModalState } from '../../store/ModalStore';\nimport $GuildStore from '../../store/GuildStore';\nimport $GuildCacheStore from '../../store/GuildCacheStore';\n\nimport UserMenu from '../guilds/UserMenu';\nimport PanelButton from '../guilds/PanelButton';\nimport StyledText from '../ui/StyledText';\nimport PanelIconCss from '../css/PanelIconCss';\n\nconst GuildsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 64px;\n  align-self: stretch;\n  background: var(--background-secondary);\n`\n\nconst Splitter = styled.div`\n  height: 4px;\n  width: calc(100% - 32px);\n  margin: 0 16px 8px 16px;\n  border-radius: 2px;\n  background: var(--background-primary);\n`\n\nconst AvatarImg = styled.img`\n  width: 100%;\n  height: 100%;\n`\n\nconst GuildLetters = css`\n  line-height: 48px;\n  height: 48px;\n  text-align: center;\n  font-weight: 600;\n  margin: 0;\n`\n\ninterface RouteParams {\n  guildId: string\n}\n\nfunction Guilds() {\n  const history = useHistory();\n  const { guildId } = useParams<RouteParams>();\n\n  const modals = useStore($ModalStore);\n  const guildList = useStore($GuildStore);\n  const guilds = useStore($GuildCacheStore);\n\n  return (\n    <GuildsContainer>\n      <UserMenu />\n      <Splitter />\n      {\n        guildList.map((guildListId) => (\n          <PanelButton\n            onClick={ () => switchGuild(guildListId) }\n            key={ guildListId }\n            className={ classNames({ active: guildId === guildListId }) }\n          >\n            { guilds[guildListId]?.icon && <AvatarImg src={ guilds[guildListId]?.icon } /> }\n            {\n              !guilds[guildListId]?.icon &&\n              (\n                <StyledText className={ GuildLetters }>\n                  {\n                    guilds[guildListId]?.name && (\n                      guilds[guildListId].name.split(' ')[1]\n                      ? guilds[guildListId].name.split(' ')[0][0] + guilds[guildListId].name.split(' ')[1][0]\n                      : guilds[guildListId].name.split(' ')[0][0] + (\n                        guilds[guildListId].name.split(' ')[0][1]\n                        ? guilds[guildListId].name.split(' ')[0][1]\n                        : ''\n                      )\n                    )\n                  }\n                </StyledText>\n              )\n            }\n          </PanelButton>\n        ))\n      }\n      <PanelButton className={ css`margin-bottom: 0` } onClick={ () => { setModalState({ serverCreation: true }) } }>\n        <RiAddFill className={ PanelIconCss } />\n      </PanelButton>\n    </GuildsContainer>\n  );\n\n  function switchGuild(id: string) {\n    history.push(`/channels/${id}`);\n  }\n}\n\nexport default Guilds;\n","/home/miha/Documents/projects/js/nexomia-client/src/components/guilds/UserMenu.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/guilds/PanelButton.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/views/Login.tsx",["226"],"import { css } from 'linaria';\n\nimport { useState, useRef, useEffect } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\n\nimport { useTranslation } from 'react-i18next';\n\nimport { useStore } from 'effector-react';\nimport $AuthStore, { setToken, setRefreshToken } from '../store/AuthStore';\n\nimport AuthService from '../services/api/auth/auth.service';\n\nimport '../styles/App.css';\n\nimport Layer from '../components/ui/Layer';\nimport Modal from '../components/ui/Modal';\nimport ModalHeader from '../components/ui/ModalHeader';\nimport InputField from '../components/ui/InputField';\nimport FilledButton from '../components/ui/FilledButton';\nimport StyledText from '../components/ui/StyledText';\nimport LoadingPlaceholder from '../components/ui/LoadingPlaceholder';\n\nconst modalCss = css`\n  width: 440px;\n`\n\nconst negativeColorCss = css`\n  color: var(--text-negative);\n`\n\nfunction Login() {\n  const { token } = useStore($AuthStore);\n  const history = useHistory();\n\n  useEffect(() => {\n    console.log(token)\n    if (token && token !== '') {\n      history.push('/channels/@home');\n    }\n  }, []);\n\n  const { t } = useTranslation(['reg']);\n\n  const [loginLoading, setLoginLoading] = useState(false);\n  const [emailError, setEmailError] = useState(false);\n  const [passwordError, setPasswordError] = useState(false);\n  const [loginError, setLoginError] = useState(false);\n\n  const emailInput = useRef<HTMLInputElement>(null);\n  const passwordInput = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    console.log(emailInput);\n  }, []);\n\n  return (\n    <div className=\"Login dark-theme\">\n      <Layer>\n        <Modal className={ modalCss }>\n          <LoadingPlaceholder title={ t('reg:logging_in') } active={ loginLoading } />\n          <ModalHeader>{ t('reg:log_in') }<br /><StyledText>{ t('reg:welcomer_log_in') }</StyledText></ModalHeader>\n          <InputField placeholder=\"Email\" ref={ emailInput } />\n          { (emailError && <StyledText className={ negativeColorCss }>{ t('reg:errors.required_field') }</StyledText>) }\n          <InputField placeholder={ t('reg:fields.password') } type=\"password\" hidden={ true } ref={ passwordInput } />\n          { (passwordError && <StyledText className={ negativeColorCss }>{ t('reg:errors.required_field') }</StyledText>) }\n          { (loginError && <StyledText className={ negativeColorCss }>{ t('reg:errors.invalid_credentials') }</StyledText>) }\n          <StyledText>{ t('reg:no_account') } <Link to=\"/register\">{ t('reg:register') }</Link></StyledText>\n          <FilledButton onClick={ login }>{ t('reg:continue') }</FilledButton>\n        </Modal>\n      </Layer>\n    </div>\n  );\n\n  async function login() {\n    setLoginError(false);\n    setEmailError(!emailInput.current?.value);\n    setPasswordError(!passwordInput.current?.value);\n\n    if (!emailInput.current?.value || !passwordInput.current?.value) return;\n\n    setLoginLoading(true);\n\n    const response = await AuthService.login(emailInput.current?.value, passwordInput.current?.value);\n\n    setLoginLoading(false);\n\n    if (!response) {\n      setLoginError(true);\n      return;\n    }\n\n    setToken(response.access_token);\n    setRefreshToken(response.refresh_token);\n\n    history.push('/channels/@home');\n  }\n}\n\nexport default Login;\n","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/Layer.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/ui/Modal.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/ui/ModalHeader.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/ui/InputField.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/ui/FilledButton.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/ui/StyledText.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/views/Register.tsx",["227","228"],"import { css } from 'linaria';\n\nimport { useState, Fragment, useRef, useEffect } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\n\nimport { useTranslation } from 'react-i18next';\n\nimport { useStore } from 'effector-react';\nimport $AuthStore from '../store/AuthStore';\n\nimport AuthService from '../services/api/auth/auth.service';\n\nimport '../styles/App.css';\n\nimport Layer from '../components/ui/Layer';\nimport Modal from '../components/ui/Modal';\nimport ModalHeader from '../components/ui/ModalHeader';\nimport InputField from '../components/ui/InputField';\nimport FilledButton from '../components/ui/FilledButton';\nimport StyledText from '../components/ui/StyledText';\nimport LoadingPlaceholder from '../components/ui/LoadingPlaceholder';\n\nconst modalCss = css`\n  width: 440px\n`\n\nconst negativeColorCss = css`\n  color: var(--text-negative);\n`\n\nfunction Register() {\n  const { token } = useStore($AuthStore);\n  const history = useHistory();\n\n  useEffect(() => {\n    if (token) {\n      history.push('/channels/me');\n    }\n  }, []);\n\n  const { t } = useTranslation(['reg']);\n\n  const [registerLoading, setRegisterLoading] = useState(false);\n  const [registerState, setRegisterState] = useState(0);\n  const [placeholderText, setPlaceholderText] = useState(0);\n  const [emailError, setEmailError] = useState(false);\n  const [usernameError, setUsernameError] = useState(false);\n  const [passwordError, setPasswordError] = useState(false);\n\n  const emailInput = useRef<HTMLInputElement>(null);\n  const usernameInput = useRef<HTMLInputElement>(null);\n  const passwordInput = useRef<HTMLInputElement>(null);\n\n  return (\n    <div className=\"Login dark-theme\">\n      <Layer>\n        <Modal className={ modalCss }>\n          <LoadingPlaceholder title={ (placeholderText === 0 && 'Creating your account...') || 'Almost there...' } active={ registerLoading } />\n\n          { registerState === 0 && (\n            <Fragment>\n              <ModalHeader>{ t('reg:register') }<br /><StyledText>{ t('reg:welcomer_register') }</StyledText></ModalHeader>\n              <InputField placeholder=\"Email\" ref={ emailInput } />\n              { (emailError && <StyledText className={ negativeColorCss }>{ t('reg:errors.required_field') }</StyledText>) }\n              <InputField placeholder={ t('reg:fields.username') } ref={ usernameInput } />\n              { (usernameError && <StyledText className={ negativeColorCss }>{ t('reg:errors.required_field') }</StyledText>) }\n              <InputField placeholder={ t('reg:fields.password') } type=\"password\" ref={ passwordInput } hidden={ true } />\n              { (passwordError && <StyledText className={ negativeColorCss }>{ t('reg:errors.required_field') }</StyledText>) }\n              <StyledText>{ t('reg:has_account') } <Link to=\"/login\">{ t('reg:log_in') }</Link></StyledText>\n              <FilledButton onClick={ register }>{ t('reg:continue') }</FilledButton>\n            </Fragment>\n          ) }\n\n          { registerState === 1 && (\n            <Fragment>\n              <ModalHeader>{ t('reg:account_created') }<br /><StyledText>{ t('reg:account_log_in') }</StyledText></ModalHeader>\n              <FilledButton onClick={ login }>{ t('reg:continue') }</FilledButton>\n            </Fragment>\n          ) }\n        </Modal>\n      </Layer>\n    </div>\n  );\n\n  async function register() {\n    setEmailError(!emailInput.current?.value);\n    setUsernameError(!usernameInput.current?.value);\n    setPasswordError(!passwordInput.current?.value);\n\n    if (!emailInput.current?.value || !usernameInput.current?.value || !passwordInput.current?.value) return;\n\n    setRegisterLoading(true);\n\n    const response = await AuthService.register(\n      emailInput.current?.value,\n      usernameInput.current?.value,\n      passwordInput.current?.value\n    );\n\n    if (!response) return;\n\n    setRegisterLoading(false);\n    setRegisterState(1);\n  }\n\n  function login() {\n    history.push('/login');\n  }\n}\n\nexport default Register;\n","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/LoadingPlaceholder.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/animations/Dots.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/i18n/config.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/services/api/auth/auth.service.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/services/api/common.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/config.ts",["229"],"export default {\n  api: {\n    endpoint: 'http://127.0.0.1:7081/api'\n  }\n}\n","/home/miha/Documents/projects/js/nexomia-client/src/services/api/users/users.service.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/services/api/guilds/guilds.service.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Modals.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/modals/ServerCreationModal.tsx",["230","231"],"import { css } from 'linaria';\nimport classNames from 'classnames';\nimport { useState, useRef, Fragment, useEffect } from 'react';\n\nimport { useStore } from 'effector-react';\nimport $ModalStore, { setModalState } from '../../store/ModalStore';\nimport { addGuild } from '../../store/GuildStore';\nimport { cacheGuilds } from '../../store/GuildCacheStore';\n\nimport GuildsService from '../../services/api/guilds/guilds.service';\n\nimport Layer from '../ui/Layer';\nimport LayerBackgroundShadeCss from '../css/LayerBackgroundShadeCss';\nimport InactiveLayerCss from '../css/InactiveLayerCss';\nimport Modal from '../ui/Modal';\nimport ModalHeader from '../ui/ModalHeader';\nimport StyledText from '../ui/StyledText';\nimport BigPageButton from '../ui/BigPageButton';\nimport InputField from '../ui/InputField';\nimport FilledButton from '../ui/FilledButton';\nimport LoadingPlaceholder from '../ui/LoadingPlaceholder';\n\ninterface ServerCreationModalProps {\n  active: boolean\n}\n\nconst negativeColorCss = css`\n  color: var(--text-negative);\n`\n\nfunction ServerCreationModal({ active }: ServerCreationModalProps) {\n  const layerRef = useRef(null);\n\n  const [modalPage, setModalPage] = useState(0);\n  const [nameValue, setNameValue] = useState('');\n  const [inviteValue, setInviteValue] = useState('');\n\n  const [joinError, setJoinError] = useState(false);\n  const [createError, setCreateError] = useState(false);\n\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (active) {\n      setModalPage(0);\n      setJoinError(false);\n      setCreateError(false);\n      setNameValue('');\n      setInviteValue('');\n    }\n  }, [active]);\n\n  return (\n    <Layer className={ classNames({ [LayerBackgroundShadeCss]: true, [InactiveLayerCss]: !active }) } onClick={ (event) => { closeModal(event) } } ref={ layerRef }>\n      <Modal className={ css`width: 440px` }>\n        <LoadingPlaceholder title={ (modalPage === 1 && 'Creating your server...') || 'Joining server...' } active={ loading } />\n        { modalPage === 0 && (\n          <Fragment>\n            <ModalHeader>Join or create a server<br /><StyledText>Talk with friends in your private space or create a public community!</StyledText></ModalHeader>\n            <BigPageButton onClick={ () => setModalPage(1) }>Create a server</BigPageButton>\n            <BigPageButton onClick={ () => setModalPage(2) }>Join a server</BigPageButton>\n          </Fragment>\n        ) }\n\n        { modalPage === 1 && (\n          <Fragment>\n            <ModalHeader>Name your server</ModalHeader>\n            <InputField placeholder=\"Server Name\" onChange={ (event) => { setNameValue(event.target.value) } } />\n            { (createError && <StyledText className={ negativeColorCss }>Failed to create server.</StyledText>) }\n            <FilledButton onClick={ createServer }>Create</FilledButton>\n          </Fragment>\n        ) }\n\n        { modalPage === 2 && (\n          <Fragment>\n            <ModalHeader>Enter your invite</ModalHeader>\n            <InputField placeholder=\"Invite Code\" onChange={ (event) => { setInviteValue(event.target.value) } } />\n            { (joinError && <StyledText className={ negativeColorCss }>Failed to join this server. Invite code is invalid or you have been banned from that server.</StyledText>) }\n            <FilledButton onClick={ joinServer }>Join</FilledButton>\n          </Fragment>\n        ) }\n      </Modal>\n    </Layer>\n  );\n\n  // TODO: что-то сделать с этим пиздецом в типах\n  function closeModal(event: any) {\n    if (event.target !== layerRef.current) return;\n    setModalState({ serverCreation: false });\n  }\n\n  async function createServer() {\n    setLoading(true);\n    const response = await GuildsService.createGuild(nameValue);\n    if (!response) {\n      setCreateError(true);\n      setLoading(false);\n      return;\n    }\n\n    const { id, name } = response;\n\n    cacheGuilds([{\n      id,\n      name,\n      icon: response.icon || ''\n    }]);\n    addGuild(id);\n\n    setLoading(false);\n    setNameValue('');\n    setInviteValue('');\n    setModalState({ serverCreation: false });\n  }\n\n  async function joinServer() {\n    setLoading(true);\n    const response = await GuildsService.joinGuild(inviteValue);\n    if (!response) {\n      setJoinError(true);\n      setLoading(false);\n      return;\n    }\n\n    const { id, name } = response;\n\n    cacheGuilds([{\n      id,\n      name,\n      icon: response.icon || ''\n    }]);\n    addGuild(id);\n\n    setLoading(false);\n    setNameValue('');\n    setInviteValue('');\n    setModalState({ serverCreation: false });\n  }\n}\n\nexport default ServerCreationModal;\n","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/BigPageButton.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/css/PanelIconCss.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/css/LayerBackgroundShadeCss.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/css/InactiveLayerCss.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/sidebar/Tab.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/css/StyledIconCss.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/UserStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/AuthStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/GuildStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/ModalStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/ChannelStore.tsx",["232","233"],"import { createStore, createEvent } from 'effector-root';\nimport Channel from './models/Channel';\n\nconst setGuildChannels = createEvent<GuildChannelsInfo>();\n\ninterface GuildChannelsInfo {\n  guild: string,\n  channels: string[]\n}\n\ninterface GuildChannelPath {\n  guild: string,\n  channel: string\n}\n\ninterface GuildChannels {\n  [key: string]: string[]\n}\n\nconst $ChannelStore = createStore<GuildChannels>({});\n\n$ChannelStore\n  .on(setGuildChannels, (state: GuildChannels, info: GuildChannelsInfo) => ({ ...state, [info.guild]: info.channels }));\n\nexport default $ChannelStore;\nexport { setGuildChannels };\n","/home/miha/Documents/projects/js/nexomia-client/src/services/api/channels/channels.service.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/chat/ChatView.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/chat/ChatInput.tsx",["234"],"import { styled } from 'linaria/react';\nimport { css } from 'linaria';\nimport classNames from 'classnames';\nimport { useRef, useState } from 'react';\nimport { RiAddCircleFill, RiEmotionLaughFill, RiSendPlane2Fill } from 'react-icons/ri';\n\nimport { addMessage } from '../../store/MessageStore';\nimport { cacheMessages } from '../../store/MessageCacheStore';\n\nimport StyledIconCss from '../css/StyledIconCss';\nimport Dots from '../animations/Dots';\n\nimport MessagesService from '../../services/api/messages/messages.service';\n\nconst Container = styled.div`\n  display: flex;\n  margin: 16px;\n  border-radius: 8px;\n  background: var(--background-primary-alt);\n  height: 48px;\n  flex-direction: row;\n`\n\nconst InputButton = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 46px;\n  height: 40px;\n  padding: 8px 11px;\n  margin: 4px;\n  border-radius: 6px;\n  cursor: pointer;\n  transition: .2s;\n\n  &:hover {\n    background: var(--background-light);\n  }\n  &:active, &.active {\n    transform: scale(0.93);\n  }\n  &.active {\n    opacity: .5;\n  }\n`\n\nconst InputIconCss = css`\n  width: 24px;\n  height: 24px;\n`\n\nconst Input = styled.input`\n  display: flex;\n  flex-grow: 1;\n  outline: none;\n  background: transparent;\n  border: 0px;\n  font-weight: 400;\n  font-size: 16px;\n  color: var(--text-primary);\n  &::placeholder {\n    color: var(--text-secondary);\n    user-select: none;\n  }\n`\n\ninterface ChatInputProps {\n  channel: string\n}\n\nfunction ChatInput({ channel }: ChatInputProps) {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [sendLoading, setSendLoading] = useState(false);\n\n  return (\n    <Container>\n      <InputButton>\n        <RiAddCircleFill className={ classNames({ [StyledIconCss]: true, [InputIconCss]: true }) } />\n      </InputButton>\n      <Input placeholder=\"Type something here...\" ref={ inputRef } />\n      <InputButton className={ css`margin-right: 0` }>\n        <RiEmotionLaughFill className={ classNames({ [StyledIconCss]: true, [InputIconCss]: true }) } />\n      </InputButton>\n      <InputButton onClick={ sendMessage } className={ classNames({ active: sendLoading }) } >\n        <RiSendPlane2Fill className={ classNames({ [StyledIconCss]: true, [InputIconCss]: true }) } />\n      </InputButton>\n    </Container>\n  );\n\n  async function sendMessage() {\n    if (sendLoading) return;\n\n    setSendLoading(true);\n    const content = inputRef.current?.value;\n    if (inputRef.current) inputRef.current.value = '';\n    const response = await MessagesService.sendMessage(channel, content || '');\n\n    if (!response) return setSendLoading(false);\n\n    cacheMessages([response]);\n    addMessage({ channel: response.channel_id, message: response.id });\n\n    setSendLoading(false);\n  }\n}\n\nexport default ChatInput;\n","/home/miha/Documents/projects/js/nexomia-client/src/components/chat/MessageView.tsx",["235"],"/home/miha/Documents/projects/js/nexomia-client/src/components/layout/CenteredContainer.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/services/api/messages/messages.service.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/MessageStore.tsx",["236"],"import { createStore, createEvent } from 'effector-root';\n\nimport Message from './models/Message';\n\nconst setChannelMessages = createEvent<ChannelMessagesInfo>();\nconst addMessage = createEvent<ChannelMessageInfo>();\n\ninterface ChannelMessagesInfo {\n  channel: string,\n  messages: string[]\n}\n\ninterface ChannelMessageInfo {\n  channel: string,\n  message: string\n}\n\ninterface ChannelMessages {\n  [key: string]: string[]\n}\n\nconst $MessageStore = createStore<ChannelMessages>({});\n\n$MessageStore\n  .on(setChannelMessages, (state: ChannelMessages, info: ChannelMessagesInfo) => ({ ...state, [info.channel]: info.messages }))\n  .on(addMessage, (state: ChannelMessages, info: ChannelMessageInfo) => (\n    {\n      ...state,\n      [info.channel]: state[info.channel] ? state[info.channel].concat(info.message) : [info.message]\n    }\n  ));\n\nexport default $MessageStore;\nexport { setChannelMessages, addMessage };\n","/home/miha/Documents/projects/js/nexomia-client/src/store/MessageCacheStore.tsx",["237"],"import { createStore, createEvent } from 'effector-root';\n\nimport Message from './models/Message';\n\nconst cacheMessages = createEvent<Message[]>();\n\ninterface MessageCache {\n  [key: string]: Message\n}\n\nconst $MessageCacheStore = createStore<MessageCache>({});\n\n$MessageCacheStore\n  .on(cacheMessages, (state: MessageCache, messages: Message[]) => {\n    let modifiedState = { ...state };\n    messages.map((message) => {\n      modifiedState = { ...modifiedState, [message.id]: message };\n    });\n    return modifiedState;\n  })\n\nexport default $MessageCacheStore;\nexport { cacheMessages };\n","/home/miha/Documents/projects/js/nexomia-client/src/store/GuildCacheStore.tsx",["238"],"import { createStore, createEvent } from 'effector-root';\n\nimport Guild from './models/Guild';\n\nconst cacheGuilds = createEvent<Guild[]>();\n\ninterface GuildCache {\n  [key: string]: Guild\n}\n\nconst $GuildCacheStore = createStore<GuildCache>({});\n\n$GuildCacheStore\n  .on(cacheGuilds, (state: GuildCache, guilds: Guild[]) => {\n    let modifiedState = { ...state };\n    guilds.map((guild) => {\n      modifiedState = { ...modifiedState, [guild.id]: guild };\n    });\n    return modifiedState;\n  })\n\nexport default $GuildCacheStore;\nexport { cacheGuilds };\n","/home/miha/Documents/projects/js/nexomia-client/src/store/ChannelCacheStore.tsx",["239"],"import { createStore, createEvent } from 'effector-root';\n\nimport Channel from './models/Channel';\n\nconst cacheChannels = createEvent<Channel[]>();\n\ninterface ChannelCache {\n  [key: string]: Channel\n}\n\nconst $ChannelCacheStore = createStore<ChannelCache>({});\n\n$ChannelCacheStore\n  .on(cacheChannels, (state: ChannelCache, channels: Channel[]) => {\n    let modifiedState = { ...state };\n    channels.map((channel) => {\n      modifiedState = { ...modifiedState, [channel.id]: channel };\n    });\n    return modifiedState;\n  })\n\nexport default $ChannelCacheStore;\nexport { cacheChannels };\n","/home/miha/Documents/projects/js/nexomia-client/src/store/UserCacheStore.tsx",["240"],"import { createStore, createEvent } from 'effector-root';\n\nimport User from './models/User';\n\nconst cacheUsers = createEvent<User[]>();\n\ninterface UserCache {\n  [key: string]: User\n}\n\nconst $UserCacheStore = createStore<UserCache>({});\n\n$UserCacheStore\n  .on(cacheUsers, (state: UserCache, users: User[]) => {\n    let modifiedState = { ...state };\n    users.map((user) => {\n      modifiedState = { ...modifiedState, [user.id]: user };\n    });\n    return modifiedState;\n  });\n\nexport default $UserCacheStore;\nexport { cacheUsers };\n","/home/miha/Documents/projects/js/nexomia-client/src/components/chat/MessageRenderer.tsx",[],{"ruleId":"241","replacedBy":"242"},{"ruleId":"243","replacedBy":"244"},{"ruleId":"245","severity":1,"message":"246","line":53,"column":6,"nodeType":"247","endLine":53,"endColumn":8,"suggestions":"248"},{"ruleId":"249","severity":1,"message":"250","line":7,"column":8,"nodeType":"251","messageId":"252","endLine":7,"endColumn":19},{"ruleId":"249","severity":1,"message":"253","line":14,"column":10,"nodeType":"251","messageId":"252","endLine":14,"endColumn":26},{"ruleId":"249","severity":1,"message":"254","line":23,"column":8,"nodeType":"251","messageId":"252","endLine":23,"endColumn":18},{"ruleId":"249","severity":1,"message":"255","line":61,"column":20,"nodeType":"251","messageId":"252","endLine":61,"endColumn":29},{"ruleId":"245","severity":1,"message":"256","line":83,"column":6,"nodeType":"247","endLine":83,"endColumn":15,"suggestions":"257"},{"ruleId":"249","severity":1,"message":"258","line":59,"column":9,"nodeType":"251","messageId":"252","endLine":59,"endColumn":15},{"ruleId":"245","severity":1,"message":"259","line":40,"column":6,"nodeType":"247","endLine":40,"endColumn":8,"suggestions":"260"},{"ruleId":"245","severity":1,"message":"259","line":39,"column":6,"nodeType":"247","endLine":39,"endColumn":8,"suggestions":"261"},{"ruleId":"249","severity":1,"message":"262","line":45,"column":27,"nodeType":"251","messageId":"252","endLine":45,"endColumn":45},{"ruleId":"263","severity":1,"message":"264","line":1,"column":1,"nodeType":"265","endLine":5,"endColumn":2},{"ruleId":"249","severity":1,"message":"266","line":5,"column":10,"nodeType":"251","messageId":"252","endLine":5,"endColumn":18},{"ruleId":"249","severity":1,"message":"267","line":6,"column":8,"nodeType":"251","messageId":"252","endLine":6,"endColumn":19},{"ruleId":"249","severity":1,"message":"268","line":2,"column":8,"nodeType":"251","messageId":"252","endLine":2,"endColumn":15},{"ruleId":"249","severity":1,"message":"269","line":11,"column":11,"nodeType":"251","messageId":"252","endLine":11,"endColumn":27},{"ruleId":"249","severity":1,"message":"270","line":11,"column":8,"nodeType":"251","messageId":"252","endLine":11,"endColumn":12},{"ruleId":"245","severity":1,"message":"271","line":34,"column":6,"nodeType":"247","endLine":34,"endColumn":15,"suggestions":"272"},{"ruleId":"249","severity":1,"message":"273","line":3,"column":8,"nodeType":"251","messageId":"252","endLine":3,"endColumn":15},{"ruleId":"274","severity":1,"message":"275","line":16,"column":28,"nodeType":"276","messageId":"277","endLine":16,"endColumn":30},{"ruleId":"274","severity":1,"message":"275","line":16,"column":24,"nodeType":"276","messageId":"277","endLine":16,"endColumn":26},{"ruleId":"274","severity":1,"message":"275","line":16,"column":28,"nodeType":"276","messageId":"277","endLine":16,"endColumn":30},{"ruleId":"274","severity":1,"message":"275","line":16,"column":22,"nodeType":"276","messageId":"277","endLine":16,"endColumn":24},"no-native-reassign",["278"],"no-negated-in-lhs",["279"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'preloadUserInfo'. Either include it or remove the dependency array.","ArrayExpression",["280"],"@typescript-eslint/no-unused-vars","'$GuildStore' is defined but never used.","Identifier","unusedVar","'RiVolumeDownFill' is defined but never used.","'classNames' is defined but never used.","'channelId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'channels', 'guildChannels.length', 'loadChannels', and 'type'. Either include them or remove the dependency array.",["281"],"'modals' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history' and 'token'. Either include them or remove the dependency array.",["282"],["283"],"'setPlaceholderText' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'useStore' is defined but never used.","'$ModalStore' is defined but never used.","'Channel' is defined but never used.","'GuildChannelPath' is defined but never used.","'Dots' is defined but never used.","React Hook useEffect has missing dependencies: 'MessageStore' and 'loadMessages'. Either include them or remove the dependency array.",["284"],"'Message' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation",{"desc":"285","fix":"286"},{"desc":"287","fix":"288"},{"desc":"289","fix":"290"},{"desc":"289","fix":"291"},{"desc":"292","fix":"293"},"Update the dependencies array to be: [preloadUserInfo]",{"range":"294","text":"295"},"Update the dependencies array to be: [channels, guildChannels.length, guildId, loadChannels, type]",{"range":"296","text":"297"},"Update the dependencies array to be: [history, token]",{"range":"298","text":"299"},{"range":"300","text":"299"},"Update the dependencies array to be: [MessageStore, channel, loadMessages]",{"range":"301","text":"302"},[1647,1649],"[preloadUserInfo]",[2256,2265],"[channels, guildChannels.length, guildId, loadChannels, type]",[1105,1107],"[history, token]",[1044,1046],[1256,1265],"[MessageStore, channel, loadMessages]"]