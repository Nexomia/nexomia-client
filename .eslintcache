[{"/home/miha/Documents/projects/js/nexomia-client/src/index.tsx":"1","/home/miha/Documents/projects/js/nexomia-client/src/views/App.tsx":"2","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Sidebar.tsx":"3","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Content.tsx":"4","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/SidebarHeader.tsx":"5","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/ContentHeader.tsx":"6","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Guilds.tsx":"7","/home/miha/Documents/projects/js/nexomia-client/src/components/guilds/UserMenu.tsx":"8","/home/miha/Documents/projects/js/nexomia-client/src/components/guilds/PanelButton.tsx":"9","/home/miha/Documents/projects/js/nexomia-client/src/views/Login.tsx":"10","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/Layer.tsx":"11","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/Modal.tsx":"12","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/ModalHeader.tsx":"13","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/InputField.tsx":"14","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/FilledButton.tsx":"15","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/StyledText.tsx":"16","/home/miha/Documents/projects/js/nexomia-client/src/views/Register.tsx":"17","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/LoadingPlaceholder.tsx":"18","/home/miha/Documents/projects/js/nexomia-client/src/components/animations/Dots.tsx":"19","/home/miha/Documents/projects/js/nexomia-client/src/i18n/config.ts":"20","/home/miha/Documents/projects/js/nexomia-client/src/services/api/auth/auth.service.ts":"21","/home/miha/Documents/projects/js/nexomia-client/src/services/api/common.ts":"22","/home/miha/Documents/projects/js/nexomia-client/src/config.ts":"23","/home/miha/Documents/projects/js/nexomia-client/src/services/api/users/users.service.ts":"24","/home/miha/Documents/projects/js/nexomia-client/src/services/api/guilds/guilds.service.ts":"25","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Modals.tsx":"26","/home/miha/Documents/projects/js/nexomia-client/src/components/modals/ServerCreationModal.tsx":"27","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/BigPageButton.tsx":"28","/home/miha/Documents/projects/js/nexomia-client/src/components/css/PanelIconCss.tsx":"29","/home/miha/Documents/projects/js/nexomia-client/src/components/css/LayerBackgroundShadeCss.tsx":"30","/home/miha/Documents/projects/js/nexomia-client/src/components/css/InactiveLayerCss.tsx":"31","/home/miha/Documents/projects/js/nexomia-client/src/components/sidebar/Tab.tsx":"32","/home/miha/Documents/projects/js/nexomia-client/src/components/css/StyledIconCss.tsx":"33","/home/miha/Documents/projects/js/nexomia-client/src/store/UserStore.tsx":"34","/home/miha/Documents/projects/js/nexomia-client/src/store/AuthStore.tsx":"35","/home/miha/Documents/projects/js/nexomia-client/src/store/GuildStore.tsx":"36","/home/miha/Documents/projects/js/nexomia-client/src/store/ModalStore.tsx":"37","/home/miha/Documents/projects/js/nexomia-client/src/store/ChannelStore.tsx":"38","/home/miha/Documents/projects/js/nexomia-client/src/services/api/channels/channels.service.ts":"39","/home/miha/Documents/projects/js/nexomia-client/src/components/chat/ChatView.tsx":"40","/home/miha/Documents/projects/js/nexomia-client/src/components/chat/ChatInput.tsx":"41","/home/miha/Documents/projects/js/nexomia-client/src/components/chat/MessageView.tsx":"42","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/CenteredContainer.tsx":"43","/home/miha/Documents/projects/js/nexomia-client/src/services/api/messages/messages.service.ts":"44","/home/miha/Documents/projects/js/nexomia-client/src/store/MessageStore.tsx":"45","/home/miha/Documents/projects/js/nexomia-client/src/store/MessageCacheStore.tsx":"46","/home/miha/Documents/projects/js/nexomia-client/src/store/GuildCacheStore.tsx":"47","/home/miha/Documents/projects/js/nexomia-client/src/store/ChannelCacheStore.tsx":"48","/home/miha/Documents/projects/js/nexomia-client/src/store/UserCacheStore.tsx":"49","/home/miha/Documents/projects/js/nexomia-client/src/components/chat/MessageRenderer.tsx":"50","/home/miha/Documents/projects/js/nexomia-client/src/components/profile/ProfileView.tsx":"51","/home/miha/Documents/projects/js/nexomia-client/src/utils/isTabGuild.ts":"52","/home/miha/Documents/projects/js/nexomia-client/src/store/MemberCacheStore.tsx":"53","/home/miha/Documents/projects/js/nexomia-client/src/components/contextmenus/ContextMenu.tsx":"54","/home/miha/Documents/projects/js/nexomia-client/src/store/ContextMenuStore.tsx":"55","/home/miha/Documents/projects/js/nexomia-client/src/components/contextmenus/ContextTab.tsx":"56","/home/miha/Documents/projects/js/nexomia-client/src/components/settings/SettingsView.tsx":"57","/home/miha/Documents/projects/js/nexomia-client/src/components/settings/guild/RolesView.tsx":"58","/home/miha/Documents/projects/js/nexomia-client/src/services/api/roles/roles.service.ts":"59","/home/miha/Documents/projects/js/nexomia-client/src/store/RolesCacheStore.tsx":"60","/home/miha/Documents/projects/js/nexomia-client/src/components/settings/ui/Role.tsx":"61"},{"size":745,"mtime":1627597352775,"results":"62","hashOfConfig":"63"},{"size":3649,"mtime":1627657389176,"results":"64","hashOfConfig":"63"},{"size":6420,"mtime":1627672531789,"results":"65","hashOfConfig":"63"},{"size":1612,"mtime":1627683670922,"results":"66","hashOfConfig":"63"},{"size":163,"mtime":1627018358125,"results":"67","hashOfConfig":"63"},{"size":2103,"mtime":1627680736184,"results":"68","hashOfConfig":"63"},{"size":3338,"mtime":1627683977730,"results":"69","hashOfConfig":"63"},{"size":2386,"mtime":1627683881976,"results":"70","hashOfConfig":"63"},{"size":448,"mtime":1627680724782,"results":"71","hashOfConfig":"63"},{"size":3243,"mtime":1627596811177,"results":"72","hashOfConfig":"63"},{"size":276,"mtime":1627682556678,"results":"73","hashOfConfig":"63"},{"size":308,"mtime":1627028022731,"results":"74","hashOfConfig":"63"},{"size":277,"mtime":1626934198646,"results":"75","hashOfConfig":"63"},{"size":769,"mtime":1627227991041,"results":"76","hashOfConfig":"63"},{"size":462,"mtime":1627227809580,"results":"77","hashOfConfig":"63"},{"size":252,"mtime":1627214753219,"results":"78","hashOfConfig":"63"},{"size":3967,"mtime":1627596821449,"results":"79","hashOfConfig":"63"},{"size":1554,"mtime":1627018288813,"results":"80","hashOfConfig":"63"},{"size":616,"mtime":1626934226635,"results":"81","hashOfConfig":"63"},{"size":334,"mtime":1626959070191,"results":"82","hashOfConfig":"63"},{"size":688,"mtime":1626955086129,"results":"83","hashOfConfig":"63"},{"size":1650,"mtime":1627458180747,"results":"84","hashOfConfig":"63"},{"size":74,"mtime":1626946161504,"results":"85","hashOfConfig":"63"},{"size":349,"mtime":1627295837712,"results":"86","hashOfConfig":"63"},{"size":1058,"mtime":1627295901306,"results":"87","hashOfConfig":"63"},{"size":391,"mtime":1627389460267,"results":"88","hashOfConfig":"63"},{"size":4606,"mtime":1627297821529,"results":"89","hashOfConfig":"63"},{"size":467,"mtime":1627027430873,"results":"90","hashOfConfig":"63"},{"size":131,"mtime":1627022154493,"results":"91","hashOfConfig":"63"},{"size":83,"mtime":1627028155787,"results":"92","hashOfConfig":"63"},{"size":134,"mtime":1627028396713,"results":"93","hashOfConfig":"63"},{"size":1452,"mtime":1627597822073,"results":"94","hashOfConfig":"63"},{"size":84,"mtime":1627022005885,"results":"95","hashOfConfig":"63"},{"size":619,"mtime":1627209298039,"results":"96","hashOfConfig":"63"},{"size":717,"mtime":1627209298039,"results":"97","hashOfConfig":"63"},{"size":382,"mtime":1627297490390,"results":"98","hashOfConfig":"63"},{"size":379,"mtime":1627389470459,"results":"99","hashOfConfig":"63"},{"size":602,"mtime":1627298171525,"results":"100","hashOfConfig":"63"},{"size":380,"mtime":1627216994941,"results":"101","hashOfConfig":"63"},{"size":1226,"mtime":1627684081692,"results":"102","hashOfConfig":"63"},{"size":2747,"mtime":1627682533116,"results":"103","hashOfConfig":"63"},{"size":2337,"mtime":1627681481736,"results":"104","hashOfConfig":"63"},{"size":160,"mtime":1627243655376,"results":"105","hashOfConfig":"63"},{"size":657,"mtime":1627290434544,"results":"106","hashOfConfig":"63"},{"size":904,"mtime":1627292532078,"results":"107","hashOfConfig":"63"},{"size":587,"mtime":1627293744780,"results":"108","hashOfConfig":"63"},{"size":915,"mtime":1627673558173,"results":"109","hashOfConfig":"63"},{"size":587,"mtime":1627298548333,"results":"110","hashOfConfig":"63"},{"size":530,"mtime":1627633335957,"results":"111","hashOfConfig":"63"},{"size":2801,"mtime":1627655990760,"results":"112","hashOfConfig":"63"},{"size":3496,"mtime":1627683726058,"results":"113","hashOfConfig":"63"},{"size":74,"mtime":1627645846682,"results":"114","hashOfConfig":"63"},{"size":593,"mtime":1627633613683,"results":"115","hashOfConfig":"63"},{"size":1332,"mtime":1627655939038,"results":"116","hashOfConfig":"63"},{"size":507,"mtime":1627655773684,"results":"117","hashOfConfig":"63"},{"size":1117,"mtime":1627655670692,"results":"118","hashOfConfig":"63"},{"size":678,"mtime":1627673011153,"results":"119","hashOfConfig":"63"},{"size":3803,"mtime":1627684236472,"results":"120","hashOfConfig":"63"},{"size":415,"mtime":1627662400979,"results":"121","hashOfConfig":"63"},{"size":530,"mtime":1627634799409,"results":"122","hashOfConfig":"63"},{"size":1606,"mtime":1627679093276,"results":"123","hashOfConfig":"63"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},"9q8v7z",{"filePath":"127","messages":"128","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"126"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"126"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"126"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"126"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"126"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"126"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"126"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"214","messages":"215","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"126"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"126"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"126"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"126"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"126"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"126"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"126"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"126"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"126"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"257","messages":"258","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"126"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"126"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},"/home/miha/Documents/projects/js/nexomia-client/src/index.tsx",[],["265","266"],"/home/miha/Documents/projects/js/nexomia-client/src/views/App.tsx",["267","268","269"],"import {\n  Switch,\n  Route,\n  useRouteMatch,\n  useHistory,\n  useParams\n} from 'react-router-dom';\n\nimport { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { useStore } from 'effector-react';\nimport $AuthStore, { setToken } from '../store/AuthStore';\nimport { setUser } from '../store/UserStore';\nimport { setGuilds } from '../store/GuildStore';\nimport { cacheGuilds } from '../store/GuildCacheStore';\nimport { setContextMenu } from '../store/ContextMenuStore';\n\nimport UsersService from '../services/api/users/users.service';\nimport GuildsService from '../services/api/guilds/guilds.service';\nimport CommonRequestManager from '../services/api/common';\n\nimport '../i18n/config';\n\nimport '../styles/App.css';\n\nimport Guilds from '../components/layout/Guilds';\nimport Sidebar from '../components/layout/Sidebar';\nimport Content from '../components/layout/Content';\nimport LoadingPlaceholder from '../components/ui/LoadingPlaceholder';\nimport Modals from '../components/layout/Modals';\n\nimport preloaders from '../i18n/preloaders.json';\nimport Guild from '../store/models/Guild';\nimport ContextMenu from '../components/contextmenus/ContextMenu';\n\nfunction App() {\n  const { t } = useTranslation(['states']);\n\n  const { token } = useStore($AuthStore);\n\n  const match = useRouteMatch();\n  const history = useHistory();\n\n  const [loaded, setLoaded] = useState(false);\n\n  const [loaderTitleAuthor, setLoaderTitleAuthor] = useState(0);\n  const [loaderTitleId, setLoaderTitleId] = useState(0);\n\n  useEffect(() => {\n    const authorId = getRandomInt(preloaders.authors.length)\n    setLoaderTitleAuthor(authorId);\n    setLoaderTitleId(preloaders.authors[authorId].prefix + getRandomInt(preloaders.authors[authorId].count));\n\n    preloadUserInfo();\n  }, []);\n\n  return (\n    <div className=\"App dark-theme\" onClick={ closeContextMenu } onContextMenu={ (event: any) => event.preventDefault() }>\n      <LoadingPlaceholder\n        title={ t(`states:loading.${loaderTitleId.toString()}`) }\n        subtext={ `@${preloaders.authors[loaderTitleAuthor].name}` }\n        active={ !loaded }\n        solid={ true }\n      />\n      <ContextMenu />\n      <Switch>\n        <Route path={`/channels/:guildId/:channelId`}>\n          <Modals />\n          <Guilds />\n          <Sidebar />\n          <Content />\n          <Sidebar type=\"members\" />\n        </Route>\n\n        <Route path={`/channels/:guildId`}>\n          <Modals />\n          <Guilds />\n          <Sidebar />\n          <Content />\n          <Sidebar type=\"members\" />\n        </Route>\n\n        <Route path={`/:path/:guildId/:channelId`}>\n          <Modals />\n          <Guilds />\n          <Sidebar />\n          <Content />\n        </Route>\n\n        <Route path={`/:path/:guildId`}>\n          <Modals />\n          <Guilds />\n          <Sidebar />\n          <Content />\n        </Route>\n\n        <Route path={`/:path`}>\n          <Modals />\n          <Guilds />\n          <Sidebar />\n          <Content />\n        </Route>\n      </Switch>\n    </div>\n  );\n\n  async function preloadUserInfo() {\n    CommonRequestManager.setToken(token);\n    const userInfo = await UsersService.getUser('@me');\n    if (!userInfo) {\n      setToken('');\n      history.push('/login');\n      return;\n    }\n\n    const guilds = await GuildsService.getUserGuilds();\n\n    setUser(userInfo);\n    setGuilds(guilds.map((guild: Guild) => guild.id));\n    cacheGuilds(guilds);\n\n    setLoaded(true);\n  }\n\n  function closeContextMenu() {\n    setContextMenu({ visible: false });\n  }\n}\n\nfunction getRandomInt(max: number): number {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nexport default App;\n\n","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Sidebar.tsx",["270","271","272","273","274"],"import { styled } from 'linaria/react';\nimport { css } from 'linaria';\nimport { Fragment, useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\n\nimport { useStore } from 'effector-react';\nimport $GuildStore from '../../store/GuildStore';\nimport $GuildCacheStore, { setGuildRoles } from '../../store/GuildCacheStore';\nimport $ChannelStore, { setGuildChannels } from '../../store/ChannelStore';\nimport $ChannelCacheStore, { cacheChannels } from '../../store/ChannelCacheStore';\nimport { cacheUsers } from '../../store/UserCacheStore';\nimport { cacheMembers } from '../../store/MemberCacheStore';\nimport { cacheRoles } from '../../store/RolesCacheStore';\nimport Tab from '../sidebar/Tab';\n\nimport { BiHash } from 'react-icons/bi';\nimport {\n  RiVolumeDownFill,\n  RiMessage3Fill,\n  RiUserFill\n} from 'react-icons/ri';\n\nimport SidebarHeader from './SidebarHeader';\n\nimport Channel from '../../store/models/Channel';\nimport StyledText from '../ui/StyledText';\nimport CenteredContainer from './CenteredContainer';\nimport ChannelsService from '../../services/api/channels/channels.service';\nimport Dots from '../animations/Dots';\nimport classNames from 'classnames';\nimport isTabGuild from '../../utils/isTabGuild';\nimport GuildsService from '../../services/api/guilds/guilds.service';\nimport RolesService from '../../services/api/roles/roles.service';\nimport Role from '../../store/models/Role';\n\nconst SidebarContainer = styled.div`\n  display: flex;\n  width: 240px;\n  flex-shrink: 0;\n  flex-direction: column;\n  align-self: stretch;\n  background: var(--background-secondary-alt)\n`\n\nconst Content = styled.div`\n  display: flex;\n  align-self: center;\n  color: var(--text-primary);\n  font-weight: 900;\n  font-size: 18px;\n  padding: 0 16px;\n  user-select: none;\n`\n\ninterface RouteParams {\n  path: string,\n  guildId: string,\n  channelId: string\n}\n\ninterface SidebarProps {\n  type?: string\n}\n\ninterface GuildChannels {\n  [key: string]: string[]\n}\n\ninterface ChannelsCache {\n  [key: string]: Channel\n}\n\nfunction Sidebar({ type = 'channels' }: SidebarProps) {\n  const { path, guildId, channelId } = useParams<RouteParams>();\n\n  const guilds = useStore($GuildCacheStore);\n  const channels = useStore<GuildChannels>($ChannelStore);\n  const channelsCache = useStore<ChannelsCache>($ChannelCacheStore);\n\n  const history = useHistory();\n\n  const [loading, setLoading] = useState(false);\n\n  const [guildChannels, setGuildChannelsValue] = useState<string[]>([]);\n\n  useEffect(() => {\n    setLoading(false);\n    if (type === 'channels') {\n      if (!isTabGuild(guildId)) return;\n      setGuildChannelsValue(channels[guildId] || []);\n      \n      if (!guildChannels.length && (!path || path === 'guildsettings')) {\n        loadChannels();\n      }\n    }\n  }, [guildId]);\n\n  return (\n    <SidebarContainer>\n      { !path && guildId === '@me' && type === 'channels' && (\n        <SidebarHeader>\n          <Content>Direct Messages</Content>\n        </SidebarHeader>\n      ) }\n\n      { (path === 'discover' || path === 'profiles') && type === 'channels' && (\n        <Fragment>\n          <SidebarHeader>\n            <Content>Discover</Content>\n          </SidebarHeader>\n          <Tab\n            Icon={ RiUserFill }\n            title={ 'People' }\n            tabId={ 'people' }\n            active={ path === 'profiles' }\n            onClick={ () => { history.push(`/discover/people`) } }\n          />\n        </Fragment>\n      ) }\n\n      { path === 'home' && type === 'channels' && (\n        <Fragment>\n          <SidebarHeader>\n            <Content>Home</Content>\n          </SidebarHeader>\n          <Tab\n            Icon={ RiMessage3Fill }\n            title={ 'Feed' }\n            tabId={ 'feed' }\n            onClick={ () => { history.push(`/home/feed`) } }\n          />\n          <Tab\n            Icon={ RiUserFill }\n            title={ 'Friends' }\n            tabId={ 'friends' }\n            onClick={ () => { history.push(`/home/friends`) } }\n          />\n        </Fragment>\n      ) }\n\n      { path === 'guildsettings' && type === 'channels' && (\n        <Fragment>\n          <SidebarHeader>\n            <Content>Server Settings</Content>\n          </SidebarHeader>\n          <Tab\n            title={ 'General' }\n            tabId={ 'general' }\n            onClick={ () => { history.push(`/guildsettings/${guildId}/general`) } }\n          />\n          <Tab\n            title={ 'Roles' }\n            tabId={ 'roles' }\n            onClick={ () => { history.push(`/guildsettings/${guildId}/roles`) } }\n          />\n        </Fragment>\n      ) }\n\n      { !path && isTabGuild(guildId) && type === 'channels' && (\n        <Fragment>\n          <SidebarHeader>\n            <Content>{ guilds[guildId]?.name }</Content>\n          </SidebarHeader>\n        </Fragment>\n      ) }\n\n      { !path && isTabGuild(guildId) && type === 'channels' && (guildChannels.length && channelsCache[guildChannels[0]] ? (\n        guildChannels.map((channel: string) => (\n          <Tab\n            Icon={ BiHash }\n            title={ channelsCache[channel]?.name || '' }\n            tabId={ channelsCache[channel]?.id }\n            key={ channelsCache[channel]?.id }\n            onClick={ () => { history.push(`/channels/${guildId}/${channel}`) } }\n          />\n        ))\n      ) : loading ? (\n        <CenteredContainer>\n          <Dots />\n        </CenteredContainer>\n      ) : (\n        <StyledText className={ css`text-align: center` }>No channels</StyledText>\n      )) }\n    </SidebarContainer>\n  );\n\n  async function loadChannels() {\n    setLoading(true);\n    const response = await ChannelsService.getGuildChannels(guildId);\n    if (!response) return history.push('/home');\n    const membersResponse = await GuildsService.getGuildMembers(guildId || '');\n    const rolesResponse = await RolesService.getGuildRoles(guildId || '');\n\n    cacheUsers([...membersResponse].map((member: any) => member.user));\n    cacheMembers([...membersResponse].map((member: any) => {\n      delete member.user;\n      return { ...member, guild: guildId };\n    }));\n    cacheRoles(rolesResponse);\n    setGuildRoles({ guild: guildId, roles: rolesResponse.map((role: Role) => role.id) });\n    cacheChannels(response);\n    setGuildChannels({ guild: guildId, channels: response.map((channel: Channel) => channel.id) });\n    setGuildChannelsValue(response.map((channel: Channel) => channel.id));\n    setLoading(false);\n  }\n}\n\nexport default Sidebar;\n","/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Content.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/layout/SidebarHeader.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/layout/ContentHeader.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Guilds.tsx",["275"],"/home/miha/Documents/projects/js/nexomia-client/src/components/guilds/UserMenu.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/guilds/PanelButton.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/views/Login.tsx",["276"],"import { css } from 'linaria';\n\nimport { useState, useRef, useEffect } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\n\nimport { useTranslation } from 'react-i18next';\n\nimport { useStore } from 'effector-react';\nimport $AuthStore, { setToken, setRefreshToken } from '../store/AuthStore';\n\nimport AuthService from '../services/api/auth/auth.service';\n\nimport '../styles/App.css';\n\nimport Layer from '../components/ui/Layer';\nimport Modal from '../components/ui/Modal';\nimport ModalHeader from '../components/ui/ModalHeader';\nimport InputField from '../components/ui/InputField';\nimport FilledButton from '../components/ui/FilledButton';\nimport StyledText from '../components/ui/StyledText';\nimport LoadingPlaceholder from '../components/ui/LoadingPlaceholder';\n\nconst modalCss = css`\n  width: 440px;\n`\n\nconst negativeColorCss = css`\n  color: var(--text-negative);\n`\n\nfunction Login() {\n  const { token } = useStore($AuthStore);\n  const history = useHistory();\n\n  useEffect(() => {\n    console.log(token)\n    if (token && token !== '') {\n      history.push('/home');\n    }\n  }, []);\n\n  const { t } = useTranslation(['reg']);\n\n  const [loginLoading, setLoginLoading] = useState(false);\n  const [emailError, setEmailError] = useState(false);\n  const [passwordError, setPasswordError] = useState(false);\n  const [loginError, setLoginError] = useState(false);\n\n  const emailInput = useRef<HTMLInputElement>(null);\n  const passwordInput = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    console.log(emailInput);\n  }, []);\n\n  return (\n    <div className=\"Login dark-theme\">\n      <Layer>\n        <Modal className={ modalCss }>\n          <LoadingPlaceholder title={ t('reg:logging_in') } active={ loginLoading } />\n          <ModalHeader>{ t('reg:log_in') }<br /><StyledText>{ t('reg:welcomer_log_in') }</StyledText></ModalHeader>\n          <InputField placeholder=\"Email\" ref={ emailInput } />\n          { (emailError && <StyledText className={ negativeColorCss }>{ t('reg:errors.required_field') }</StyledText>) }\n          <InputField placeholder={ t('reg:fields.password') } type=\"password\" hidden={ true } ref={ passwordInput } />\n          { (passwordError && <StyledText className={ negativeColorCss }>{ t('reg:errors.required_field') }</StyledText>) }\n          { (loginError && <StyledText className={ negativeColorCss }>{ t('reg:errors.invalid_credentials') }</StyledText>) }\n          <StyledText>{ t('reg:no_account') } <Link to=\"/register\">{ t('reg:register') }</Link></StyledText>\n          <FilledButton onClick={ login }>{ t('reg:continue') }</FilledButton>\n        </Modal>\n      </Layer>\n    </div>\n  );\n\n  async function login() {\n    setLoginError(false);\n    setEmailError(!emailInput.current?.value);\n    setPasswordError(!passwordInput.current?.value);\n\n    if (!emailInput.current?.value || !passwordInput.current?.value) return;\n\n    setLoginLoading(true);\n\n    const response = await AuthService.login(emailInput.current?.value, passwordInput.current?.value);\n\n    setLoginLoading(false);\n\n    if (!response) {\n      setLoginError(true);\n      return;\n    }\n\n    setToken(response.access_token);\n    setRefreshToken(response.refresh_token);\n\n    history.push('/home');\n  }\n}\n\nexport default Login;\n","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/Layer.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/ui/Modal.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/ui/ModalHeader.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/ui/InputField.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/ui/FilledButton.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/ui/StyledText.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/views/Register.tsx",["277","278"],"import { css } from 'linaria';\n\nimport { useState, Fragment, useRef, useEffect } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\n\nimport { useTranslation } from 'react-i18next';\n\nimport { useStore } from 'effector-react';\nimport $AuthStore from '../store/AuthStore';\n\nimport AuthService from '../services/api/auth/auth.service';\n\nimport '../styles/App.css';\n\nimport Layer from '../components/ui/Layer';\nimport Modal from '../components/ui/Modal';\nimport ModalHeader from '../components/ui/ModalHeader';\nimport InputField from '../components/ui/InputField';\nimport FilledButton from '../components/ui/FilledButton';\nimport StyledText from '../components/ui/StyledText';\nimport LoadingPlaceholder from '../components/ui/LoadingPlaceholder';\n\nconst modalCss = css`\n  width: 440px\n`\n\nconst negativeColorCss = css`\n  color: var(--text-negative);\n`\n\nfunction Register() {\n  const { token } = useStore($AuthStore);\n  const history = useHistory();\n\n  useEffect(() => {\n    if (token) {\n      history.push('/channels/@me');\n    }\n  }, []);\n\n  const { t } = useTranslation(['reg']);\n\n  const [registerLoading, setRegisterLoading] = useState(false);\n  const [registerState, setRegisterState] = useState(0);\n  const [placeholderText, setPlaceholderText] = useState(0);\n  const [emailError, setEmailError] = useState(false);\n  const [usernameError, setUsernameError] = useState(false);\n  const [passwordError, setPasswordError] = useState(false);\n\n  const emailInput = useRef<HTMLInputElement>(null);\n  const usernameInput = useRef<HTMLInputElement>(null);\n  const passwordInput = useRef<HTMLInputElement>(null);\n\n  return (\n    <div className=\"Login dark-theme\">\n      <Layer>\n        <Modal className={ modalCss }>\n          <LoadingPlaceholder title={ (placeholderText === 0 && 'Creating your account...') || 'Almost there...' } active={ registerLoading } />\n\n          { registerState === 0 && (\n            <Fragment>\n              <ModalHeader>{ t('reg:register') }<br /><StyledText>{ t('reg:welcomer_register') }</StyledText></ModalHeader>\n              <InputField placeholder=\"Email\" ref={ emailInput } />\n              { (emailError && <StyledText className={ negativeColorCss }>{ t('reg:errors.required_field') }</StyledText>) }\n              <InputField placeholder={ t('reg:fields.username') } ref={ usernameInput } />\n              { (usernameError && <StyledText className={ negativeColorCss }>{ t('reg:errors.required_field') }</StyledText>) }\n              <InputField placeholder={ t('reg:fields.password') } type=\"password\" ref={ passwordInput } hidden={ true } />\n              { (passwordError && <StyledText className={ negativeColorCss }>{ t('reg:errors.required_field') }</StyledText>) }\n              <StyledText>{ t('reg:has_account') } <Link to=\"/login\">{ t('reg:log_in') }</Link></StyledText>\n              <FilledButton onClick={ register }>{ t('reg:continue') }</FilledButton>\n            </Fragment>\n          ) }\n\n          { registerState === 1 && (\n            <Fragment>\n              <ModalHeader>{ t('reg:account_created') }<br /><StyledText>{ t('reg:account_log_in') }</StyledText></ModalHeader>\n              <FilledButton onClick={ login }>{ t('reg:continue') }</FilledButton>\n            </Fragment>\n          ) }\n        </Modal>\n      </Layer>\n    </div>\n  );\n\n  async function register() {\n    setEmailError(!emailInput.current?.value);\n    setUsernameError(!usernameInput.current?.value);\n    setPasswordError(!passwordInput.current?.value);\n\n    if (!emailInput.current?.value || !usernameInput.current?.value || !passwordInput.current?.value) return;\n\n    setRegisterLoading(true);\n\n    const response = await AuthService.register(\n      emailInput.current?.value,\n      usernameInput.current?.value,\n      passwordInput.current?.value\n    );\n\n    if (!response) return;\n\n    setRegisterLoading(false);\n    setRegisterState(1);\n  }\n\n  function login() {\n    history.push('/login');\n  }\n}\n\nexport default Register;\n","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/LoadingPlaceholder.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/animations/Dots.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/i18n/config.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/services/api/auth/auth.service.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/services/api/common.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/config.ts",["279"],"export default {\n  api: {\n    endpoint: 'http://127.0.0.1:7081/api'\n  }\n}\n","/home/miha/Documents/projects/js/nexomia-client/src/services/api/users/users.service.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/services/api/guilds/guilds.service.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/layout/Modals.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/modals/ServerCreationModal.tsx",["280","281"],"import { css } from 'linaria';\nimport classNames from 'classnames';\nimport { useState, useRef, Fragment, useEffect } from 'react';\n\nimport { useStore } from 'effector-react';\nimport $ModalStore, { setModalState } from '../../store/ModalStore';\nimport { addGuild } from '../../store/GuildStore';\nimport { cacheGuilds } from '../../store/GuildCacheStore';\n\nimport GuildsService from '../../services/api/guilds/guilds.service';\n\nimport Layer from '../ui/Layer';\nimport LayerBackgroundShadeCss from '../css/LayerBackgroundShadeCss';\nimport InactiveLayerCss from '../css/InactiveLayerCss';\nimport Modal from '../ui/Modal';\nimport ModalHeader from '../ui/ModalHeader';\nimport StyledText from '../ui/StyledText';\nimport BigPageButton from '../ui/BigPageButton';\nimport InputField from '../ui/InputField';\nimport FilledButton from '../ui/FilledButton';\nimport LoadingPlaceholder from '../ui/LoadingPlaceholder';\n\ninterface ServerCreationModalProps {\n  active: boolean\n}\n\nconst negativeColorCss = css`\n  color: var(--text-negative);\n`\n\nfunction ServerCreationModal({ active }: ServerCreationModalProps) {\n  const layerRef = useRef(null);\n\n  const [modalPage, setModalPage] = useState(0);\n  const [nameValue, setNameValue] = useState('');\n  const [inviteValue, setInviteValue] = useState('');\n\n  const [joinError, setJoinError] = useState(false);\n  const [createError, setCreateError] = useState(false);\n\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (active) {\n      setModalPage(0);\n      setJoinError(false);\n      setCreateError(false);\n      setNameValue('');\n      setInviteValue('');\n    }\n  }, [active]);\n\n  return (\n    <Layer className={ classNames({ [LayerBackgroundShadeCss]: true, [InactiveLayerCss]: !active }) } onClick={ (event) => { closeModal(event) } } ref={ layerRef }>\n      <Modal className={ css`width: 440px` }>\n        <LoadingPlaceholder title={ (modalPage === 1 && 'Creating your server...') || 'Joining server...' } active={ loading } />\n        { modalPage === 0 && (\n          <Fragment>\n            <ModalHeader>Join or create a server<br /><StyledText>Talk with friends in your private space or create a public community!</StyledText></ModalHeader>\n            <BigPageButton onClick={ () => setModalPage(1) }>Create a server</BigPageButton>\n            <BigPageButton onClick={ () => setModalPage(2) }>Join a server</BigPageButton>\n          </Fragment>\n        ) }\n\n        { modalPage === 1 && (\n          <Fragment>\n            <ModalHeader>Name your server</ModalHeader>\n            <InputField placeholder=\"Server Name\" onChange={ (event) => { setNameValue(event.target.value) } } />\n            { (createError && <StyledText className={ negativeColorCss }>Failed to create server.</StyledText>) }\n            <FilledButton onClick={ createServer }>Create</FilledButton>\n          </Fragment>\n        ) }\n\n        { modalPage === 2 && (\n          <Fragment>\n            <ModalHeader>Enter your invite</ModalHeader>\n            <InputField placeholder=\"Invite Code\" onChange={ (event) => { setInviteValue(event.target.value) } } />\n            { (joinError && <StyledText className={ negativeColorCss }>Failed to join this server. Invite code is invalid or you have been banned from that server.</StyledText>) }\n            <FilledButton onClick={ joinServer }>Join</FilledButton>\n          </Fragment>\n        ) }\n      </Modal>\n    </Layer>\n  );\n\n  // TODO: что-то сделать с этим пиздецом в типах\n  function closeModal(event: any) {\n    if (event.target !== layerRef.current) return;\n    setModalState({ serverCreation: false });\n  }\n\n  async function createServer() {\n    setLoading(true);\n    const response = await GuildsService.createGuild(nameValue);\n    if (!response) {\n      setCreateError(true);\n      setLoading(false);\n      return;\n    }\n\n    const { id, name } = response;\n\n    cacheGuilds([{\n      id,\n      name,\n      icon: response.icon || ''\n    }]);\n    addGuild(id);\n\n    setLoading(false);\n    setNameValue('');\n    setInviteValue('');\n    setModalState({ serverCreation: false });\n  }\n\n  async function joinServer() {\n    setLoading(true);\n    const response = await GuildsService.joinGuild(inviteValue);\n    if (!response) {\n      setJoinError(true);\n      setLoading(false);\n      return;\n    }\n\n    const { id, name } = response;\n\n    cacheGuilds([{\n      id,\n      name,\n      icon: response.icon || ''\n    }]);\n    addGuild(id);\n\n    setLoading(false);\n    setNameValue('');\n    setInviteValue('');\n    setModalState({ serverCreation: false });\n  }\n}\n\nexport default ServerCreationModal;\n","/home/miha/Documents/projects/js/nexomia-client/src/components/ui/BigPageButton.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/css/PanelIconCss.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/css/LayerBackgroundShadeCss.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/css/InactiveLayerCss.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/sidebar/Tab.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/css/StyledIconCss.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/UserStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/AuthStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/GuildStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/ModalStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/ChannelStore.tsx",["282","283"],"import { createStore, createEvent } from 'effector-root';\nimport Channel from './models/Channel';\n\nconst setGuildChannels = createEvent<GuildChannelsInfo>();\n\ninterface GuildChannelsInfo {\n  guild: string,\n  channels: string[]\n}\n\ninterface GuildChannelPath {\n  guild: string,\n  channel: string\n}\n\ninterface GuildChannels {\n  [key: string]: string[]\n}\n\nconst $ChannelStore = createStore<GuildChannels>({});\n\n$ChannelStore\n  .on(setGuildChannels, (state: GuildChannels, info: GuildChannelsInfo) => ({ ...state, [info.guild]: info.channels }));\n\nexport default $ChannelStore;\nexport { setGuildChannels };\n","/home/miha/Documents/projects/js/nexomia-client/src/services/api/channels/channels.service.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/chat/ChatView.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/chat/ChatInput.tsx",["284"],"/home/miha/Documents/projects/js/nexomia-client/src/components/chat/MessageView.tsx",["285","286","287","288","289"],"/home/miha/Documents/projects/js/nexomia-client/src/components/layout/CenteredContainer.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/services/api/messages/messages.service.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/MessageStore.tsx",["290"],"import { createStore, createEvent } from 'effector-root';\n\nimport Message from './models/Message';\n\nconst setChannelMessages = createEvent<ChannelMessagesInfo>();\nconst addMessage = createEvent<ChannelMessageInfo>();\n\ninterface ChannelMessagesInfo {\n  channel: string,\n  messages: string[]\n}\n\ninterface ChannelMessageInfo {\n  channel: string,\n  message: string\n}\n\ninterface ChannelMessages {\n  [key: string]: string[]\n}\n\nconst $MessageStore = createStore<ChannelMessages>({});\n\n$MessageStore\n  .on(setChannelMessages, (state: ChannelMessages, info: ChannelMessagesInfo) => ({ ...state, [info.channel]: info.messages }))\n  .on(addMessage, (state: ChannelMessages, info: ChannelMessageInfo) => (\n    {\n      ...state,\n      [info.channel]: state[info.channel] ? state[info.channel].concat(info.message) : [info.message]\n    }\n  ));\n\nexport default $MessageStore;\nexport { setChannelMessages, addMessage };\n","/home/miha/Documents/projects/js/nexomia-client/src/store/MessageCacheStore.tsx",["291"],"import { createStore, createEvent } from 'effector-root';\n\nimport Message from './models/Message';\n\nconst cacheMessages = createEvent<Message[]>();\n\ninterface MessageCache {\n  [key: string]: Message\n}\n\nconst $MessageCacheStore = createStore<MessageCache>({});\n\n$MessageCacheStore\n  .on(cacheMessages, (state: MessageCache, messages: Message[]) => {\n    let modifiedState = { ...state };\n    messages.map((message) => {\n      modifiedState = { ...modifiedState, [message.id]: message };\n    });\n    return modifiedState;\n  })\n\nexport default $MessageCacheStore;\nexport { cacheMessages };\n","/home/miha/Documents/projects/js/nexomia-client/src/store/GuildCacheStore.tsx",["292","293"],"import { createStore, createEvent } from 'effector-root';\n\nimport Guild from './models/Guild';\nimport Role from './models/Role';\n\nconst cacheGuilds = createEvent<Guild[]>();\nconst setGuildRoles = createEvent<GuildRolesInfo>();\n\ninterface GuildCache {\n  [key: string]: Guild\n}\n\ninterface GuildRolesInfo {\n  guild: string,\n  roles: string[]\n}\n\nconst $GuildCacheStore = createStore<GuildCache>({});\n\n$GuildCacheStore\n  .on(cacheGuilds, (state: GuildCache, guilds: Guild[]) => {\n    let modifiedState = { ...state };\n    guilds.map((guild) => {\n      modifiedState = { ...modifiedState, [guild.id]: guild };\n    });\n    return modifiedState;\n  })\n  .on(setGuildRoles, (state: GuildCache, info: GuildRolesInfo) => {\n    const modifiedState = { ...state };\n    modifiedState[info.guild].roles = info.roles.reverse();\n    return modifiedState;\n  })\n\nexport default $GuildCacheStore;\nexport { cacheGuilds, setGuildRoles };\n","/home/miha/Documents/projects/js/nexomia-client/src/store/ChannelCacheStore.tsx",["294"],"import { createStore, createEvent } from 'effector-root';\n\nimport Channel from './models/Channel';\n\nconst cacheChannels = createEvent<Channel[]>();\n\ninterface ChannelCache {\n  [key: string]: Channel\n}\n\nconst $ChannelCacheStore = createStore<ChannelCache>({});\n\n$ChannelCacheStore\n  .on(cacheChannels, (state: ChannelCache, channels: Channel[]) => {\n    let modifiedState = { ...state };\n    channels.map((channel) => {\n      modifiedState = { ...modifiedState, [channel.id]: channel };\n    });\n    return modifiedState;\n  })\n\nexport default $ChannelCacheStore;\nexport { cacheChannels };\n","/home/miha/Documents/projects/js/nexomia-client/src/store/UserCacheStore.tsx",["295"],"import { createStore, createEvent } from 'effector-root';\n\nimport User from './models/User';\n\nconst cacheUsers = createEvent<User[]>();\n\ninterface UserCache {\n  [key: string]: User\n}\n\nconst $UserCacheStore = createStore<UserCache>({});\n\n$UserCacheStore\n  .on(cacheUsers, (state: UserCache, users: User[]) => {\n    let modifiedState = { ...state };\n    users.map((user) => {\n      modifiedState = { ...modifiedState, [user.id]: user };\n    });\n    return modifiedState;\n  })\n\nexport default $UserCacheStore;\nexport { cacheUsers };\n","/home/miha/Documents/projects/js/nexomia-client/src/components/chat/MessageRenderer.tsx",["296"],"import classNames from 'classnames';\nimport { useStore } from 'effector-react';\nimport { format } from 'fecha';\nimport { css } from 'linaria';\nimport { styled } from 'linaria/react';\nimport { useHistory } from 'react-router-dom';\nimport $MessageCacheStore from '../../store/MessageCacheStore';\nimport $UserCacheStore from '../../store/UserCacheStore';\nimport { setModalState } from '../../store/ModalStore';\nimport StyledText from '../ui/StyledText';\nimport { setContextMenu } from '../../store/ContextMenuStore';\n\nconst Container = styled.div`\n  margin-top: 8px;\n  margin-bottom: -1px;\n  padding: 4px 0;\n  display: flex;\n  flex-direction: row;\n\n  &:hover {\n    background: var(--background-secondary-alt);\n  }\n`\n\nconst GroupedContainerCss = css`\n  margin: 0;\n`\n\nconst Avatar = styled.img`\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  margin: 0 16px;\n  user-select: none;\n  cursor: pointer;\n  transition: .2s;\n  &:active {\n    transform: translateY(2px);\n  }\n`\n\nconst Spacer = styled.div`\n  width: 72px;\n  flex-shrink: 0;\n`\n\nconst ContentContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n`\n\ninterface MessageProps {\n  id: string,\n  grouped: boolean\n}\n\nfunction MessageRenderer({ id, grouped }: MessageProps) {\n  const UserCache = useStore($UserCacheStore);\n  const MessageCache = useStore($MessageCacheStore);\n\n  const history = useHistory();\n\n  return (\n    <Container className={ classNames({ [GroupedContainerCss]: grouped }) } onContextMenu={ openContextMenu } >\n      { !grouped ? (\n        <Avatar src={ UserCache[MessageCache[id].author].avatar } onClick={ showUserProfile }></Avatar>\n      ) : (\n        <Spacer />\n      ) }\n      <ContentContainer>\n        { !grouped && (\n          <StyledText className={ css`margin: 0` }>\n            <div\n              className={ css`display: inline-block; cursor: pointer; &:hover { text-decoration: underline }` } \n              onClick={ showUserProfile }\n            >{ UserCache[MessageCache[id].author].username }</div>\n            <StyledText className={ css`margin: 0 0 0 8px; color: var(--text-secondary); display: inline-block; font-size: 12px` }>\n              { format(new Date(MessageCache[id].created), 'HH:mm') }\n            </StyledText>\n          </StyledText>\n        ) }\n        <StyledText className={ css`margin: 0; padding-right: 16px; font-weight: 400; user-select: text; word-break: break-all` }>{ MessageCache[id].content }</StyledText>\n      </ContentContainer>\n    </Container>\n  )\n\n  function showUserProfile() {\n    history.push(`/profiles/${ MessageCache[id].author }`);\n  }\n\n  function openContextMenu(event: any) {\n    event.preventDefault();\n    setContextMenu({ type: 'message', top: event.pageY, left: event.pageX, visible: true, id });\n  }\n}\n\nexport default MessageRenderer;\n","/home/miha/Documents/projects/js/nexomia-client/src/components/profile/ProfileView.tsx",["297","298"],"/home/miha/Documents/projects/js/nexomia-client/src/utils/isTabGuild.ts",[],"/home/miha/Documents/projects/js/nexomia-client/src/store/MemberCacheStore.tsx",["299"],"import { createStore, createEvent } from 'effector-root';\n\nimport GuildMember from './models/GuildMember';\n\nconst cacheMembers = createEvent<GuildMember[]>();\n\ninterface MemberCache {\n  [key: string]: GuildMember\n}\n\nconst $MemberCacheStore = createStore<MemberCache>({});\n\n$MemberCacheStore\n  .on(cacheMembers, (state: MemberCache, members: GuildMember[]) => {\n    let modifiedState = { ...state };\n    members.map((member) => {\n      modifiedState = { ...modifiedState, [member.id]: member };\n    });\n    return modifiedState;\n  })\n\nexport default $MemberCacheStore;\nexport { cacheMembers };\n","/home/miha/Documents/projects/js/nexomia-client/src/components/contextmenus/ContextMenu.tsx",["300"],"import { useStore } from 'effector-react';\nimport { css } from 'linaria';\nimport { styled } from 'linaria/react';\nimport { Fragment } from 'react';\nimport { useHistory } from 'react-router';\nimport $ContextMenuStore from '../../store/ContextMenuStore';\nimport ContextTab from './ContextTab';\n\n\nconst Base = styled.div`\n  position: fixed;\n  background: var(--background-light);\n  border-radius: 4px;\n  padding: 8px 8px;\n  box-shadow: 0px 5px 15px 0 rgba(0, 0, 0, 0.2);\n`\n\nfunction ContextMenu() {\n  const { top, left, visible, type, id } = useStore($ContextMenuStore);\n  const history = useHistory();\n\n  return (\n    <Fragment>\n      { visible && (\n        <Base style={{ top, left }}>\n          { type === 'guild' && (\n            <Fragment>\n              <ContextTab title='Settings' onClick={ () => history.push(`/guildsettings/${id}`) } />\n              <ContextTab title='Leave Server' />\n              <ContextTab title='Copy ID' />\n            </Fragment>\n          ) }\n\n          { type === 'message' && (\n            <Fragment>\n              <ContextTab title='Add Reaction' />\n              <ContextTab title='Edit' />\n              <ContextTab title='Delete' />\n              <ContextTab title='Copy ID' />\n            </Fragment>\n          ) }\n        </Base>\n      ) }\n    </Fragment>\n  )\n}\n\nexport default ContextMenu;\n","/home/miha/Documents/projects/js/nexomia-client/src/store/ContextMenuStore.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/contextmenus/ContextTab.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/components/settings/SettingsView.tsx",["301"],"import { styled } from 'linaria/lib/react';\nimport { useParams } from 'react-router-dom';\nimport CenteredContainer from '../layout/CenteredContainer';\nimport RolesView from './guild/RolesView';\n\nconst Wrapper = styled.div`\n  max-width: 700px;\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  margin: 0 16px;\n`\n\ninterface RouteParams {\n  guildId: string,\n  channelId: string\n}\n\nfunction SettingsView() {\n  const { guildId, channelId } = useParams<RouteParams>();\n\n  return (\n    <CenteredContainer>\n      <Wrapper>\n        { channelId === 'roles' && (\n          <RolesView />\n        ) }\n      </Wrapper>\n    </CenteredContainer>\n  ) \n}\n\nexport default SettingsView;\n","/home/miha/Documents/projects/js/nexomia-client/src/components/settings/guild/RolesView.tsx",[],"/home/miha/Documents/projects/js/nexomia-client/src/services/api/roles/roles.service.ts",["302"],"import axios from 'axios';\nimport Role from '../../../store/models/Role';\n\nimport CommonRequestManager from '../common';\n\nclass RolesService {\n  async getGuildRoles(guild: string) {\n    const response = await CommonRequestManager.apiRequest('GET', `/guilds/${guild}/roles`, {});\n\n    if (axios.isAxiosError(response)) {\n      return false;\n    }\n\n    return response.data;\n  }\n}\n\nexport default new RolesService();\n","/home/miha/Documents/projects/js/nexomia-client/src/store/RolesCacheStore.tsx",["303"],"import { createStore, createEvent } from 'effector-root';\n\nimport Role from './models/Role';\n\nconst cacheRoles = createEvent<Role[]>();\n\ninterface RoleCache {\n  [key: string]: Role\n}\n\nconst $RoleCacheStore = createStore<RoleCache>({});\n\n$RoleCacheStore\n  .on(cacheRoles, (state: RoleCache, roles: Role[]) => {\n    let modifiedState = { ...state };\n    roles.map((role) => {\n      modifiedState = { ...modifiedState, [role.id]: role };\n    });\n    return modifiedState;\n  })\n\nexport default $RoleCacheStore;\nexport { cacheRoles };\n","/home/miha/Documents/projects/js/nexomia-client/src/components/settings/ui/Role.tsx",[],{"ruleId":"304","replacedBy":"305"},{"ruleId":"306","replacedBy":"307"},{"ruleId":"308","severity":1,"message":"309","line":6,"column":3,"nodeType":"310","messageId":"311","endLine":6,"endColumn":12},{"ruleId":"308","severity":1,"message":"312","line":42,"column":9,"nodeType":"310","messageId":"311","endLine":42,"endColumn":14},{"ruleId":"313","severity":1,"message":"314","line":56,"column":6,"nodeType":"315","endLine":56,"endColumn":8,"suggestions":"316"},{"ruleId":"308","severity":1,"message":"317","line":7,"column":8,"nodeType":"310","messageId":"311","endLine":7,"endColumn":19},{"ruleId":"308","severity":1,"message":"318","line":18,"column":3,"nodeType":"310","messageId":"311","endLine":18,"endColumn":19},{"ruleId":"308","severity":1,"message":"319","line":30,"column":8,"nodeType":"310","messageId":"311","endLine":30,"endColumn":18},{"ruleId":"308","severity":1,"message":"320","line":74,"column":26,"nodeType":"310","messageId":"311","endLine":74,"endColumn":35},{"ruleId":"313","severity":1,"message":"321","line":96,"column":6,"nodeType":"315","endLine":96,"endColumn":15,"suggestions":"322"},{"ruleId":"308","severity":1,"message":"323","line":67,"column":9,"nodeType":"310","messageId":"311","endLine":67,"endColumn":15},{"ruleId":"313","severity":1,"message":"324","line":40,"column":6,"nodeType":"315","endLine":40,"endColumn":8,"suggestions":"325"},{"ruleId":"313","severity":1,"message":"324","line":39,"column":6,"nodeType":"315","endLine":39,"endColumn":8,"suggestions":"326"},{"ruleId":"308","severity":1,"message":"327","line":45,"column":27,"nodeType":"310","messageId":"311","endLine":45,"endColumn":45},{"ruleId":"328","severity":1,"message":"329","line":1,"column":1,"nodeType":"330","endLine":5,"endColumn":2},{"ruleId":"308","severity":1,"message":"331","line":5,"column":10,"nodeType":"310","messageId":"311","endLine":5,"endColumn":18},{"ruleId":"308","severity":1,"message":"332","line":6,"column":8,"nodeType":"310","messageId":"311","endLine":6,"endColumn":19},{"ruleId":"308","severity":1,"message":"333","line":2,"column":8,"nodeType":"310","messageId":"311","endLine":2,"endColumn":15},{"ruleId":"308","severity":1,"message":"334","line":11,"column":11,"nodeType":"310","messageId":"311","endLine":11,"endColumn":27},{"ruleId":"308","severity":1,"message":"335","line":11,"column":8,"nodeType":"310","messageId":"311","endLine":11,"endColumn":12},{"ruleId":"308","severity":1,"message":"336","line":11,"column":10,"nodeType":"310","messageId":"311","endLine":11,"endColumn":20},{"ruleId":"308","severity":1,"message":"337","line":12,"column":10,"nodeType":"310","messageId":"311","endLine":12,"endColumn":22},{"ruleId":"308","severity":1,"message":"338","line":14,"column":8,"nodeType":"310","messageId":"311","endLine":14,"endColumn":21},{"ruleId":"308","severity":1,"message":"339","line":25,"column":9,"nodeType":"310","messageId":"311","endLine":25,"endColumn":23},{"ruleId":"313","severity":1,"message":"340","line":35,"column":6,"nodeType":"315","endLine":35,"endColumn":15,"suggestions":"341"},{"ruleId":"308","severity":1,"message":"342","line":3,"column":8,"nodeType":"310","messageId":"311","endLine":3,"endColumn":15},{"ruleId":"343","severity":1,"message":"344","line":16,"column":28,"nodeType":"345","messageId":"346","endLine":16,"endColumn":30},{"ruleId":"308","severity":1,"message":"347","line":4,"column":8,"nodeType":"310","messageId":"311","endLine":4,"endColumn":12},{"ruleId":"343","severity":1,"message":"344","line":23,"column":24,"nodeType":"345","messageId":"346","endLine":23,"endColumn":26},{"ruleId":"343","severity":1,"message":"344","line":16,"column":28,"nodeType":"345","messageId":"346","endLine":16,"endColumn":30},{"ruleId":"343","severity":1,"message":"344","line":16,"column":22,"nodeType":"345","messageId":"346","endLine":16,"endColumn":24},{"ruleId":"308","severity":1,"message":"348","line":9,"column":10,"nodeType":"310","messageId":"311","endLine":9,"endColumn":23},{"ruleId":"308","severity":1,"message":"349","line":5,"column":20,"nodeType":"310","messageId":"311","endLine":5,"endColumn":29},{"ruleId":"308","severity":1,"message":"335","line":9,"column":8,"nodeType":"310","messageId":"311","endLine":9,"endColumn":12},{"ruleId":"343","severity":1,"message":"344","line":16,"column":26,"nodeType":"345","messageId":"346","endLine":16,"endColumn":28},{"ruleId":"308","severity":1,"message":"350","line":2,"column":10,"nodeType":"310","messageId":"311","endLine":2,"endColumn":13},{"ruleId":"308","severity":1,"message":"351","line":20,"column":11,"nodeType":"310","messageId":"311","endLine":20,"endColumn":18},{"ruleId":"308","severity":1,"message":"347","line":2,"column":8,"nodeType":"310","messageId":"311","endLine":2,"endColumn":12},{"ruleId":"343","severity":1,"message":"344","line":16,"column":22,"nodeType":"345","messageId":"346","endLine":16,"endColumn":24},"no-native-reassign",["352"],"no-negated-in-lhs",["353"],"@typescript-eslint/no-unused-vars","'useParams' is defined but never used.","Identifier","unusedVar","'match' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'preloadUserInfo'. Either include it or remove the dependency array.","ArrayExpression",["354"],"'$GuildStore' is defined but never used.","'RiVolumeDownFill' is defined but never used.","'classNames' is defined but never used.","'channelId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'channels', 'guildChannels.length', 'loadChannels', 'path', and 'type'. Either include them or remove the dependency array.",["355"],"'modals' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history' and 'token'. Either include them or remove the dependency array.",["356"],["357"],"'setPlaceholderText' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'useStore' is defined but never used.","'$ModalStore' is defined but never used.","'Channel' is defined but never used.","'GuildChannelPath' is defined but never used.","'Dots' is defined but never used.","'cacheUsers' is defined but never used.","'cacheMembers' is defined but never used.","'GuildsService' is defined but never used.","'CachedChannels' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'MessageStore' and 'loadMessages'. Either include them or remove the dependency array.",["358"],"'Message' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Role' is defined but never used.","'setModalState' is defined but never used.","'useEffect' is defined but never used.","'css' is defined but never used.","'guildId' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"359","fix":"360"},{"desc":"361","fix":"362"},{"desc":"363","fix":"364"},{"desc":"363","fix":"365"},{"desc":"366","fix":"367"},"Update the dependencies array to be: [preloadUserInfo]",{"range":"368","text":"369"},"Update the dependencies array to be: [channels, guildChannels.length, guildId, loadChannels, path, type]",{"range":"370","text":"371"},"Update the dependencies array to be: [history, token]",{"range":"372","text":"373"},{"range":"374","text":"373"},"Update the dependencies array to be: [MessageStore, channel, loadMessages]",{"range":"375","text":"376"},[1786,1788],"[preloadUserInfo]",[2774,2783],"[channels, guildChannels.length, guildId, loadChannels, path, type]",[1095,1097],"[history, token]",[1045,1047],[1317,1326],"[MessageStore, channel, loadMessages]"]